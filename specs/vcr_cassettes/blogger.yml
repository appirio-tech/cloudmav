--- 
- !ruby/struct:VCR::HTTPInteraction 
  request: !ruby/struct:VCR::Request 
    method: :get
    uri: http://http:80//www.theabsentmindedcoder.com/feeds/posts/default?alt=rss&max-results=999
    body: 
    headers: 
  response: !ruby/struct:VCR::Response 
    status: !ruby/struct:VCR::ResponseStatus 
      code: 302
      message: Found
    headers: 
      date: 
      - Tue, 22 Feb 2011 15:45:33 GMT
      server: 
      - Apache/2.2.3 (Red Hat)
      location: 
      - http://search5.comcast.com/?cat=dnsr&con=ds&url=http
      content-length: 
      - "0"
      content-type: 
      - text/html; charset=UTF-8
    body: 
    http_version: "1.1"
- !ruby/struct:VCR::HTTPInteraction 
  request: !ruby/struct:VCR::Request 
    method: :get
    uri: http://search5.comcast.com:80/?cat=dnsr&con=ds&url=http
    body: 
    headers: 
  response: !ruby/struct:VCR::Response 
    status: !ruby/struct:VCR::ResponseStatus 
      code: 200
      message: OK
    headers: 
      date: 
      - Tue, 22 Feb 2011 15:45:33 GMT
      server: 
      - Apache/2.2.3 (Red Hat)
      set-cookie: 
      - entitlement_cache=deleted; expires=Mon, 22-Feb-2010 15:45:32 GMT; path=/; domain=.comcast.net
      - token=201102221502337361; path=/; domain=.comcast.net
      transfer-encoding: 
      - chunked
      content-type: 
      - text/html; charset=UTF-8
    body: "\n\
      <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\r\n\
      <html xmlns=\"http://www.w3.org/1999/xhtml\">\r\n\
      <head>\r\n <style type=\"text/css\">@import url(\"static/static.php?t=css&f=lib_framework%2Ftemplates_1297877143%2Fdnsr_jul10_bfads-iframe_px%2Fdnsr_jul10_css.css\");</style> \r\n <script type=\"text/javascript\" src=\"static/static.php?t=js&f=lib_framework%2Ftemplates_1297877143%2Fdnsr_jul10_bfads-iframe_px%2Fdnsr_jul10_js.js\"></script> \r\n\
      <meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\r\n\
      <title>Sorry. Page not found.</title>\r\n\
      <script type=\"text/javascript\">  \r\n\
      <!-- //\r\n\
      \tvar srch_time = new Date().valueOf();var srch_img=new Image();\r\n\
      // -->\r\n\
      </script>\r\n\
      <!-- Added for Liquidity in IE6 -->\r\n\
      \r\n\
      <script type=\"text/javascript\">\r\n\
      function alertSize() {\r\n\
      var myWidth = 0, myHeight = 0;\r\n\
      var maxWidth = 0;\r\n\
      /* Adjusting the browser shrinking for weather module so as to fix the right rail module truncation */\r\n\
      if (document.getElementById('weather-module') != null) \r\n     maxWidth = 1005;\r\n\
      else\r\n     maxWidth = 945;\r\n\
      if( typeof( window.innerWidth ) == 'number' ) {\r\n\
      //Non-IE\r\n\
      myWidth = window.innerWidth;\r\n\
      myHeight = window.innerHeight;\r\n\
      }else if( document.documentElement &&\r\n\
      (document.documentElement.clientWidth || document.documentElement.clientHeight ) ) {\r\n\
      //IE 6+ in 'standards compliant mode'\r\n\
      myWidth = document.documentElement.clientWidth;\r\n\
      myHeight = document.documentElement.clientHeight;\r\n\
      }else if( document.body && ( document.body.clientWidth || document.body.clientHeight ) ) {\r\n\
      //IE 4 compatible\r\n\
      myWidth = document.body.clientWidth;\r\n\
      myHeight = document.body.clientHeight;\r\n\
      }\r\n\
      //window.alert( 'Width = ' + myWidth );\r\n\
      //window.alert( 'Height = ' + myHeight );\r\n\
      if(myWidth<maxWidth)\r\n\
      {\r\n\
      //document.all.min_stage_width.style.width=788;\r\n\
      document.getElementById(\"min_stage_width\").style.width=maxWidth-3;\r\n\
      }\r\n\
      else if(myWidth > maxWidth)\r\n\
      {\r\n\
      //document.all.min_stage_width.style.width=\"100%\";\r\n\
      document.getElementById(\"min_stage_width\").style.width=\"100%\";\r\n\
      }\r\n\
      if(typeof alertSearchDropSize == 'function')\r\n  { \r\n   alertSearchDropSize('search-fieldBtm');  \r\n  }\r\n\
      }\r\n\
      function res()\r\n\
      {\r\n\
      window.onresize = alertSize;\r\n\
      }\r\n\
      </script>\r\n\
      </head>\r\n\
      <body  class=\"search websearch lite fluid\" id=\"min_stage_width\" onLoad=\"alertSize();\"><!--qadebug-->\r\n\
      <a name=\"pagetop\"></a>\r\n\
      <div id=\"container\">\r\n\
      \r\n\
      \r\n\
      <div class=\"evo\">\r\n\
      <div class=\"topMenu\">\r\n\
      <ul>\r\n\
      \t<li id=\"tm-dotnet\"><a href=\"http://www.comcast.net/?CM.src=top\" title=\"Home\">comcast.net</a></li>\r\n\
      \t\r\n\
      \t\r\n\
      \t<li id=\"tm-account\"><a href=\"https://customer.comcast.com/SmartUrl/Secure/Users.aspx\" title=\"Go To My Account\">My Account</a></li>\r\n\
      \t<li id=\"tm-ask\"><a title=\"Ask Comcast\" href=\"#\" onclick=\"window.open('http://www.comcast.net/providers/askcomcast/popup.html?CM.src=top', 'askcomcast', 'scrollbars=no,status=no,location=no,toolbar=no,favorites=no,address=no,menubar=no,resizable=yes,width=520,height=482');\">Ask Comcast</a></li>\r\n\
      \t<li id=\"tm-security\"><a href=\"http://www.comcast.net/security/?CM.src=top\" title=\"Security\" accesskey=\"y\">Security</a></li>\r\n\
      \r\n\
      \t<li id=\"tm-help\"><a href=\"http://www.comcast.net/help/?CM.src=top\">Help</a></li>\r\n\
      \r\n        <li style=\"float:right\"> <a href=\"javascript:reportProblem()\" id=\"bugreport\" name=\"bugreport\">Report a problem with this page</a> </li>\r\n\
      \r\n        <div style=\"display:none\">\r\n         <iframe id=\"report_problem\" name=\"report_problem\" width=\"0\" height=\"0\" style=\"display:none\"></iframe>\r\n\
      \r\n         <form method=\"post\" target=\"report_problem\" name=\"bugform\" action=\"http://bugs.comcast.net/dns-redirect-bugs\">\r\n         <table>\r\n           <tr><td><input type=text name=\"user_agent\" id=\"user_agent\" size=50 value=\"\"></td></tr>\r\n           <tr><td><input type=text name=\"url\" id=\"url\" size=50 value=\"\"></td></tr>\r\n         </table>\r\n         </form>\r\n        </div>\r\n\
      </ul>\r\n\
      </div>\r\n\
      <div class=\"searchbox\">\r\n\
      <div class=\"searchboxWrapper\">\r\n\
      <div class=\"searchPane\">\r\n\
      <form name=\"top_search\" id=\"search-form\" action=\"\" method=\"get\">\r\n\
      \t\t<input name=\"cat\" id=\"cat\" value=\"dnsr\" type=\"hidden\" />\r\n\
      \t\t<input name=\"con\" id=\"con\" value=\"ds\" type=\"hidden\" />\r\n\
      \t\t<input name=\"form_submit\" value=\"1\" type=\"hidden\" />\r\n\
      \r\n\
      \t\t<div id=\"logo_position\">\r\n\
      \t\t\t<div class=\"logo\"><a href=\"http://comcast.net/?CM.src=top\" title=\"Home\" accesskey=\"0\" target=\"_top\">Comcast.net<SPAN id=\"logo_link\"></SPAN></a></div>\r\n\
      \t\t</div>\r\n\
      \r\n\
      \t\t<!-- <div class=\"logo\"></div> -->\r\n                <div class=\"searchField\">\r\n                  \r\n                  <input id=\"search-field\" name=\"q\" type=\"text\" accesskey=\"s\" value=\"http\" />\r\n                  <input name=\"qs\" value=\"06oENya4ZG1YS6vOLJwpLiFdjG91ICN4yDSJrXbfE7bmw8EAiKXWzexMqtu2pEw5SGdPqj0M9M4HQSu1Fn4LveofN9b4I_uBORrJayeUAJ3B1fYGGzC4I4EOcS8jtzUNIH8ICtaiWmev7Mwj_wCmeRL_o2j1kqQLGKtHXoshBWZ9iK83guO2QTHS89_PIHxf_RMUy6MBFPPiww-H4mKcj6lUYaKPaswDAMUxySIK2m2g..,YT0zO2s9NQ..\" type=\"hidden\" />\r\n                 \r\n\
      \r\n                 \r\n                </div>\r\n                <button name=\"top_SearchSubmit\" class=\"searchSubmit\" onclick=\"document.top_search.submit();\"></button>\r\n\
      </form>\r\n\
      </div>\r\n\
      <div class=\"clear\"></div>\r\n\
      </div><!-- /.searchboxWrapper -->\r\n\
      </div><!-- /.searchbox -->\r\n\
      \r\n\
      </div><!-- /.evo -->\r\n\
      \r\n\
      <div class=\"clear\"></div>\r\n\
      \r\n\
      <div id=\"columns-wrapper\"><div id=\"columns\">\r\n\
      \r\n\
      \t<!-- Start Stage -->\r\n\
      \t<div id=\"stage-wrapper\"><div id=\"stage\">\r\n\
      \t<a name=\"a-content\"></a>\r\n        <!-- Interior Wrapper -->\r\n        <div id=\"interior-wrapper\">\r\n \t\r\n        \r\n          <table class=\"topmod\"><tr><td width=\"83%\"> \r\n            <!--federation-->        \r\n            <div class=\"searcherror\"><p class=\"spell\">Sorry, we can't find \"http\". We suggest that you check the spelling of the web address or search above.</p>\r\n\
      </div>\r\n\
      \r\n          </td>\r\n          <td valign=\"top\" width=\"15%\" class=\"disable\">\r\n            <a class=\"disablepage\" href=\"http://dns-opt-out.comcast.net/\">Disable this error service</a>\r\n          </td> \r\n          </table>\r\n          <!-- Start Left Sidebar Wrapper -->\r\n          <!-- narrow_search was here -->\r\n      \t\r\n        <!-- Start Content Wrapper -->\r\n        <div id=\"content-wrapper\">\r\n        <div id=\"content\" class=\"results\">\r\n              <div class=\"module  top\">\r\n    <h3 id=\"h-webresults\" class=\"h-webresults\">Search Results</h3>\r\n    <h4 id=\"h4-resultsnum\"> for <strong>http</strong> </h4>\r\n\
      <br />\r\n              <div class=\"module sponsor-6\">            \r\n\
      <h3>Sponsored Links</h3>\r\n\
      <dl>\r\n\
      <dt class=\"title\">\r\n  <a class=\"adl1\" target=\"_blank\"  onclick=\"s_objectID='&amp;lid=0A1'\"  href=\"http://9331.r.msn.com/?ld=4vmrZrok-cAqEeFz4RAZtuBNrGyKI096PXbboYgE8bqfryh9Hu0tQ0IlZL8-St7YBlgoXbeDcGA1rFT5aBBg7eT0By-LjqLp0nsXzXvk0aNIDua3nDkXN0x4aCbZQCzI0XrVzHVUW35Pagmf57dIziF2joZGJhppXYPrM_-oLS9sZEqvMHHD7Ufy-_A5-QR2N5aO7trc7u8_wqBC0z9iJXC2hctdEbZ3GglUwZIdbUXq3jiVx_rM1OlHJyJ-nipd1SRLzGasmo06n1QTCezC_7GjVUCUw3EuNKVD-YR3zNZpRzAtphECZjcz0FyAmM_-mRGl16PNrLpTXwEuYKDS-s3JI_zMNR3huQig\" onmouseover=\"window.status=''; return true\" onmouseout=\"window.status=''; return true\">Dedicated Servers at 1&1</a>\r\n\
      </dt>\r\n\
      <dd>\r\n  <a class=\"adl2\" target=\"_blank\"  onclick=\"s_objectID='&amp;lid=0A2'\"  href=\"http://9331.r.msn.com/?ld=4vmrZrok-cAqEeFz4RAZtuBNrGyKI096PXbboYgE8bqfryh9Hu0tQ0IlZL8-St7YBlgoXbeDcGA1rFT5aBBg7eT0By-LjqLp0nsXzXvk0aNIDua3nDkXN0x4aCbZQCzI0XrVzHVUW35Pagmf57dIziF2joZGJhppXYPrM_-oLS9sZEqvMHHD7Ufy-_A5-QR2N5aO7trc7u8_wqBC0z9iJXC2hctdEbZ3GglUwZIdbUXq3jiVx_rM1OlHJyJ-nipd1SRLzGasmo06n1QTCezC_7GjVUCUw3EuNKVD-YR3zNZpRzAtphECZjcz0FyAmM_-mRGl16PNrLpTXwEuYKDS-s3JI_zMNR3huQig\" onmouseover=\"window.status=''; return true\" onmouseout=\"window.status=''; return true\">\r\n    <span class=\"summary\">Dual Quad & Hexa Core Servers. Why Spend More? Save Now at 1&1.</span><br>\r\n    <span class=\"source\">www.1and1.com/dedicated-servers</span>\r\n  </a>\r\n\
      </dd>\r\n\
      \r\n\
      </dl>\r\n\
      </div>\r\n              <div id=\"iframe-results\">http </div>\r\n\
      \t\t\t  <div id=\"iframe-offset\">0 </div>\r\n          </div>\r\n          <div class=\"module sponsor-6\">            \r\n\
      <h3>Sponsored Links</h3>\r\n\
      <dl>\r\n\
      <dt class=\"title\">\r\n  <a class=\"adl1\" target=\"_blank\"  onclick=\"s_objectID='&amp;lid=0A3'\"  href=\"http://9331.r.msn.com/?ld=4vmrZrok-cAqEeFz4RAZtuBNrGyKI096PXbboYgE8bqfryh9Hu0tQ0IlZL8-St7YBlgoXbeDcGA1rFT5aBBg7eT0By-LjqLp0nsXzXvk0aNIDua3nDkXN0x4aCbZQCzI0XrVzHVUW35Pagmf57dIziF2joZGJhppXYPrM_-oLS9sZEqvMHHD7Ufy-_A5-QR2N5aO7trc7u8_wqBC0z9iJXC2hctdEbZ3GglUwZIdbUXq3jiVx_rM1OlHJyJ-nipd1SRLzGasmo06n1QTCezC_7GjVUCUw3EuNKVD-YR3zNZpRzAtphECZjcz0FyAmM_-mRGl16PNrLpTXwEuYKDS-s3JI_zMNR3huQig\" onmouseover=\"window.status=''; return true\" onmouseout=\"window.status=''; return true\">Dedicated Servers at 1&1</a>\r\n\
      </dt>\r\n\
      <dd>\r\n  <a class=\"adl2\" target=\"_blank\"  onclick=\"s_objectID='&amp;lid=0A4'\"  href=\"http://9331.r.msn.com/?ld=4vmrZrok-cAqEeFz4RAZtuBNrGyKI096PXbboYgE8bqfryh9Hu0tQ0IlZL8-St7YBlgoXbeDcGA1rFT5aBBg7eT0By-LjqLp0nsXzXvk0aNIDua3nDkXN0x4aCbZQCzI0XrVzHVUW35Pagmf57dIziF2joZGJhppXYPrM_-oLS9sZEqvMHHD7Ufy-_A5-QR2N5aO7trc7u8_wqBC0z9iJXC2hctdEbZ3GglUwZIdbUXq3jiVx_rM1OlHJyJ-nipd1SRLzGasmo06n1QTCezC_7GjVUCUw3EuNKVD-YR3zNZpRzAtphECZjcz0FyAmM_-mRGl16PNrLpTXwEuYKDS-s3JI_zMNR3huQig\" onmouseover=\"window.status=''; return true\" onmouseout=\"window.status=''; return true\">\r\n    <span class=\"summary\">Dual Quad & Hexa Core Servers. Why Spend More? Save Now at 1&1.</span><br>\r\n    <span class=\"source\">www.1and1.com/dedicated-servers</span>\r\n  </a>\r\n\
      </dd>\r\n\
      \r\n\
      </dl>\r\n\
      </div>\r\n          \r\n\
      \r\n\
      <div class=\"next\"><a   onclick=\"s_objectID='&amp;lid=0NE1'\"  href=\"?cat=dnsr&con=ds&q=&url=http&qs=06oENya4ZGM2oSkAyqVEwH5j5_9uR5gVyF1_lIKvWdEfzvSh0R1XD34e1FSyKu6zC6DNUVtzmfztpdyfZWt6RxJQ6pmkQv4i9eIQC3sRriEL6MTA2cGqo2dBjvG8hWtXAnUgYsSLTpZsnUirq8zI9UPC6O3a94O4UakIfbG6-G1J3Og3iHthLRsjksMlvl8FmWMnNZ9I3SMWA5K-VZSl5z2icsEhGXC1tg2YnrBnt98VVzsPIiKv3LyUoC1nerreNpmD67XCm5tglXDNA8jYPacmxDBTTKrIRnRtM_rpg5T0h1Rh8RLZqUUHtTg8QfFKz6TVx5e2zagaKCczK9amEoXqkdixG7gpUSkxMwY5Jqh3gGjqNQJ1Ov-GR-zL5JCUNqLO160J2dT5UqYz24AlEPohuiUCAOpUe7lWQEBmuBbhdi8PG1qtQ1WOSnsU3PtsUL87ELnCTnsEoGuRZUbTjf7KxfD91IxM8Ei_eFETqCmi8MyeSIB-fCzHfNStmRgs_Cb6NlUFlt5tOrM6_tleWLGNzaeg5TM4ghvHI4iouUtckMf-hWaqJF1ODrqGhM-smqSGIhKJBLJdHhrg..&pagination=1&offset=10\">next page</a></div>\r\n\
      \r\n       \r\n        </div>\r\n        </div><!-- /#content-wrapper -->\r\n        <div id=\"sidebar-wrapper\">\r\n\
      \t\t<div id=\"sidebar\">\r\n          <div id=\"left-sidebar-wrapper\">\r\n\
      <div id=\"narrow-search\">\r\n   <h3>Narrow Your Search</h3>\r\n      <ul>\r\n        <li class=\"list-rel-narrow\">\r\n\
      <a  onclick=\"s_objectID='&amp;lid=0RNL1'\"  href=\"?cat=dnsr&con=ds&q=HTTP&qs=06oENya4ZG1YS6vOLJwpLiFdjG91ICN4yDSJrXbfE7bmw8EAiKXWzexMqtu2pEw5SGdPqj0M9M4HQSu1Fn4LveofN9b4I_uBORrJayeUAJ3B1fYGGzC4I4EOcS8jtzUNIH8ICtaiWmev7Mwj_wCmeRL_o2j1kqQLGKtHXoshBWZ9iK83guO2QTHS89_PIHxf_RMUy6MBFPPiww-H4mKcj6lUYaKPaswDAMUxySIK2m2g..,YT0xO0w9SFRUUDtSPTE7Uz1NOnIjO2s9MQ..&narrow=1\">HTTP</a>\r\n\
      </li><li class=\"list-rel-narrow\">\r\n\
      <a  onclick=\"s_objectID='&amp;lid=0RNL2'\"  href=\"?cat=dnsr&con=ds&q=Web+Site&qs=06oENya4ZG1YS6vOLJwpLiFdjG91ICN4yDSJrXbfE7bmw8EAiKXWzexMqtu2pEw5SGdPqj0M9M4HQSu1Fn4LveofN9b4I_uBORrJayeUAJ3B1fYGGzC4I4EOcS8jtzUNIH8ICtaiWmev7Mwj_wCmeRL_o2j1kqQLGKtHXoshBWZ9iK83guO2QTHS89_PIHxf_RMUy6MBFPPiww-H4mKcj6lUYaKPaswDAMUxySIK2m2g..,YT0xO0w9V2ViIFNpdGU7Uj0yO1M9ZDpyIy0jRmI7az0x&narrow=1\">Web Site</a>\r\n\
      </li><li class=\"list-rel-narrow\">\r\n\
      <a  onclick=\"s_objectID='&amp;lid=0RNL3'\"  href=\"?cat=dnsr&con=ds&q=Book&qs=06oENya4ZG1YS6vOLJwpLiFdjG91ICN4yDSJrXbfE7bmw8EAiKXWzexMqtu2pEw5SGdPqj0M9M4HQSu1Fn4LveofN9b4I_uBORrJayeUAJ3B1fYGGzC4I4EOcS8jtzUNIH8ICtaiWmev7Mwj_wCmeRL_o2j1kqQLGKtHXoshBWZ9iK83guO2QTHS89_PIHxf_RMUy6MBFPPiww-H4mKcj6lUYaKPaswDAMUxySIK2m2g..,YT0xO0w9Qm9vaztSPTM7Uz1kOnIjLSNGYjtrPTE.&narrow=1\">Book</a>\r\n\
      </li><li class=\"list-rel-narrow\">\r\n\
      <a  onclick=\"s_objectID='&amp;lid=0RNL4'\"  href=\"?cat=dnsr&con=ds&q=HTTPS&qs=06oENya4ZG1YS6vOLJwpLiFdjG91ICN4yDSJrXbfE7bmw8EAiKXWzexMqtu2pEw5SGdPqj0M9M4HQSu1Fn4LveofN9b4I_uBORrJayeUAJ3B1fYGGzC4I4EOcS8jtzUNIH8ICtaiWmev7Mwj_wCmeRL_o2j1kqQLGKtHXoshBWZ9iK83guO2QTHS89_PIHxf_RMUy6MBFPPiww-H4mKcj6lUYaKPaswDAMUxySIK2m2g..,YT0xO0w9SFRUUFM7Uj00O1M9ZDpyIy0jRmI7az0x&narrow=1\">HTTPS</a>\r\n\
      </li><li class=\"list-rel-narrow\">\r\n\
      <a  onclick=\"s_objectID='&amp;lid=0RNL5'\"  href=\"?cat=dnsr&con=ds&q=My+Web&qs=06oENya4ZG1YS6vOLJwpLiFdjG91ICN4yDSJrXbfE7bmw8EAiKXWzexMqtu2pEw5SGdPqj0M9M4HQSu1Fn4LveofN9b4I_uBORrJayeUAJ3B1fYGGzC4I4EOcS8jtzUNIH8ICtaiWmev7Mwj_wCmeRL_o2j1kqQLGKtHXoshBWZ9iK83guO2QTHS89_PIHxf_RMUy6MBFPPiww-H4mKcj6lUYaKPaswDAMUxySIK2m2g..,YT0xO0w9TXkgV2ViO1I9NTtTPWQ6ciMtI0ZiO2s9MQ..&narrow=1\">My Web</a>\r\n\
      </li><li class=\"list-rel-narrow\">\r\n\
      <a  onclick=\"s_objectID='&amp;lid=0RNL6'\"  href=\"?cat=dnsr&con=ds&q=Internet+Technology&qs=06oENya4ZG1YS6vOLJwpLiFdjG91ICN4yDSJrXbfE7bmw8EAiKXWzexMqtu2pEw5SGdPqj0M9M4HQSu1Fn4LveofN9b4I_uBORrJayeUAJ3B1fYGGzC4I4EOcS8jtzUNIH8ICtaiWmev7Mwj_wCmeRL_o2j1kqQLGKtHXoshBWZ9iK83guO2QTHS89_PIHxf_RMUy6MBFPPiww-H4mKcj6lUYaKPaswDAMUxySIK2m2g..,YT0xO0w9SW50ZXJuZXQgVGVjaG5vbG9neTtSPTY7Uz1kOnIjLSNGYjtrPTE.&narrow=1\">Internet Technology</a>\r\n\
      </li><li class=\"list-rel-narrow\">\r\n\
      <a  onclick=\"s_objectID='&amp;lid=0RNL7'\"  href=\"?cat=dnsr&con=ds&q=Free+Toolbar&qs=06oENya4ZG1YS6vOLJwpLiFdjG91ICN4yDSJrXbfE7bmw8EAiKXWzexMqtu2pEw5SGdPqj0M9M4HQSu1Fn4LveofN9b4I_uBORrJayeUAJ3B1fYGGzC4I4EOcS8jtzUNIH8ICtaiWmev7Mwj_wCmeRL_o2j1kqQLGKtHXoshBWZ9iK83guO2QTHS89_PIHxf_RMUy6MBFPPiww-H4mKcj6lUYaKPaswDAMUxySIK2m2g..,YT0xO0w9RnJlZSBUb29sYmFyO1I9NztTPWQ6ciMtI0ZiO2s9MQ..&narrow=1\">Free Toolbar</a>\r\n\
      </li><li class=\"list-rel-narrow\">\r\n\
      <a  onclick=\"s_objectID='&amp;lid=0RNL8'\"  href=\"?cat=dnsr&con=ds&q=Services+Online&qs=06oENya4ZG1YS6vOLJwpLiFdjG91ICN4yDSJrXbfE7bmw8EAiKXWzexMqtu2pEw5SGdPqj0M9M4HQSu1Fn4LveofN9b4I_uBORrJayeUAJ3B1fYGGzC4I4EOcS8jtzUNIH8ICtaiWmev7Mwj_wCmeRL_o2j1kqQLGKtHXoshBWZ9iK83guO2QTHS89_PIHxf_RMUy6MBFPPiww-H4mKcj6lUYaKPaswDAMUxySIK2m2g..,YT0xO0w9U2VydmljZXMgT25saW5lO1I9ODtTPWQ6ciMtI0ZiO2s9MQ..&narrow=1\">Services Online</a>\r\n\
      </li><li class=\"list-rel-narrow\">\r\n\
      <a  onclick=\"s_objectID='&amp;lid=0RNL9'\"  href=\"?cat=dnsr&con=ds&q=Goole+Toolbar&qs=06oENya4ZG1YS6vOLJwpLiFdjG91ICN4yDSJrXbfE7bmw8EAiKXWzexMqtu2pEw5SGdPqj0M9M4HQSu1Fn4LveofN9b4I_uBORrJayeUAJ3B1fYGGzC4I4EOcS8jtzUNIH8ICtaiWmev7Mwj_wCmeRL_o2j1kqQLGKtHXoshBWZ9iK83guO2QTHS89_PIHxf_RMUy6MBFPPiww-H4mKcj6lUYaKPaswDAMUxySIK2m2g..,YT0xO0w9R29vbGUgVG9vbGJhcjtSPTk7Uz1kOnIjLSNGYjtrPTE.&narrow=1\">Goole Toolbar</a>\r\n\
      </li><li class=\"list-rel-narrow\">\r\n\
      <a  onclick=\"s_objectID='&amp;lid=0RNL10'\"  href=\"?cat=dnsr&con=ds&q=Portal+Web+Site&qs=06oENya4ZG1YS6vOLJwpLiFdjG91ICN4yDSJrXbfE7bmw8EAiKXWzexMqtu2pEw5SGdPqj0M9M4HQSu1Fn4LveofN9b4I_uBORrJayeUAJ3B1fYGGzC4I4EOcS8jtzUNIH8ICtaiWmev7Mwj_wCmeRL_o2j1kqQLGKtHXoshBWZ9iK83guO2QTHS89_PIHxf_RMUy6MBFPPiww-H4mKcj6lUYaKPaswDAMUxySIK2m2g..,YT0xO0w9UG9ydGFsIFdlYiBTaXRlO1I9MTA7Uz1kOnIjLSNGYjtrPTE.&narrow=1\">Portal Web Site</a>\r\n\
      </li>\r\n      </ul>\r\n\
      <div class=\"clear\"></div>\r\n\
      \r\n            \r\n\
      </div>\r\n\
      </div>\r\n\
      \t\t</div>\r\n        </div>\r\n\
      \r\n        \r\n\
      \r\n        \r\n\
      \r\n        <div class=\"clear\"></div> \t\t\r\n        </div> <!-- #interior-wrapper -->\r\n\
      </div><!-- /#stage -->\r\n\
      \r\n\
      <!-- Bottom Search -->\r\n\
      <div class=\"searchbox bottom\">\r\n    <div class=\"searchboxWrapper\">\r\n        <div class=\"searchPane\">\r\n            <form name=\"bottom_search\" id=\"search-form-bottom\" action=\"\" method=\"get\">\r\n                <input name=\"cat\" id=\"cat\" value=\"dnsr\" type=\"hidden\" />\r\n                <input name=\"con\" id=\"con\" value=\"ds\" type=\"hidden\" />\r\n                <input name=\"form_submit\" value=\"1\" type=\"hidden\" />                \r\n                <div class=\"searchField\">\r\n                     \r\n                    <input id=\"search-fieldBtm\" name=\"q\" type=\"text\" value=\"http\" />\r\n                    <input name=\"qs\" value=\"06oENya4ZG1YS6vOLJwpLiFdjG91ICN4yDSJrXbfE7bmw8EAiKXWzexMqtu2pEw5SGdPqj0M9M4HQSu1Fn4LveofN9b4I_uBORrJayeUAJ3B1fYGGzC4I4EOcS8jtzUNIH8ICtaiWmev7Mwj_wCmeRL_o2j1kqQLGKtHXoshBWZ9iK83guO2QTHS89_PIHxf_RMUy6MBFPPiww-H4mKcj6lUYaKPaswDAMUxySIK2m2g..,YT0zO2s9NQ..\" type=\"hidden\" />\r\n                    \r\n                    \r\n                    \r\n                </div>\r\n                <button name=\"bottom_SearchSubmit\" class=\"searchSubmit\" onclick=\"document.bottom_search.submit();\"></button>\r\n            </form>\r\n        </div><!-- /.searchPane -->\r\n    <div class=\"clear\"></div>\r\n    </div><!-- /.searchboxWrapper -->\r\n\
      </div><!-- /.searchbox -->\r\n\
      \r\n\
      </div><!-- /#stage-wrapper -->\r\n\
      </div><!-- /#columns -->\r\n\
      <div class=\"clear\"></div>\r\n\
      \r\n\
      <div id=\"footer\" class=\"footer\">\r\n\
      \t<ul>\r\n\
      \t\t<li id=\"copyright\"><a href=\"http://www.comcast.com/\" rel=\"external\">&copy; <script type=\"text/javascript\">var now = new Date; document.write(now.getFullYear());</script> Comcast Interactive Media</a></li>\r\n\
      \r\n\
      \t\t<li><a href=\"http://www.comcast.net/privacy\">Privacy Statement</a></li>\r\n\
      \t\t<li><a href=\"http://www.comcast.net/terms/use\">Acceptable Use Policy</a></li>\r\n\
      \t\t<li><a href=\"http://www.comcast.net/terms\">Terms of Service</a></li>\r\n\
      \t\t<li><a href=\"http://www.comcast.net/help/contact\">Contact Us</a></li>\r\n\
      \t\t<li><a href=\"http://www.comcast.com/Corporate/Move/default.html?CMP=ILC-fcomcastnethpfmove\">Moving</a></li>\r\n\
      \t\t<li><a href=\"http://www.comcast.net/advertisewithus\">Advertise With Us</a></li>\r\n\
      \t\t<li><a href=\"https://www.comcast.com/Corporate/Customers/CustomerCentral.html?CMP=ILC-MCSMPaymybill\">Pay My Bill</a></li>\r\n\
      \t\t<p/>\r\n        </ul>\r\n\
      </div>\r\n\
      </div><!-- /#columns-wrapper -->\r\n\
      </div><!-- /#container -->\r\n\
      \r\n\
      <!--sitecatalyst-->\r\n\
      \r\n\
      <script type=\"text/javascript\">\r\n    createIframe();\r\n    res();\r\n\
      </script>\r\n\
      \r\n\
      </body>\r\n\
      </html>"
    http_version: "1.1"
- !ruby/struct:VCR::HTTPInteraction 
  request: !ruby/struct:VCR::Request 
    method: :get
    uri: http://www.theabsentmindedcoder.com:80/feeds/posts/default?alt=rss&max-results=999
    body: 
    headers: 
  response: !ruby/struct:VCR::Response 
    status: !ruby/struct:VCR::ResponseStatus 
      code: 200
      message: OK
    headers: 
      content-type: 
      - application/rss+xml; charset=UTF-8
      expires: 
      - Wed, 06 Apr 2011 17:54:20 GMT
      date: 
      - Wed, 06 Apr 2011 17:56:25 GMT
      last-modified: 
      - Mon, 21 Mar 2011 00:40:33 GMT
      etag: 
      - W/"AkcHQnc9eSl7ImA9WhZTFks."
      x-content-type-options: 
      - nosniff
      x-xss-protection: 
      - 1; mode=block
      server: 
      - GSE
      cache-control: 
      - public, max-age=0, must-revalidate, proxy-revalidate
      age: 
      - "0"
      transfer-encoding: 
      - chunked
    body: "<?xml version='1.0' encoding='UTF-8'?><rss xmlns:atom='http://www.w3.org/2005/Atom' xmlns:openSearch='http://a9.com/-/spec/opensearchrss/1.0/' xmlns:georss='http://www.georss.org/georss' xmlns:thr='http://purl.org/syndication/thread/1.0' version='2.0'><channel><atom:id>tag:blogger.com,1999:blog-2815645646073366093</atom:id><lastBuildDate>Mon, 21 Mar 2011 00:40:33 +0000</lastBuildDate><title>The Absent Minded Coder</title><description>Repository&amp;lt;Idea&amp;gt;().Where(i =&amp;gt; i.Author == &amp;quot;JB&amp;quot;)</description><link>http://www.theabsentmindedcoder.com/</link><managingEditor>noreply@blogger.com (JB)</managingEditor><generator>Blogger</generator><openSearch:totalResults>67</openSearch:totalResults><openSearch:startIndex>1</openSearch:startIndex><openSearch:itemsPerPage>999</openSearch:itemsPerPage><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-6567329549691676757</guid><pubDate>Mon, 01 Nov 2010 07:30:00 +0000</pubDate><atom:updated>2010-11-01T00:30:00.306-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>Refactor</category><category domain='http://www.blogger.com/atom/ns#'>C#</category><title>OMG Dependencies\xE2\x80\x93new direction time</title><description>&lt;p&gt;After looking at the BaseDALObject and tracing its usage, I\xE2\x80\x99ve come to the conclusion that at the moment, it is too intertwined to refactor. I will leave it as is with its simple code cleanup and try a different angle.&lt;/p&gt; &lt;p&gt;So I decided to run the application. And kaboom! No go. So I think I will just start from the top down. &lt;/p&gt; &lt;p&gt;Wow, I completely forgot that back in the day we didn\xE2\x80\x99t have the awesomeness of partial classes. So my main form has a bunch of generated controls etc from the designer. So I am going to create a new MainForm and let VS do its magic joo joo. And actually since I have to create a new form anyway, I am going to create a WPF application. &lt;/p&gt; &lt;p&gt;Step 1 \xE2\x80\x93 Create a new WPF project called RMS&lt;/p&gt; &lt;p&gt;Step 2 \xE2\x80\x93 Move all the WinForm controls over&lt;/p&gt; &lt;p&gt;When I tried to compile after fixing some minor issues. I got this error message&lt;/p&gt; &lt;p&gt;&lt;a href=\"http://lh3.ggpht.com/_jZ1HIkVkz48/TM0bEe5ozAI/AAAAAAAAAJ8/_pc9VSU6o3A/s1600-h/image%5B4%5D.png\"&gt;&lt;img style=\"background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px\" title=\"image\" border=\"0\" alt=\"image\" src=\"http://lh4.ggpht.com/_jZ1HIkVkz48/TM0bF9RfC-I/AAAAAAAAAKA/XCuYjI6u61c/image_thumb%5B2%5D.png?imgmax=800\" width=\"968\" height=\"135\"&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;The issue is my MainForm still has a \xE2\x80\x98main\xE2\x80\x99 method. The new WPF application project has the main method in the App.xaml.cs&lt;/p&gt; &lt;p&gt;Remove this and we should be good to go. &lt;/p&gt; &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:dd493b12-52da-4f1c-9ba4-273f9c76f9eb\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background: #ddd; overflow: auto\"&gt; &lt;ol style=\"background: #000000; margin: 0 0 0 2em; padding: 0 0 0 5px;\"&gt; &lt;li&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"color:#808080\"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"color:#008000\"&gt; The main entry point for the application.&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"color:#808080\"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;[&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;STAThread&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;]&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;static&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; Main() &lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0{&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;Application&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;.Run(&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;MainForm&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;());&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0}&lt;/span&gt;&lt;/li&gt; &lt;/ol&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;p&gt;The project already has a MainWindow and it is opened up by the application on startup. How do I know? I can just look at the App.xaml and the StartupUri.&lt;/p&gt; &lt;p&gt;&lt;a href=\"http://lh6.ggpht.com/_jZ1HIkVkz48/TM0bGUXb8YI/AAAAAAAAAKE/R0r3x5v-wIo/s1600-h/image%5B9%5D.png\"&gt;&lt;img style=\"background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px\" title=\"image\" border=\"0\" alt=\"image\" src=\"http://lh3.ggpht.com/_jZ1HIkVkz48/TM0bHN-9VeI/AAAAAAAAAKI/4FNp_qWNuYs/image_thumb%5B5%5D.png?imgmax=800\" width=\"798\" height=\"216\"&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;So now time to start moving over the actual code and controls for the MainForm. &lt;/p&gt; &lt;p&gt;&lt;font size=\"5\"&gt;&lt;strong&gt;Menu&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt; &lt;p&gt;File &amp;gt; Quit&lt;/p&gt; &lt;p&gt;Manage Data &amp;gt; Manage Datasets, Manage Other Data&lt;/p&gt; &lt;p&gt;Analysis &amp;gt; Analyze Rate Schedules&lt;/p&gt; &lt;p&gt;To recreate this in WPF we simply do:&lt;/p&gt; &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:65ef2b39-f63b-4898-91d4-671ef04a1753\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background: #ddd; overflow: auto\"&gt; &lt;ol style=\"background: #000000; margin: 0 0 0 2.5em; padding: 0 0 0 5px;\"&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;Menu&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;MenuItem&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt; Header&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;=&lt;/span&gt;&lt;span style=\"color:#668f5f\"&gt;&amp;quot;File&amp;quot;&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;MenuItem&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt; Header&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;=&lt;/span&gt;&lt;span style=\"color:#668f5f\"&gt;&amp;quot;Quit&amp;quot;&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt; /&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;/&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;MenuItem&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;MenuItem&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt; Header&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;=&lt;/span&gt;&lt;span style=\"color:#668f5f\"&gt;&amp;quot;Manage Data&amp;quot;&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;MenuItem&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt; Header&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;=&lt;/span&gt;&lt;span style=\"color:#668f5f\"&gt;&amp;quot;Manage Datasets&amp;quot;&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt; /&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;MenuItem&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt; Header&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;=&lt;/span&gt;&lt;span style=\"color:#668f5f\"&gt;&amp;quot;Manage Other Data&amp;quot;&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt; /&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;/&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;MenuItem&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;MenuItem&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt; Header&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;=&lt;/span&gt;&lt;span style=\"color:#668f5f\"&gt;&amp;quot;Analysis&amp;quot;&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;MenuItem&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt; Header&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;=&lt;/span&gt;&lt;span style=\"color:#668f5f\"&gt;&amp;quot;Analyze Rate Schedules&amp;quot;&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt; /&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;/&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;MenuItem&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;/&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;Menu&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;/ol&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;p&gt;&lt;strong&gt;&lt;font size=\"5\"&gt;Change layout controls&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:41a93cf7-91de-4505-aa5d-3bf5e9d2df02\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background: #ddd; overflow: auto\"&gt; &lt;ol style=\"background: #000000; margin: 0 0 0 2.5em; padding: 0 0 0 5px;\"&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;Panel&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; leftPanel = &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;Panel&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;();&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0leftPanel.AutoScroll = &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;true&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0leftPanel.Width = &lt;/span&gt;&lt;span style=\"color:#bda265\"&gt;350&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0leftPanel.Dock = &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;DockStyle&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;.Left;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&amp;nbsp;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;Splitter&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; splitterCtrl = &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;Splitter&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;();&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0splitterCtrl.Dock = &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;DockStyle&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;.Left;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0splitterCtrl.MinExtra = &lt;/span&gt;&lt;span style=\"color:#bda265\"&gt;200&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0splitterCtrl.MinSize = &lt;/span&gt;&lt;span style=\"color:#bda265\"&gt;200&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&amp;nbsp;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;Panel&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; mainPanel = &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;Panel&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;();&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0mainPanel.AutoScroll = &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;true&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0mainPanel.Dock = &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;DockStyle&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;.Fill;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&amp;nbsp;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#ff0000\"&gt;Controls&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;.AddRange(&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;Control&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;[] {mainPanel, splitterCtrl, leftPanel});&lt;/span&gt;&lt;/li&gt; &lt;/ol&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;p&gt;Based on the naming of the controls and my recollection. I had a left side and a main panel. And looks like a splitter between the two panels. In WPF we can do this all within a grid control.&lt;/p&gt; &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:d8737ede-fb7f-4185-a122-cde3ba0a3a08\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background: #ddd; overflow: auto\"&gt; &lt;ol style=\"background: #000000; margin: 0 0 0 2.5em; padding: 0 0 0 5px;\"&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;Grid&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;Grid.RowDefinitions&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;RowDefinition&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt; Height&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;=&lt;/span&gt;&lt;span style=\"color:#668f5f\"&gt;&amp;quot;Auto&amp;quot;&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt; /&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;RowDefinition&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt; /&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;/&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;Grid.RowDefinitions&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;Grid.ColumnDefinitions&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;ColumnDefinition&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt; /&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;ColumnDefinition&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt; /&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;ColumnDefinition&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt; /&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;/&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;Grid.ColumnDefinitions&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;/ol&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:93c26bb4-73a4-4519-ab86-f1d4c6da1efa\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background: #ddd; overflow: auto\"&gt; &lt;ol style=\"background: #000000; margin: 0 0 0 2.5em; padding: 0 0 0 5px;\"&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;StackPanel&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt; x&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;:&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;Name&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;=&lt;/span&gt;&lt;span style=\"color:#668f5f\"&gt;&amp;quot;leftPanel&amp;quot;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt; Grid.Row&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;=&lt;/span&gt;&lt;span style=\"color:#668f5f\"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt; Grid.Column&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;=&lt;/span&gt;&lt;span style=\"color:#668f5f\"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt; Width&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;=&lt;/span&gt;&lt;span style=\"color:#668f5f\"&gt;&amp;quot;350&amp;quot;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt; MinWidth&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;=&lt;/span&gt;&lt;span style=\"color:#668f5f\"&gt;&amp;quot;200&amp;quot;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt; /&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;GridSplitter&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt; Grid.Row&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;=&lt;/span&gt;&lt;span style=\"color:#668f5f\"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt; Grid.Column&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;=&lt;/span&gt;&lt;span style=\"color:#668f5f\"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt; /&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;StackPanel&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt; x&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;:&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;Name&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;=&lt;/span&gt;&lt;span style=\"color:#668f5f\"&gt;&amp;quot;mainPanel&amp;quot;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt; Grid.Row&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;=&lt;/span&gt;&lt;span style=\"color:#668f5f\"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt; Grid.Column&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;=&lt;/span&gt;&lt;span style=\"color:#668f5f\"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt; /&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;/ol&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;Now time to swap out change the code where some other controls are added to the panels.&lt;/p&gt; &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:452f3ce3-94a1-4be0-9dc7-09ab1305afb0\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background: #ddd; overflow: auto\"&gt; &lt;ol style=\"background: #000000; margin: 0 0 0 2em; padding: 0 0 0 5px;\"&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;Contract_Control&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; contractsCtrl = &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;Contract_Control&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;(rmsController);&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0contractsCtrl.Dock = &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;DockStyle&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;.Fill;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0leftPanel.&lt;/span&gt;&lt;span style=\"color:#ff0000\"&gt;Controls&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;.Add(contractsCtrl);&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&amp;nbsp;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;RateSchedule_Control&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; rateScheduleCtrl = &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;RateSchedule_Control&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;(rmsController);&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0rateScheduleCtrl.Dock = &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;DockStyle&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;.Fill;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0mainPanel.&lt;/span&gt;&lt;span style=\"color:#ff0000\"&gt;Controls&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;.Add(rateScheduleCtrl);&lt;/span&gt;&lt;/li&gt; &lt;/ol&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;p&gt;We just need to wrap up the form controls in WindowsFormsHost controls and add them to the stackpanels.&lt;/p&gt; &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:d009c703-796d-427d-ab54-28221dafb6ca\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background: #ddd; overflow: auto\"&gt; &lt;ol style=\"background: #000000; margin: 0 0 0 2.5em; padding: 0 0 0 5px;\"&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; contractsCtrl = &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;Contract_Control&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;(rmsController);&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0contractsCtrl.Dock = &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;DockStyle&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;.Fill;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; host = &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;WindowsFormsHost&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;();&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0host.Child = contractsCtrl;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0leftPanel.Children.Add(host);&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&amp;nbsp;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; rateScheduleCtrl = &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;RateSchedule_Control&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;(rmsController);&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0rateScheduleCtrl.Dock = &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;DockStyle&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;.Fill;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; host2 = &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;WindowsFormsHost&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;();&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0host2.Child = rateScheduleCtrl;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0leftPanel.Children.Add(host2);&lt;/span&gt;&lt;/li&gt; &lt;/ol&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;p&gt;Now I can compile. But when I run, I blow up. Looks like I need to take a look at the RMS Controller. But that can wait for another day.&lt;/p&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-6567329549691676757?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2010/11/omg-dependenciesnew-direction-time.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-3685653093931977944</guid><pubDate>Sun, 31 Oct 2010 09:38:00 +0000</pubDate><atom:updated>2010-10-31T02:38:00.450-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>Refactor</category><category domain='http://www.blogger.com/atom/ns#'>C#</category><title>baseDALObject\xE2\x80\x93Refactor</title><description>&lt;p&gt;DAL in this case stands for Data Access Layer. Since this the application was built in a very data centric manner, I figure I will start my refactoring here.&lt;/p&gt; &lt;p&gt;In the DAL project, I found an object named baseDALObject. I am assuming this is a base class used by the other DAL objects. The fact that the objects and project is called DAL objects makes me cringe. &lt;/p&gt; &lt;p&gt;The original class file looks like: &lt;/p&gt; &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:481b79d3-6c88-4241-8e10-6a8a25e4b73b\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background: #ddd; overflow: auto\"&gt; &lt;ol style=\"background: #000000; margin: 0 0 0 3em; padding: 0 0 0 5px;\"&gt; &lt;li&gt;&lt;span style=\"color:#2b91af\"&gt;using&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; System;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#2b91af\"&gt;using&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; System.Data;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#2b91af\"&gt;using&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; System.Data.SqlClient;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#008000\"&gt;//using Microsoft.ApplicationBlocks.Data;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&amp;nbsp;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#2b91af\"&gt;namespace&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; RMS_DALObjects&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;{&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"color:#808080\"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"color:#008000\"&gt; Summary description for Class1.&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"color:#808080\"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;class&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;baseDALObject&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0{&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;#region&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &amp;quot;Variables&amp;quot;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&amp;nbsp;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;private&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;string&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; strConn = &lt;/span&gt;&lt;span style=\"color:#668f5f\"&gt;&amp;quot;connection_string&amp;quot;&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;private&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;SqlConnection&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; sqlConn;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&amp;nbsp;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;#endregion&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&amp;nbsp;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;#region&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &amp;quot;Constructors&amp;quot;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&amp;nbsp;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; baseDALObject(){}&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&amp;nbsp;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;#endregion&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&amp;nbsp;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;#region&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &amp;quot;Methods&amp;quot;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&amp;nbsp;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;DataSet&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; getDataSet(&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;string&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; strSQL)&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0{&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;try&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0{&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;return&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;null&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#008000\"&gt;//return SqlHelper.ExecuteDataset(strConn, CommandType.Text, strSQL);&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0}&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;catch&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; (&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;SqlException&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; e)&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0{&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;string&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; msg = e.Message;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;return&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;null&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0}&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0}&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&amp;nbsp;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;SqlDataReader&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; getDataReader(&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;string&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; strSQL)&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0{&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;try&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0{&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;sqlConn = &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;SqlConnection&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;(strConn);&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0sqlConn.Open();&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&amp;nbsp;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;SqlCommand&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; sqlCmd = &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;SqlCommand&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;(strSQL, sqlConn);&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&amp;nbsp;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;return&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; sqlCmd.ExecuteReader();&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0}&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;catch&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; (&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;SqlException&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; e)&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0{&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;string&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; msg = e.Message;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;return&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;null&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0}&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0}&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&amp;nbsp;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; closeConnection()&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0{&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;try&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0{&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;sqlConn.Close();&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0}&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;catch&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; (&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;SqlException&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; e)&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0{&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;string&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; msg = e.Message;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0}&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0}&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&amp;nbsp;&lt;/li&gt; &lt;li&gt;&amp;nbsp;&lt;/li&gt; &lt;li&gt;&amp;nbsp;&lt;/li&gt; &lt;li&gt;&amp;nbsp;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;SqlParameter&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;[] getParameters(&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;string&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; storedProcedureName)&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0{&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;return&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;null&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;; &lt;/span&gt;&lt;span style=\"color:#008000\"&gt;//SqlHelperParameterCache.GetSpParameterSet(strConn, storedProcedureName);\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0}&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&amp;nbsp;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; executeUpdate(&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;string&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; storedProcedureName, &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;SqlParameter&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;[] sqlParams)&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0{&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;try&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0{&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;sqlParams[sqlParams.Length-&lt;/span&gt;&lt;span style=\"color:#bda265\"&gt;3&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;].Value = &lt;/span&gt;&lt;span style=\"color:#668f5f\"&gt;&amp;quot;RMS&amp;quot;&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#008000\"&gt;//SqlHelper.ExecuteNonQuery(strConn, CommandType.StoredProcedure, storedProcedureName, sqlParams);&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0}&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;catch&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; (&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;SqlException&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; e)&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0{\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;string&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; msg = e.Message;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0}&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0}&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&amp;nbsp;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; executeDelete(&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;string&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; storedProcedureName, &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;SqlParameter&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;[] sqlParams)&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0{&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;try&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0{&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#008000\"&gt;//SqlHelper.ExecuteNonQuery(strConn, CommandType.StoredProcedure, storedProcedureName, sqlParams);&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0}&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;catch&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;(&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;SqlException&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; e)&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0{\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;string&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; msg = e.Message;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0}&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0}&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&amp;nbsp;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;#endregion&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&amp;nbsp;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0}&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;}&lt;/span&gt;&lt;/li&gt; &lt;/ol&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;p&gt;I commented out the application block since I don\xE2\x80\x99t have it installed and well I plan on removing it. I will give my past self a gold star that it only affected a single class. &lt;/p&gt; &lt;p&gt;But then I noticed I am catching exceptions and not throwing them\xE2\x80\xA6 no idea what the hell I was thinking there.&lt;/p&gt; &lt;p&gt;So here are some steps I am taking to just reformat the code and basic refactoring.&lt;/p&gt; &lt;p&gt;1. Removing the regions&lt;/p&gt; &lt;p&gt;2. Getting rid of unused namespaces&lt;/p&gt; &lt;p&gt;3. Removing the try catch blocks (We can figure out exception handling later)&lt;/p&gt; &lt;p&gt;And I removed unused comments. These steps alone reduced the size of the file by half.&lt;/p&gt; &lt;p&gt;I am going to rename files as well to reflect a more common coding standard. &lt;/p&gt; &lt;p&gt;The resulting file is now:&lt;/p&gt; &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:b2e431c7-575c-4ff7-9708-f1880e9e0214\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background: #ddd; overflow: auto\"&gt; &lt;ol style=\"background: #000000; margin: 0 0 0 2.5em; padding: 0 0 0 5px;\"&gt; &lt;li&gt;&lt;span style=\"color:#2b91af\"&gt;using&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; System.Data;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#2b91af\"&gt;using&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; System.Data.SqlClient;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&amp;nbsp;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#2b91af\"&gt;namespace&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; RMS_DALObjects&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;{&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;class&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;BaseDALObject&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0{&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;SqlConnection&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; sqlConn;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;string&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; strConn = &lt;/span&gt;&lt;span style=\"color:#668f5f\"&gt;&amp;quot;connection_string&amp;quot;&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&amp;nbsp;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;DataSet&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; GetDataSet(&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;string&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; strSQL)&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0{&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;return&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;null&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#008000\"&gt;//return SqlHelper.ExecuteDataset(strConn, CommandType.Text, strSQL);&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0}&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&amp;nbsp;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;SqlDataReader&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; GetDataReader(&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;string&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; strSQL)&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0{&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0sqlConn = &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;SqlConnection&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;(strConn);&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0sqlConn.Open();&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&amp;nbsp;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;SqlCommand&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; sqlCmd = &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;SqlCommand&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;(strSQL, sqlConn);&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&amp;nbsp;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;return&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; sqlCmd.ExecuteReader();&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0}&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&amp;nbsp;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; CloseConnection()&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0{&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0sqlConn.Close();&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0}&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&amp;nbsp;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;SqlParameter&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;[] GetParameters(&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;string&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; storedProcedureName)&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0{&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;return&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;null&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;; &lt;/span&gt;&lt;span style=\"color:#008000\"&gt;//SqlHelperParameterCache.GetSpParameterSet(strConn, storedProcedureName);\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0}&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&amp;nbsp;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; ExecuteUpdate(&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;string&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; storedProcedureName, &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;SqlParameter&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;[] sqlParams)&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0{&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0sqlParams[sqlParams.Length - &lt;/span&gt;&lt;span style=\"color:#bda265\"&gt;3&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;].Value = &lt;/span&gt;&lt;span style=\"color:#668f5f\"&gt;&amp;quot;RMS&amp;quot;&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#008000\"&gt;//SqlHelper.ExecuteNonQuery(strConn, CommandType.StoredProcedure, storedProcedureName, sqlParams);&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0}&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&amp;nbsp;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; ExecuteDelete(&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;string&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; storedProcedureName, &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;SqlParameter&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;[] sqlParams)&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0{&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#008000\"&gt;//SqlHelper.ExecuteNonQuery(strConn, CommandType.StoredProcedure, storedProcedureName, sqlParams);&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0}&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0}&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;}&lt;/span&gt;&lt;/li&gt; &lt;/ol&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;p&gt;I am pretty sure we will eventually change this from using inheritance to using composition but for now, I will just leave it alone. I will change the code to use regular good ole ADO .net&lt;/p&gt; &lt;p&gt; You can\xE2\x80\x99t change everything at once. But we can start to change one thing at a time. So although I am slightly confused as to why I need to keep the connection around and why some other object is using that connection and calling close, I will leave it as is.&lt;/p&gt; &lt;p&gt;But I will change the name of the sqlConn to _connection. I will also create a createConnection method the other methods can use.&lt;/p&gt; &lt;p&gt;It has also been awhile since I used plain ole vanilla ADO so forgive me if I do something wrong. &lt;img style=\"border-bottom-style: none; border-right-style: none; border-top-style: none; border-left-style: none\" class=\"wlEmoticon wlEmoticon-smile\" alt=\"Smile\" src=\"http://lh6.ggpht.com/_jZ1HIkVkz48/TMvnjAsuXqI/AAAAAAAAAJ4/QZk_m0T1F40/wlEmoticon-smile%5B2%5D.png?imgmax=800\"&gt;&lt;/p&gt; &lt;p&gt;After a bit of tweaking the GetDataSet method now looks like&lt;/p&gt; &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:b3882a3c-d3ae-4f7f-b52a-d93c52d76e65\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background: #ddd; overflow: auto\"&gt; &lt;ol style=\"background: #000000; margin: 0 0 0 2em; padding: 0 0 0 5px;\"&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;DataSet&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; GetDataSet(&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;string&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; sql)&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0{&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0createConnection();&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; dataSet = &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;DataSet&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;();&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;SqlDataAdapter&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;(sql, _connection).Fill(dataSet);&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;return&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; dataSet;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0}&lt;/span&gt;&lt;/li&gt; &lt;/ol&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;p&gt;Refactoring the GetDataReader method results in &lt;/p&gt; &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:b45a219a-dc6b-4bbc-aa60-53201b4d9854\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background: #ddd; overflow: auto\"&gt; &lt;ol style=\"background: #000000; margin: 0 0 0 2em; padding: 0 0 0 5px;\"&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;SqlDataReader&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; GetDataReader(&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;string&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; sql)&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0{&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0createConnection();&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0_connection.Open();&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&amp;nbsp;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;return&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;SqlCommand&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;(sql, _connection).ExecuteReader();&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0}&lt;/span&gt;&lt;/li&gt; &lt;/ol&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;p&gt;Now the parameters methods I am going to have to think about. It\xE2\x80\x99s rather late and that is a pretty good start.&lt;/p&gt; &lt;p&gt;Again check out the code at &lt;a href=\"http://github.com/RookieOne/RMS_Refactor\"&gt;http://github.com/RookieOne/RMS_Refactor&lt;/a&gt;&lt;/p&gt; &lt;p&gt;In the future I should branch the code, but \xE2\x80\xA6 I forgot. &lt;/p&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-3685653093931977944?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2010/10/basedalobjectrefactor.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-2015632803061859939</guid><pubDate>Sat, 30 Oct 2010 08:46:00 +0000</pubDate><atom:updated>2010-10-30T01:46:53.756-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>Refactor</category><category domain='http://www.blogger.com/atom/ns#'>C#</category><title>My Dream Refactoring</title><description>&lt;p&gt;I\xE2\x80\x99ve always wanted to go back and refactor my first program I wrote right out of school. But although I could find my hastily scrounged together notes on the application, alas I could not find the source.&lt;/p&gt; &lt;p&gt;But recently while cleaning off some external hard drives, I found it. And maybe I did a jig with delight. \xE2\x80\xA6 maybe.&lt;/p&gt; &lt;p&gt;Why do I care? Not because the application would be of use, but because I wrote it. I wrote it straight from school, with no senior or experienced developer around for guidance. I\xE2\x80\x99ve never heard of source control, testing, design patterns.. or anything. I had no .Net experience and had to figure out everything on my own.&lt;/p&gt; &lt;p&gt;I was a reimbursement analyst and I programmed on the side. This application was meant to replace self created unwieldy access databases and queries. Turn an adhoc process to an automated one. And the crazy thing was\xE2\x80\xA6 it worked. I turned my job into a button pushing operation where I could spend most of my days reading a book or surfing the internet as the application would churn through data. &lt;/p&gt; &lt;p&gt;I turned a day or two process into a 30 minute turn around. When the negotiations for rates were going on, I could give the team almost instant turn around on proposed rate changes. It was a major win.&lt;/p&gt; &lt;p&gt;Anyway, now\xE2\x80\xA6 5 years later, I have a unique chance to refactor my own code. Take a WinForms application written by a junior developer in .Net 1.0 and update everything to better coding standards and .Net 4.0.&lt;/p&gt; &lt;p&gt;I don\xE2\x80\x99t have a plan, nor do I want one. I am just going to open the application up and start fiddling. I want to go piece by piece. Slowly add tests and update the code. I want the work to be a demonstration on how to take a legacy application and not just rewrite, but refactor it to better standards and updated frameworks.&lt;/p&gt; &lt;p&gt;Word to the wise, there is some VB and C# projects (I had to install VB for my Visual Studio because normally I leave it out). Also the application won\xE2\x80\x99t run at first because I don\xE2\x80\x99t have a database and I noticed some projects failed to build. And the project structure is whack. But that will be fixed in time.&lt;/p&gt; &lt;p&gt;Check out the original code at : &lt;a href=\"http://github.com/RookieOne/RMS_Refactor\"&gt;http://github.com/RookieOne/RMS_Refactor&lt;/a&gt;&lt;/p&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-2015632803061859939?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2010/10/my-dream-refactoring.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-8230498935140625958</guid><pubDate>Sat, 30 Oct 2010 03:25:00 +0000</pubDate><atom:updated>2010-10-29T20:30:40.628-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>Bash</category><title>Learning Bash Aliases and Functions</title><description>&lt;p&gt;During our fantastical Lunch and Learn at ChaiOne, we went over customizing bash using aliases and functions. These little tools make normal command line mortals into command line gods\xE2\x80\xA6 or at least demi-gods.&lt;/p&gt; &lt;p&gt;If you are new to Macs and other Unix based systems, like I am, then what I am about to share will be new to you. It was new to me until today. And for those Unix gurus, if I describe something incorrectly please let me know.&lt;/p&gt; &lt;p&gt;First of all there is a file called .bashrc in your home directory ( ~ ). This file is loaded anytime you run a command script or open a terminal window. In this file we can add aliases, functions, and other customizations for our command line.&lt;/p&gt; &lt;p&gt;With an alias I can create a shortcut \xE2\x80\x98g\xE2\x80\x99 for \xE2\x80\x98git status\xE2\x80\x99.&lt;/p&gt; &lt;div id=\"codeSnippetWrapper\"&gt;&lt;pre id=\"codeSnippet\" class=\"csharpcode\"&gt;alias g=\xE2\x80\x99git status\xE2\x80\x99&lt;/pre&gt;&lt;/div&gt;\n\
      &lt;p&gt;Now I can just type \xE2\x80\x98g\xE2\x80\x99 to run \xE2\x80\x98git status\xE2\x80\x99.&lt;/p&gt;\n\
      &lt;p&gt;I can use a function to create a more robust shortcut. For example, I can create a shortcut for \xE2\x80\x98git push\xE2\x80\x99. In this function by default I push to \xE2\x80\x98origin master\xE2\x80\x99 but if I provide an argument it will push to \xE2\x80\x98$argument master\xE2\x80\x99.&lt;/p&gt;\n\
      &lt;div id=\"codeSnippetWrapper\"&gt;&lt;pre id=\"codeSnippet\" class=\"csharpcode\"&gt;&lt;span class=\"preproc\"&gt;function&lt;/span&gt; gpush {&lt;br&gt;    &lt;span class=\"kwrd\"&gt;if&lt;/span&gt; [[ -z $1 ]]&lt;br&gt;    then&lt;br&gt;     git push origin master    &lt;br&gt;    &lt;span class=\"kwrd\"&gt;else&lt;/span&gt;&lt;br&gt;     git push $1 master&lt;br&gt;    fi&lt;br&gt;}&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;\n\
      &lt;p&gt;gpush =&amp;gt; git push origin master&lt;/p&gt;\n\
      &lt;p&gt;gpush heroku =&amp;gt; git push heroku master&lt;/p&gt;\n\
      &lt;p&gt;Once you add the alias or function to your .bashrc, you can reload the file using &lt;/p&gt;\n\
      &lt;div id=\"codeSnippetWrapper\"&gt;&lt;pre id=\"codeSnippet\" class=\"csharpcode\"&gt;source ~/.bashrc&lt;br&gt;&lt;/pre&gt;&lt;/div&gt;\n\
      &lt;p&gt;And there is a shortcut for source ( . ) So you can use &lt;/p&gt;\n\
      &lt;div id=\"codeSnippetWrapper\"&gt;&lt;pre id=\"codeSnippet\" class=\"csharpcode\"&gt;. ~/.bashrc&lt;/pre&gt;&lt;/div&gt;\n\n\n\n\n\
      &lt;p&gt;Now you know how to create aliases and functions. I must admit, I think its pretty damn cool. This coming from the guy that a year ago was hesitant to use git on the command line.&lt;/p&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-8230498935140625958?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2010/10/learning-bash-aliases-and-functions.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-6637927314176128037</guid><pubDate>Tue, 26 Oct 2010 14:37:00 +0000</pubDate><atom:updated>2010-10-26T07:38:50.917-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>Patterns</category><category domain='http://www.blogger.com/atom/ns#'>Presentation</category><category domain='http://www.blogger.com/atom/ns#'>C#</category><category domain='http://www.blogger.com/atom/ns#'>TechFest</category><title>Houston Techfest \xE2\x80\x93 Design Patterns</title><description>&lt;p&gt;An email from Claudio reminded me that I completely forgot to link the slides and code from the Houston Techfest presentation! &lt;/p&gt; &lt;p&gt;And just a reminder that everything is offered as is. But that doesn\xE2\x80\x99t mean you can\xE2\x80\x99t email me or Claudio for more information. :)&lt;/p&gt; &lt;p&gt;You can find the slides on slideshare at :&lt;/p&gt; &lt;p&gt;&lt;a title=\"http://www.slideshare.net/RookieOne/techfest-design-patterns\" href=\"http://www.slideshare.net/RookieOne/techfest-design-patterns\"&gt;http://www.slideshare.net/RookieOne/techfest-design-patterns&lt;/a&gt;&lt;/p&gt; &lt;p&gt;And the code you can find (as is) at bitbucket : &lt;/p&gt; &lt;p&gt;&lt;a title=\"http://bitbucket.org/rookieone/design-patterns\" href=\"http://bitbucket.org/rookieone/design-patterns\"&gt;http://bitbucket.org/rookieone/design-patterns&lt;/a&gt;&lt;/p&gt; &lt;p&gt;And you can find the code on GitHub at :&lt;/p&gt; &lt;p&gt;&lt;a title=\"http://github.com/RookieOne/Houston-Techfest-Design-Patterns\" href=\"http://github.com/RookieOne/Houston-Techfest-Design-Patterns\"&gt;http://github.com/RookieOne/Houston-Techfest-Design-Patterns&lt;/a&gt;&lt;/p&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-6637927314176128037?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2010/10/houston-techfest-design-patterns.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-2076705165328204827</guid><pubDate>Sun, 12 Sep 2010 02:34:00 +0000</pubDate><atom:updated>2010-09-11T20:12:41.036-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>C#</category><title>Lighten Color in C#</title><description>&lt;p&gt;The following piece of code was originally written by Marcus Egger in a converter. I did a bit of refactoring to clean up the code and moved the code outside a converter and into an extension method.&lt;/p&gt; &lt;p&gt;The extension method is off of Color and returns another Color. Now since it is an extension method you can use it in a converter or a markup extension (the latter being my favorite use).&lt;/p&gt; &lt;p&gt;You can also get this code from my color project on GitHub :&lt;/p&gt; &lt;p&gt;&lt;a href=\"http://github.com/RookieOne/Colors\"&gt;http://github.com/RookieOne/Colors&lt;/a&gt;&lt;/p&gt; &lt;p&gt; &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:ce2ced3b-47d1-4562-9f67-c2583648da6f\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div class=\"le-pavsc-container\"&gt; &lt;div style=\"background-color: #000000; overflow: auto; padding: 2px 5px; white-space: nowrap\"&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;static&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;class&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;LightenColorExtension&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0{&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"color:#808080\"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"color:#008000\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0This method applies lighting to a color.&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"color:#008000\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0For instance, a color that has a lighting factor of 1 applies, appears at its original value.&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"color:#008000\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0A color with a lighting factor of 0.5 appears only half as bright as it was before.&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"color:#008000\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0A color with a lighting factor of 1.5 appears roughly twice as bright as before.&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"color:#008000\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0A color with a lightning factor of 2 appears white.&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"color:#808080\"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"color:#808080\"&gt;&amp;lt;param name=&amp;quot;originalColor&amp;quot;&amp;gt;&lt;/span&gt;&lt;span style=\"color:#008000\"&gt;Base color&lt;/span&gt;&lt;span style=\"color:#808080\"&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"color:#808080\"&gt;&amp;lt;param name=&amp;quot;lightFactor&amp;quot;&amp;gt;&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"color:#008000\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0Amount of light applied to the color&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"color:#808080\"&gt;&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"color:#808080\"&gt;&amp;lt;returns&amp;gt;&lt;/span&gt;&lt;span style=\"color:#008000\"&gt;Lit color&lt;/span&gt;&lt;span style=\"color:#808080\"&gt;&amp;lt;/returns&amp;gt;&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"color:#808080\"&gt;&amp;lt;remarks&amp;gt;&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"color:#008000\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0This routine is very fast. Even when using it in tight loops, I (Markus) have not been able to &lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"color:#008000\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0meassure a significant amount of time spent in this routine (always less than 1ms). I was originally&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"color:#008000\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0concerened about the performance of this, so I added a caching mechanism, but that slowed things down&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"color:#008000\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0by 2 orders of magnitude.&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"color:#808080\"&gt;&amp;lt;/remarks&amp;gt;&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;static&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;Color&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; Lighten(&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;this&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;Color&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; originalColor, &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;float&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; lightFactor)&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0{&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;if&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; (TransformationNotNeeded(lightFactor))&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;return&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; originalColor;&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;if&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; (RealBright(lightFactor))&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;return&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; System.Windows.Media.&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;Colors&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;.White;&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;if&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; (ShouldDarken(lightFactor))&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;return&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; DarkenColor(originalColor, lightFactor);&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;return&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; LightenColor(originalColor, lightFactor);&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0}&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;private&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;static&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;bool&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; TransformationNotNeeded(&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;float&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; lightFactor)&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0{&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; value = lightFactor - &lt;/span&gt;&lt;span style=\"color:#bda265\"&gt;1.0f&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;;&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;return&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; value &amp;lt; &lt;/span&gt;&lt;span style=\"color:#bda265\"&gt;0.01f&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&amp;amp;&amp;amp; value &amp;gt; -&lt;/span&gt;&lt;span style=\"color:#bda265\"&gt;0.01f&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;;&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0}&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;private&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;static&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;bool&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; RealBright(&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;float&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; lightFactor)&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0{&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;return&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; lightFactor &amp;gt;= &lt;/span&gt;&lt;span style=\"color:#bda265\"&gt;2.0f&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;;&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0}&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;private&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;static&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;bool&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; ShouldDarken(&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;float&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; lightFactor)&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0{&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;return&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; lightFactor &amp;lt; &lt;/span&gt;&lt;span style=\"color:#bda265\"&gt;1.0f&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;;&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0}&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;private&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;static&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;Color&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; DarkenColor(&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;Color&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; color, &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;float&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; lightFactor)&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0{&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; red = (&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;byte&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;) (color.R*lightFactor);&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; green = (&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;byte&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;) (color.G*lightFactor);&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; blue = (&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;byte&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;) (color.B*lightFactor);&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;return&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;Color&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;.FromRgb(red, green, blue);&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0}&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;private&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;static&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;Color&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; LightenColor(&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;Color&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; color, &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;float&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; lightFactor)&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0{&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#008000\"&gt;// Lighten&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#008000\"&gt;// We do this by approaching 256 for a light factor of 2.0f&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;float&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; fFactor2 = lightFactor;&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;if&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; (fFactor2 &amp;gt; &lt;/span&gt;&lt;span style=\"color:#bda265\"&gt;1.0f&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;)&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0{&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0fFactor2 -= &lt;/span&gt;&lt;span style=\"color:#bda265\"&gt;1.0f&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;;&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0}&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; red = LightenColorComponent(color.R, fFactor2);&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; green = LightenColorComponent(color.G, fFactor2);&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; blue = LightenColorComponent(color.B, fFactor2);&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;return&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;Color&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;.FromRgb(red, green, blue);&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0}&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;private&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;static&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;byte&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; LightenColorComponent(&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;byte&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; colorComponent, &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;float&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; fFactor)&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0{&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; inverse = &lt;/span&gt;&lt;span style=\"color:#bda265\"&gt;255&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; - colorComponent;&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0colorComponent += (&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;byte&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;) (inverse*fFactor);&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;return&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; colorComponent &amp;lt; &lt;/span&gt;&lt;span style=\"color:#bda265\"&gt;255&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0? colorComponent&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0: (&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;byte&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;) &lt;/span&gt;&lt;span style=\"color:#bda265\"&gt;255&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;;&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0}&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;&lt;/p&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-2076705165328204827?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2010/09/lighten-color-in-c.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-3217444109754424756</guid><pubDate>Thu, 29 Jul 2010 16:42:00 +0000</pubDate><atom:updated>2010-07-29T09:42:58.822-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>Podcast</category><category domain='http://www.blogger.com/atom/ns#'>Wizards of Smart</category><title>Wizards of Smart #11 \xE2\x80\x93 Glenn Block part 2</title><description>&lt;p&gt;A lot of people have asked about the second part of the Glenn Block interview, so here it is. Ok so it is a month late. A lot of stuff was happening in July (I will explain on another post. Lots of good stuff but it just put the podcast on hold for a bit)&lt;/p&gt;  &lt;p&gt;In this podcast Glenn and Ryan dive more into REST. It is a great conversation. I felt like a fly on the wall, but it was a very lucky fly that learned a lot about REST. So enjoy.&lt;/p&gt;  &lt;div&gt;&lt;object classid=\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\" codebase=\"http://fpdownload.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,0,0\" width=\"210\" height=\"25\" id=\"mp3playerlightsmallv3\" align=\"middle\"&gt; \t&lt;param name=\"allowScriptAccess\" value=\"sameDomain\" /&gt; \t&lt;param name=\"movie\" value=\"http://www.podbean.com/podcast-audio-video-blog-player/mp3playerlightsmallv3.swf?audioPath=http://rookieone.podbean.com/mf/play/8gv97q/wos_gblock2.mp3&amp;amp;autoStart=no\" /&gt; \t&lt;param name=\"quality\" value=\"high\" /&gt;&lt;param name=\"bgcolor\" value=\"#ffffff\" /&gt;&lt;param name=\"wmode\" value=\"transparent\" /&gt; \t&lt;embed src=\"http://www.podbean.com/podcast-audio-video-blog-player/mp3playerlightsmallv3.swf?audioPath=http://rookieone.podbean.com/mf/play/8gv97q/wos_gblock2.mp3&amp;amp;autoStart=no\" quality=\"high\" width=\"210\" height=\"25\" name=\"mp3playerlightsmallv3\" align=\"middle\" allowScriptAccess=\"sameDomain\" wmode=\"transparent\" type=\"application/x-shockwave-flash\" pluginspage=\"http://www.macromedia.com/go/getflashplayer\" /&gt;&lt;/embed&gt; \t&lt;/object&gt;    &lt;br /&gt;&lt;a style=\"border-bottom-style: none; padding-left: 41px; font-family: arial, helvetica, sans-serif; color: #2da274; font-size: 11px; font-weight: normal; text-decoration: none\" href=\"http://www.podbean.com\"&gt;Powered by Podbean.com&lt;/a&gt; &lt;/div&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-3217444109754424756?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2010/07/wizards-of-smart-11-glenn-block-part-2.html</link><author>noreply@blogger.com (JB)</author><thr:total>1</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-5691225573372939084</guid><pubDate>Fri, 25 Jun 2010 05:07:00 +0000</pubDate><atom:updated>2010-06-24T22:07:49.770-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>Podcast</category><category domain='http://www.blogger.com/atom/ns#'>Wizards of Smart</category><title>Wizards of Smart #10 \xE2\x80\x93 Glenn Block part 1</title><description>&lt;p&gt;Ryan and I had a awesome opportunity of having Glenn Block join us on a Skype call a couple of weeks ago. We wanted to have him on and talk about what he is currently doing and try to avoid the whole MEF topic (we did dive a bit into it, but not too deep).&lt;/p&gt;  &lt;p&gt;So part 1, Glenn introduces himself and gives a history of his current move from MEF to WCF and his vision on what he hopes to do by joining the team. &lt;/p&gt;  &lt;p&gt;Glenn blogs at codebetter.com : &lt;a href=\"http://codebetter.com/blogs/glenn.block/\"&gt;http://codebetter.com/blogs/glenn.block/&lt;/a&gt;&lt;/p&gt;  &lt;div&gt;&lt;object classid=\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\" codebase=\"http://fpdownload.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,0,0\" width=\"210\" height=\"25\" id=\"mp3playerlightsmallv3\" align=\"middle\"&gt; \t&lt;param name=\"allowScriptAccess\" value=\"sameDomain\" /&gt; \t&lt;param name=\"movie\" value=\"http://www.podbean.com/podcast-audio-video-blog-player/mp3playerlightsmallv3.swf?audioPath=http://rookieone.podbean.com/mf/play/8t94pz/wos_gblock1.mp3&amp;amp;autoStart=no\" /&gt; \t&lt;param name=\"quality\" value=\"high\" /&gt;&lt;param name=\"bgcolor\" value=\"#ffffff\" /&gt;&lt;param name=\"wmode\" value=\"transparent\" /&gt; \t&lt;embed src=\"http://www.podbean.com/podcast-audio-video-blog-player/mp3playerlightsmallv3.swf?audioPath=http://rookieone.podbean.com/mf/play/8t94pz/wos_gblock1.mp3&amp;amp;autoStart=no\" quality=\"high\" width=\"210\" height=\"25\" name=\"mp3playerlightsmallv3\" align=\"middle\" allowScriptAccess=\"sameDomain\" wmode=\"transparent\" type=\"application/x-shockwave-flash\" pluginspage=\"http://www.macromedia.com/go/getflashplayer\" /&gt;&lt;/embed&gt; \t&lt;/object&gt;    &lt;br /&gt;&lt;a style=\"border-bottom-style: none; padding-left: 41px; font-family: arial, helvetica, sans-serif; color: #2da274; font-size: 11px; font-weight: normal; text-decoration: none\" href=\"http://www.podbean.com\"&gt;Powered by Podbean.com&lt;/a&gt; &lt;/div&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-5691225573372939084?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2010/06/wizards-of-smart-10-glenn-block-part-1.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-4728266498001236257</guid><pubDate>Tue, 22 Jun 2010 22:08:00 +0000</pubDate><atom:updated>2010-06-22T15:08:35.261-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>Podcast</category><category domain='http://www.blogger.com/atom/ns#'>Wizards of Smart</category><title>Wizards of Smart #9 \xE2\x80\x93 25 Zeros + IDEs + SOLID</title><description>&lt;div&gt;&amp;#160;&lt;/div&gt;  &lt;p&gt;This conversation centers around Robert Martin\xE2\x80\x99s Rails presentation titled \xE2\x80\x9C25 Zeros\xE2\x80\x9D. &lt;/p&gt;  &lt;p&gt;&lt;a href=\"http://en.oreilly.com/rails2010/public/schedule/detail/14134\"&gt;http://en.oreilly.com/rails2010/public/schedule/detail/14134&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Part of the conversation dived into IDEs and Ryan sent me a link to Code Bubbles. &lt;/p&gt;  &lt;p&gt;&lt;a href=\"http://www.cs.brown.edu/people/acb/codebubbles_site.htm\"&gt;http://www.cs.brown.edu/people/acb/codebubbles_site.htm&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Ryan later references the SOLID article in CODE Magazine by Derick Bailey. &lt;/p&gt;  &lt;p&gt;&lt;a href=\"http://www.code-magazine.com/Article.aspx?quickid=1001061\"&gt;http://www.code-magazine.com/Article.aspx?quickid=1001061&lt;/a&gt;&lt;/p&gt;  &lt;div&gt;&amp;#160;&lt;/div&gt;  &lt;div&gt;&lt;object classid=\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\" codebase=\"http://fpdownload.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,0,0\" width=\"210\" height=\"25\" id=\"mp3playerlightsmallv3\" align=\"middle\"&gt; \t&lt;param name=\"allowScriptAccess\" value=\"sameDomain\" /&gt; \t&lt;param name=\"movie\" value=\"http://www.podbean.com/podcast-audio-video-blog-player/mp3playerlightsmallv3.swf?audioPath=http://rookieone.podbean.com/mf/play/4y4tni/wos_25zeros_IDEs_SOLID.mp3&amp;amp;autoStart=no\" /&gt; \t&lt;param name=\"quality\" value=\"high\" /&gt;&lt;param name=\"bgcolor\" value=\"#ffffff\" /&gt;&lt;param name=\"wmode\" value=\"transparent\" /&gt; \t&lt;embed src=\"http://www.podbean.com/podcast-audio-video-blog-player/mp3playerlightsmallv3.swf?audioPath=http://rookieone.podbean.com/mf/play/4y4tni/wos_25zeros_IDEs_SOLID.mp3&amp;amp;autoStart=no\" quality=\"high\" width=\"210\" height=\"25\" name=\"mp3playerlightsmallv3\" align=\"middle\" allowScriptAccess=\"sameDomain\" wmode=\"transparent\" type=\"application/x-shockwave-flash\" pluginspage=\"http://www.macromedia.com/go/getflashplayer\" /&gt;&lt;/embed&gt; \t&lt;/object&gt;    &lt;br /&gt;&lt;a style=\"border-bottom-style: none; padding-left: 41px; font-family: arial, helvetica, sans-serif; color: #2da274; font-size: 11px; font-weight: normal; text-decoration: none\" href=\"http://www.podbean.com\"&gt;Powered by Podbean.com&lt;/a&gt; &lt;/div&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-4728266498001236257?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2010/06/wizards-of-smart-9-25-zeros-ides-solid.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-7850908166010444687</guid><pubDate>Thu, 17 Jun 2010 18:30:00 +0000</pubDate><atom:updated>2010-06-17T11:30:49.961-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>Virtual Brown Bag</category><title>Virtual Brown Bag 6/17/2010</title><description>&lt;p&gt;Ed is doing a fantastic job capturing the links and the topics from the Virtual Brown Bags but I think I will still throw some links up on my site.&lt;/p&gt;  &lt;h3&gt;C# and Lambdas + Events&lt;/h3&gt;  &lt;p&gt;Shared some code on using Lambdas to listen to events. Alan Stevens recommended the reading of C# in Depth : &lt;a href=\"http://www.manning.com/skeet/\"&gt;http://www.manning.com/skeet/&lt;/a&gt;&lt;/p&gt;  &lt;h3&gt;RailsConf + Skills Matter Videos&lt;/h3&gt;  &lt;p&gt;Uncle Bob : 25-Zeroes : &lt;a href=\"http://www.youtube.com/watch#!v=mslMLp5bQD0&amp;amp;feature=related\"&gt;http://www.youtube.com/watch#!v=mslMLp5bQD0&amp;amp;feature=related&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Martin Feathers : Good Code : &lt;a href=\"http://www.youtube.com/watch?v=L9ccnRixyMg&amp;amp;feature=PlayList&amp;amp;p=393ECE649BB3813D&amp;amp;playnext_from=PL&amp;amp;index=6\"&gt;http://www.youtube.com/watch?v=L9ccnRixyMg&amp;amp;feature=PlayList&amp;amp;p=393ECE649BB3813D&amp;amp;playnext_from=PL&amp;amp;index=6&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Udi Dahan : CQRS : &lt;a href=\"http://skillsmatter.com/podcast/open-source-dot-net/udi-dahan-command-query-responsibility-segregation\"&gt;http://skillsmatter.com/podcast/open-source-dot-net/udi-dahan-command-query-responsibility-segregation&lt;/a&gt;&lt;/p&gt;  &lt;h3&gt;IDEs&lt;/h3&gt;  &lt;p&gt;Code Bubble : &lt;a href=\"http://www.cs.brown.edu/people/acb/codebubbles_site.htm\"&gt;http://www.cs.brown.edu/people/acb/codebubbles_site.htm&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Code Canvas : &lt;a href=\"http://research.microsoft.com/apps/pubs/default.aspx?id=80076\"&gt;http://research.microsoft.com/apps/pubs/default.aspx?id=80076&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;a href=\"http://www.youtube.com/watch?v=d4NEaXajiI0\"&gt;http://www.youtube.com/watch?v=d4NEaXajiI0&lt;/a&gt;&lt;/p&gt;  &lt;h3&gt;Software Metaphor&lt;/h3&gt;  &lt;p&gt;Drive: The Surprising Truth About What Motivates Us : &lt;a href=\"http://www.amazon.com/Drive-Surprising-Truth-About-Motivates/dp/1594488843/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1276794836&amp;amp;sr=8-1\"&gt;http://www.amazon.com/Drive-Surprising-Truth-About-Motivates/dp/1594488843/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1276794836&amp;amp;sr=8-1&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Film Making: A Better Software Development Metaphor &lt;a href=\"http://www.lostechies.com/blogs/rodpaddock/archive/2010/04/15/film-making-a-better-software-development-metaphor.aspx\"&gt;http://www.lostechies.com/blogs/rodpaddock/archive/2010/04/15/film-making-a-better-software-development-metaphor.aspx&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Ayende : Garden : &lt;a href=\"http://ayende.com/Blog/archive/2007/09/18/The-Right-Metaphor-Software-as-a-garden-not-a-building.aspx\"&gt;http://ayende.com/Blog/archive/2007/09/18/The-Right-Metaphor-Software-as-a-garden-not-a-building.aspx&lt;/a&gt;&lt;/p&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-7850908166010444687?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2010/06/virtual-brown-bag-6172010.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-6499362927590582466</guid><pubDate>Thu, 17 Jun 2010 16:13:00 +0000</pubDate><atom:updated>2010-06-17T09:13:07.385-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>Visual Studio</category><title>Visual Studio Theme - Bearkat</title><description>&lt;p&gt;Sharing my Visual Studio theme has been on my list of things to do for awhile now. When the site &lt;a href=\"http://studiostyles.info/\"&gt;http://studiostyles.info/&lt;/a&gt; came up, I immediately thought here is an easy way to share my color scheme.&lt;/p&gt;  &lt;p&gt;I finally created my theme on the site: &lt;a href=\"http://studiostyles.info/schemes/bearkat\"&gt;http://studiostyles.info/schemes/bearkat&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Be sure to check it out!&lt;/p&gt;  &lt;p&gt;For those who might like the colors but not the way I used them (and for me to remember what the colors are):&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Black : R22 G22 B22 &lt;/li&gt;    &lt;li&gt;Blue : R43 G145 B175 &lt;/li&gt;    &lt;li&gt;Green : R102 G143 B95 &lt;/li&gt;    &lt;li&gt;Orange : R255 G116 B0 &lt;/li&gt;    &lt;li&gt;Red : R163 G21 B21 &lt;/li&gt;    &lt;li&gt;Gray : R128 G128 B128 &lt;/li&gt;    &lt;li&gt;Light Green : R206 G255 B132 &lt;/li&gt;    &lt;li&gt;Tan : R189 G162 B101 &lt;/li&gt; &lt;/ul&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-6499362927590582466?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2010/06/visual-studio-theme-bearkat.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-3655380542252496923</guid><pubDate>Thu, 17 Jun 2010 15:31:00 +0000</pubDate><atom:updated>2010-06-17T08:55:31.824-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>Podcast</category><category domain='http://www.blogger.com/atom/ns#'>Wizards of Smart</category><title>Wizards of Smart \xE2\x80\x93 Heroku, Cloud, and Iron Ruby</title><description>Sorry for the long delay guys. Ryan and I are both in the middle of deploying applications so other things are on our minds. &lt;br /&gt;\n\
      While we wait for me to edit the recording we did last night and we await Glenn Block\xE2\x80\x99s approval on the fantastic 2 shows we did with him, we can enjoy a smaller conversation Ryan and I had on Heroku, Azure, and a bit about Iron Ruby. &lt;br /&gt;\n\
      &lt;div&gt;\n\
      &lt;object align=\"middle\" classid=\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\" codebase=\"http://fpdownload.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,0,0\" height=\"25\" id=\"mp3playerlightsmallv3\" width=\"210\"&gt;  &lt;param name=\"allowScriptAccess\" value=\"sameDomain\" /&gt;\n  &lt;param name=\"movie\" value=\"http://www.podbean.com/podcast-audio-video-blog-player/mp3playerlightsmallv3.swf?audioPath=http://rookieone.podbean.com/mf/play/fd9dp8/wos_heroku_cloud.mp3&amp;amp;autoStart=no\" /&gt;\n  &lt;param name=\"quality\" value=\"high\" /&gt;\n\
      &lt;param name=\"bgcolor\" value=\"#ffffff\" /&gt;\n\
      &lt;param name=\"wmode\" value=\"transparent\" /&gt;\n  &lt;embed src=\"http://www.podbean.com/podcast-audio-video-blog-player/mp3playerlightsmallv3.swf?audioPath=http://rookieone.podbean.com/mf/play/fd9dp8/wos_heroku_cloud.mp3&amp;amp;autoStart=no\" quality=\"high\" width=\"210\" height=\"25\" name=\"mp3playerlightsmallv3\" align=\"middle\" allowScriptAccess=\"sameDomain\" wmode=\"transparent\" type=\"application/x-shockwave-flash\" pluginspage=\"http://www.macromedia.com/go/getflashplayer\" /&gt;&lt;/embed&gt;  &lt;/object&gt;    &lt;br /&gt;\n\
      &lt;a href=\"http://www.podbean.com/\" style=\"border-bottom: medium none; color: #2da274; font-family: arial, helvetica, sans-serif; font-size: 11px; font-weight: normal; padding-left: 41px; text-decoration: none;\"&gt;Powered by Podbean.com&lt;/a&gt; &lt;/div&gt;&lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-3655380542252496923?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2010/06/wizards-of-smart-heroku-cloud-and-iron.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-13466796004749077</guid><pubDate>Tue, 08 Jun 2010 16:06:00 +0000</pubDate><atom:updated>2010-06-08T09:07:08.731-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>Podcast</category><category domain='http://www.blogger.com/atom/ns#'>Wizards of Smart</category><title>Wizards of Smart \xE2\x80\x93 Episode 7 Performance</title><description>&lt;p&gt;Ryan starts with describing his love affair with F#, which leads to a discussion of FubuMVC, which leads to a discussion of Performance Problems (not related to Fubu MVC)\xE2\x80\xA6 etc. So a standard Wizards of Smart conversation.&amp;#160; :)&lt;/p&gt;  &lt;p&gt;I titled this Performance since most of the conversation centered around our experiences with targeting and improving performance.&lt;/p&gt;  &lt;div&gt;&lt;object classid=\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\" codebase=\"http://fpdownload.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,0,0\" width=\"210\" height=\"25\" id=\"mp3playerlightsmallv3\" align=\"middle\"&gt; \t&lt;param name=\"allowScriptAccess\" value=\"sameDomain\" /&gt; \t&lt;param name=\"movie\" value=\"http://www.podbean.com/podcast-audio-video-blog-player/mp3playerlightsmallv3.swf?audioPath=http://rookieone.podbean.com/mf/play/9zetjf/episode7.mp3&amp;amp;autoStart=no\" /&gt; \t&lt;param name=\"quality\" value=\"high\" /&gt;&lt;param name=\"bgcolor\" value=\"#ffffff\" /&gt;&lt;param name=\"wmode\" value=\"transparent\" /&gt; \t&lt;embed src=\"http://www.podbean.com/podcast-audio-video-blog-player/mp3playerlightsmallv3.swf?audioPath=http://rookieone.podbean.com/mf/play/9zetjf/episode7.mp3&amp;amp;autoStart=no\" quality=\"high\" width=\"210\" height=\"25\" name=\"mp3playerlightsmallv3\" align=\"middle\" allowScriptAccess=\"sameDomain\" wmode=\"transparent\" type=\"application/x-shockwave-flash\" pluginspage=\"http://www.macromedia.com/go/getflashplayer\" /&gt;&lt;/embed&gt; \t&lt;/object&gt;    &lt;br /&gt;&lt;a style=\"border-bottom-style: none; padding-left: 41px; font-family: arial, helvetica, sans-serif; color: #2da274; font-size: 11px; font-weight: normal; text-decoration: none\" href=\"http://www.podbean.com\"&gt;Powered by Podbean.com&lt;/a&gt; &lt;/div&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-13466796004749077?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2010/06/wizards-of-smart-episode-7-performance.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-5384778359200166697</guid><pubDate>Fri, 04 Jun 2010 20:34:00 +0000</pubDate><atom:updated>2010-06-07T07:14:16.797-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>Clean Code</category><title>Reducing Exceptional Cases</title><description>&lt;p&gt;We have a third party control suite that provided some aggregation functionality. The third party controls had some built in aggregate functions but was missing some other more business centric functions.&lt;/p&gt;  &lt;p&gt;We ended up coding every aggregate as a separate custom class and not using any of the built in aggregates. My team member asked me why not use the built in aggregates?&lt;/p&gt;  &lt;p&gt;The reasoning is that if we used some built-in aggregates and then built the custom aggregates for the other functions, we would have 2 methods of aggregation to maintain. If we treat all the aggregates as custom, then instead of having 2 scenarios, we have one. We don\xE2\x80\x99t have any exceptions. All aggregates are custom aggregates.&lt;/p&gt;  &lt;p&gt;Not only do we simplify our code and future maintenance, we eliminate any dependency on the third party aggregates. Now we are free to change control vendors and not worry about losing our aggregation functionality.&lt;/p&gt;  &lt;p&gt;The point I want to make is look to simplify your code. Eliminate exceptional cases as much as possible. Make everything the same and you achieve simplicity and flexibility.&lt;/p&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-5384778359200166697?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2010/06/reducing-exceptional-cases.html</link><author>noreply@blogger.com (JB)</author><thr:total>1</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-5970049673560002104</guid><pubDate>Fri, 04 Jun 2010 19:21:00 +0000</pubDate><atom:updated>2010-06-04T12:21:57.612-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>Learning</category><category domain='http://www.blogger.com/atom/ns#'>C#</category><category domain='http://www.blogger.com/atom/ns#'>LINQ</category><title>Linq - Sum</title><description>&lt;p&gt;Last week I started an ongoing section during the Virtual Brown Bag where I go over a Linq function (or two). The general idea is that although most people \xE2\x80\x98use\xE2\x80\x99 Linq, there are lots of functions that are overlooked.&lt;/p&gt;  &lt;p&gt;In this blog post I will demonstrate basic usage cases for the Linq Sum function.&lt;/p&gt;  &lt;h3&gt;Numbers&lt;/h3&gt;  &lt;p&gt;If you have a collection of numbers and you want the sum of their values, then&amp;#160; simply call Sum. It can\xE2\x80\x99t get any easier.&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:272901ca-8772-4d65-8f69-c791799fc380\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;[&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Test&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;]&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; should_sum_values()&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; nums = &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;List&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;int&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#bda265\"&gt;5&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;,&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#bda265\"&gt;9&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;,&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#bda265\"&gt;1&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;,&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#bda265\"&gt;10&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;};&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;int&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; sum = nums.Sum();&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;sum.ShouldBe(&lt;/span&gt;&lt;span style=\"background:#161616;color:#bda265\"&gt;25&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;);&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;h3&gt;Non-Numbers&lt;/h3&gt;  &lt;p&gt;If you want to sum a collection that isn\xE2\x80\x99t made up of numbers, then you will be forced to specify which number property you would like to sum.&lt;/p&gt;  &lt;p&gt;   &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:37a00393-8d97-40fd-b4b4-8943d6a11b05\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;[&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Test&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;]&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; summing_non_number_collection()&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; jedi = &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;List&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Jedi&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Jedi&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;(&lt;/span&gt;&lt;span style=\"background:#161616;color:#668f5f\"&gt;&amp;quot;Yoda&amp;quot;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;).MidichlorianCountIs(&lt;/span&gt;&lt;span style=\"background:#161616;color:#bda265\"&gt;1000&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;),&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Jedi&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;(&lt;/span&gt;&lt;span style=\"background:#161616;color:#668f5f\"&gt;&amp;quot;Anakin Skywalker&amp;quot;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;).MidichlorianCountIs(&lt;/span&gt;&lt;span style=\"background:#161616;color:#bda265\"&gt;3000&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;),&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Jedi&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;(&lt;/span&gt;&lt;span style=\"background:#161616;color:#668f5f\"&gt;&amp;quot;Luke Skywalker&amp;quot;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;).MidichlorianCountIs(&lt;/span&gt;&lt;span style=\"background:#161616;color:#bda265\"&gt;1500&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;),&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Jedi&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;(&lt;/span&gt;&lt;span style=\"background:#161616;color:#668f5f\"&gt;&amp;quot;Obi-wan Kenobi&amp;quot;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;).MidichlorianCountIs(&lt;/span&gt;&lt;span style=\"background:#161616;color:#bda265\"&gt;500&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;),&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;};&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt;// can&amp;#39;t compile&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt;//var sum = jedi.Sum();&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;   &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:29c522ec-e67b-4959-beac-ec6fe2e4eb4b\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;[&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Test&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;]&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; should_be_able_to_specify_property_to_sum()&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; jedi = &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;List&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Jedi&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Jedi&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;(&lt;/span&gt;&lt;span style=\"background:#161616;color:#668f5f\"&gt;&amp;quot;Yoda&amp;quot;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;).MidichlorianCountIs(&lt;/span&gt;&lt;span style=\"background:#161616;color:#bda265\"&gt;1000&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;),&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Jedi&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;(&lt;/span&gt;&lt;span style=\"background:#161616;color:#668f5f\"&gt;&amp;quot;Anakin Skywalker&amp;quot;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;).MidichlorianCountIs(&lt;/span&gt;&lt;span style=\"background:#161616;color:#bda265\"&gt;3000&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;),&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Jedi&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;(&lt;/span&gt;&lt;span style=\"background:#161616;color:#668f5f\"&gt;&amp;quot;Luke Skywalker&amp;quot;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;).MidichlorianCountIs(&lt;/span&gt;&lt;span style=\"background:#161616;color:#bda265\"&gt;1500&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;),&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Jedi&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;(&lt;/span&gt;&lt;span style=\"background:#161616;color:#668f5f\"&gt;&amp;quot;Obi-wan Kenobi&amp;quot;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;).MidichlorianCountIs(&lt;/span&gt;&lt;span style=\"background:#161616;color:#bda265\"&gt;500&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;),&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;};&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;int&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; sum = jedi.Sum(j =&amp;gt; j.MidichlorianCount);&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;sum.ShouldBe(&lt;/span&gt;&lt;span style=\"background:#161616;color:#bda265\"&gt;6000&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;);&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/p&gt;  &lt;p&gt;These tests can be found in my Learning Solution on GitHub and found in the Learning CSharp project : &lt;a href=\"http://github.com/RookieOne/Learning\"&gt;http://github.com/RookieOne/Learning&lt;/a&gt;&lt;/p&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-5970049673560002104?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2010/06/linq-sum.html</link><author>noreply@blogger.com (JB)</author><thr:total>1</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-5954381197142190914</guid><pubDate>Thu, 03 Jun 2010 21:42:00 +0000</pubDate><atom:updated>2010-06-03T14:42:34.082-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>Podcast</category><category domain='http://www.blogger.com/atom/ns#'>Wizards of Smart</category><title>Wizards of Smart \xE2\x80\x93 Episode 6</title><description>&lt;p&gt;The general theme for this podcast is handling Complexity through Composition. But we end up talking about Entity Framework, Fubu MVC, ISP, Rails, and reach new levels of nerdness with sentence composition.&lt;/p&gt;  &lt;div&gt;&lt;object classid=\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\" codebase=\"http://fpdownload.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,0,0\" width=\"210\" height=\"25\" id=\"mp3playerlightsmallv3\" align=\"middle\"&gt; \t&lt;param name=\"allowScriptAccess\" value=\"sameDomain\" /&gt; \t&lt;param name=\"movie\" value=\"http://www.podbean.com/podcast-audio-video-blog-player/mp3playerlightsmallv3.swf?audioPath=http://rookieone.podbean.com/mf/play/qrebtq/episode6.mp3&amp;amp;autoStart=no\" /&gt; \t&lt;param name=\"quality\" value=\"high\" /&gt;&lt;param name=\"bgcolor\" value=\"#ffffff\" /&gt;&lt;param name=\"wmode\" value=\"transparent\" /&gt; \t&lt;embed src=\"http://www.podbean.com/podcast-audio-video-blog-player/mp3playerlightsmallv3.swf?audioPath=http://rookieone.podbean.com/mf/play/qrebtq/episode6.mp3&amp;amp;autoStart=no\" quality=\"high\" width=\"210\" height=\"25\" name=\"mp3playerlightsmallv3\" align=\"middle\" allowScriptAccess=\"sameDomain\" wmode=\"transparent\" type=\"application/x-shockwave-flash\" pluginspage=\"http://www.macromedia.com/go/getflashplayer\" /&gt;&lt;/embed&gt; \t&lt;/object&gt;    &lt;br /&gt;&lt;a style=\"border-bottom-style: none; padding-left: 41px; font-family: arial, helvetica, sans-serif; color: #2da274; font-size: 11px; font-weight: normal; text-decoration: none\" href=\"http://www.podbean.com\"&gt;Powered by Podbean.com&lt;/a&gt; &lt;/div&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-5954381197142190914?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2010/06/wizards-of-smart-episode-6.html</link><author>noreply@blogger.com (JB)</author><thr:total>1</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-3767615369495083257</guid><pubDate>Thu, 03 Jun 2010 21:30:00 +0000</pubDate><atom:updated>2010-06-03T14:30:01.524-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>Virtual Brown Bag</category><title>Virtual Brown Bag \xE2\x80\x93 6/3/2010</title><description>&lt;p&gt;A rather link filled, topic filled VBB. Not many direct coding examples but lots of great information.&lt;/p&gt;  &lt;h3&gt;LINQ Examples&lt;/h3&gt;  &lt;p&gt;I did share how to use Sum, Select Many, and Aggregate. The code was put into my learning csharp project in my learning solution on GitHub.&lt;/p&gt;  &lt;p&gt;I plan on writing a couple of blog posts on these LINQ items so stay tuned if you want more LINQ goodness.&lt;/p&gt;  &lt;p&gt;&lt;a href=\"http://github.com/RookieOne/Learning\"&gt;http://github.com/RookieOne/Learning&lt;/a&gt;&lt;/p&gt;  &lt;h3&gt;Wizards of Smart Podcast \xE2\x80\x93 Episode 5&lt;/h3&gt;  &lt;p&gt;More rails talk on this episode. But I did share the link with the VBB. &lt;a href=\"http://www.theabsentmindedcoder.com/2010/06/wizards-of-smart-episode-5_01.html\"&gt;http://www.theabsentmindedcoder.com/2010/06/wizards-of-smart-episode-5_01.html&lt;/a&gt;&lt;/p&gt;  &lt;h3&gt;Absent Minded Coder Posts&lt;/h3&gt;  &lt;p&gt;I shared my 2 posts from the last brown bag\xE2\x80\xA6&lt;/p&gt;  &lt;h4&gt;Structure Map 2.6 constructing the concrete type&lt;/h4&gt;  &lt;p&gt;&lt;a href=\"http://www.theabsentmindedcoder.com/2010/05/structure-map-26-constructing-concrete.html\"&gt;http://www.theabsentmindedcoder.com/2010/05/structure-map-26-constructing-concrete.html&lt;/a&gt;&lt;/p&gt;  &lt;h4&gt;Interface Segregation Principle&lt;/h4&gt;  &lt;p&gt;&lt;a href=\"http://www.theabsentmindedcoder.com/2010/05/interface-segregation-principle-in.html\"&gt;http://www.theabsentmindedcoder.com/2010/05/interface-segregation-principle-in.html&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;I also shared George\xE2\x80\x99s comment on the Udi InfoQ article : &lt;a href=\"http://www.infoq.com/presentations/Making-Roles-Explicit-Udi-Dahan\"&gt;http://www.infoq.com/presentations/Making-Roles-Explicit-Udi-Dahan&lt;/a&gt;&lt;/p&gt;  &lt;h3&gt;Unlocker&lt;/h3&gt;  &lt;p&gt;Claudio shared a helpful tool to get rid of an annoying Windows error. &lt;a href=\"http://ccollomb.free.fr/unlocker/\"&gt;http://ccollomb.free.fr/unlocker/&lt;/a&gt;&lt;/p&gt;  &lt;h3&gt;VS 2010 Step into .Net Framework&lt;/h3&gt;  &lt;p&gt;Claudio also shared a blog post showing how to setup Visual Studio 2010 to allow stepping into .Net Framework code. &lt;a href=\"http://weblogs.asp.net/rajbk/archive/2010/04/21/setting-up-visual-studio-2010-to-step-into-microsoft-net-source-code.aspx\"&gt;http://weblogs.asp.net/rajbk/archive/2010/04/21/setting-up-visual-studio-2010-to-step-into-microsoft-net-source-code.aspx&lt;/a&gt;&lt;/p&gt;  &lt;h4&gt;Why Your Code Sucks&lt;/h4&gt;  &lt;p&gt;This might be my favorite link Claudio shared. The blog post talks about why your code sucks\xE2\x80\xA6 yes he is talking to you. (and me\xE2\x80\xA6) :D&lt;/p&gt;  &lt;p&gt;&lt;a href=\"http://www.artima.com/weblogs/viewpost.jsp?thread=71730\"&gt;http://www.artima.com/weblogs/viewpost.jsp?thread=71730&lt;/a&gt;&lt;/p&gt;  &lt;h3&gt;Resharper and Regions&lt;/h3&gt;  &lt;p&gt;Find out how to configure Resharper to remove regions &lt;a href=\"http://bit.ly/wtjK3\"&gt;&lt;u&gt;http://bit.ly/wtjK3&lt;/u&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;You can also prevent Resharper from adding regions &lt;a href=\"http://bit.ly/9QgLYe\"&gt;&lt;u&gt;http://bit.ly/9QgLYe&lt;/u&gt;&lt;/a&gt;&lt;/p&gt;  &lt;h3&gt;Monads&lt;/h3&gt;  &lt;p&gt;Uncle Bob uploaded a WTF is a Monad presentation : &lt;a href=\"http://bit.ly/aBMIaL\"&gt;&lt;u&gt;http://bit.ly/aBMIaL&lt;/u&gt;&lt;/a&gt; &amp;lt;- I plan to look at this tonight ;D&lt;/p&gt;  &lt;h3&gt;Revamp Your Code Review&lt;/h3&gt;  &lt;p&gt;Ryan wanted me to share a blog post by Kyle Baley discussing the code review process : &lt;a href=\"http://codebetter.com/blogs/kyle.baley/archive/2010/06/01/rietveld-or-how-to-revamp-your-code-review-process.aspx\"&gt;http://codebetter.com/blogs/kyle.baley/archive/2010/06/01/rietveld-or-how-to-revamp-your-code-review-process.aspx&lt;/a&gt;&lt;/p&gt;  &lt;h3&gt;Nine Things ie9 is doing Right&lt;/h3&gt;  &lt;p&gt;Ryan also wanted me to share : &lt;a href=\"http://sixrevisions.com/web-development/five-things-ie9-is-actually-doing-right/\"&gt;http://sixrevisions.com/web-development/five-things-ie9-is-actually-doing-right/&lt;/a&gt;&lt;/p&gt;  &lt;h3&gt;RSA Animate - Drive: The surprising truth about what motivates us&lt;/h3&gt;  &lt;p&gt;I think @TheCodeFoundary tweet\xE2\x80\x99d this link earlier this week. It is an interesting video discussing how we are actually motivated by more than money. :D&lt;/p&gt;  &lt;p&gt;&lt;a href=\"http://www.youtube.com/watch?v=u6XAPnuFjJc\"&gt;http://www.youtube.com/watch?v=u6XAPnuFjJc&lt;/a&gt;&lt;/p&gt;  &lt;h3&gt;Git + GitHub&lt;/h3&gt;  &lt;p&gt;Claudio was asking about Git so I shared some links and walked through a simple workflow into how I commit locally and then push to my GitHub repository.&lt;/p&gt;  &lt;p&gt;Git Extensions can be found here : &lt;a href=\"http://sourceforge.net/projects/gitextensions/\"&gt;http://sourceforge.net/projects/gitextensions/&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;We also discovered this : &lt;a href=\"http://learn.github.com/\"&gt;http://learn.github.com/&lt;/a&gt;&lt;/p&gt;  &lt;h3&gt;Architecting TekPub&lt;/h3&gt;  &lt;p&gt;Great article on InfoQ. In the article they itnerview James Avery and Rob Conery about their experience with TekPub going from MVC to Ruby on Rails and the reasoning why.&lt;/p&gt;  &lt;p&gt;&lt;a href=\"http://www.infoq.com/articles/architecting-tekpub\"&gt;http://www.infoq.com/articles/architecting-tekpub&lt;/a&gt;&lt;/p&gt;  &lt;h3&gt;Future Rails Hands-On Demo?&lt;/h3&gt;  &lt;p&gt;I tossed out the idea of having a rails hands on talk where as Claudio talks, I code the application in rails. The purpose is to showcase how rapidly we can build an application and deploy the application using rails.&lt;/p&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-3767615369495083257?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2010/06/virtual-brown-bag-632010.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-2445595504739356850</guid><pubDate>Tue, 01 Jun 2010 22:11:00 +0000</pubDate><atom:updated>2010-06-01T15:11:39.879-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>Podcast</category><category domain='http://www.blogger.com/atom/ns#'>Wizards of Smart</category><title>Wizards of Smart \xE2\x80\x93 Episode 5</title><description>&lt;p&gt;I recently was doing some volunteer work using Rails and started a conversation about my experience. This went on to general discussions on Ruby, Rails, and benefits of Dynamic Languages.&lt;/p&gt;  &lt;div&gt;&amp;#160;&lt;/div&gt;  &lt;div&gt;&lt;object classid=\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\" codebase=\"http://fpdownload.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,0,0\" width=\"210\" height=\"25\" id=\"mp3playerlightsmallv3\" align=\"middle\"&gt; \t&lt;param name=\"allowScriptAccess\" value=\"sameDomain\" /&gt; \t&lt;param name=\"movie\" value=\"http://www.podbean.com/podcast-audio-video-blog-player/mp3playerlightsmallv3.swf?audioPath=http://rookieone.podbean.com/mf/play/6rjgmr/episode5.mp3&amp;amp;autoStart=no\" /&gt; \t&lt;param name=\"quality\" value=\"high\" /&gt;&lt;param name=\"bgcolor\" value=\"#ffffff\" /&gt;&lt;param name=\"wmode\" value=\"transparent\" /&gt; \t&lt;embed src=\"http://www.podbean.com/podcast-audio-video-blog-player/mp3playerlightsmallv3.swf?audioPath=http://rookieone.podbean.com/mf/play/6rjgmr/episode5.mp3&amp;amp;autoStart=no\" quality=\"high\" width=\"210\" height=\"25\" name=\"mp3playerlightsmallv3\" align=\"middle\" allowScriptAccess=\"sameDomain\" wmode=\"transparent\" type=\"application/x-shockwave-flash\" pluginspage=\"http://www.macromedia.com/go/getflashplayer\" /&gt;&lt;/embed&gt; \t&lt;/object&gt;    &lt;br /&gt;&lt;a style=\"border-bottom-style: none; padding-left: 41px; font-family: arial, helvetica, sans-serif; color: #2da274; font-size: 11px; font-weight: normal; text-decoration: none\" href=\"http://www.podbean.com\"&gt;Powered by Podbean.com&lt;/a&gt; &lt;/div&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-2445595504739356850?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2010/06/wizards-of-smart-episode-5_01.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-7112229662342560015</guid><pubDate>Mon, 31 May 2010 15:00:00 +0000</pubDate><atom:updated>2010-05-31T08:00:07.255-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>SOLID</category><title>Interface Segregation Principle in practice</title><description>&lt;p&gt;I am working with some other team members integrating components to be consumed by different controls. For example someone could use a grid and then opt in to have sorting or filtering etc. It is a rather weird system but was decided upon before I arrived. &lt;/p&gt;  &lt;p&gt;Anyway, I am currently looking to implement an adapter for the formatting component. When I looked at the interface, ISP immediately jumped out at me. So I thought, why not do a blog post about identifying the problem and delivering the solution.&lt;/p&gt;  &lt;h3&gt;Interface Segregation Principle&lt;/h3&gt;  &lt;blockquote&gt;   &lt;p&gt;The Interface Segregation Principle states that clients should not be forced to implement interfaces they don\xE2\x80\x99t use. Instead of one fat interface many small interfaces are preferred based on groups of methods, each one serving one submodule. - &lt;a href=\"http://www.oodesign.com/interface-segregation-principle.html\"&gt;http://www.oodesign.com/interface-segregation-principle.html&lt;/a&gt;&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;So instead of one large interface we should have many smaller interfaces with grouped behavior.&lt;/p&gt;  &lt;p&gt;When we see an interface like this, the violation of ISP should be readily apparent. (warning.. be prepared to scroll\xE2\x80\xA6..)&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:f9b587b0-7844-41b8-a49f-fd0530625625\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; An interface defining the contract for anything that has columns that can be formatted.&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;interface&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IColumnFormattingAdapter&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#0000ff\"&gt;#region&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; Methods&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; Hides the column.&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; HideColumn();&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; Bests the fit header.&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; BestFitHeader();&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; Bests the fit column.&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; BestFitColumn();&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; Bests the fit header column.&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; BestFitHeaderColumn();&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; Bests the fit all columns/headers.&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; BestFitAllHeaderColumns();&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; Formats the column.&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; FormatColumn();&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; Formats all columns.&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; FormatAllColumns();&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; Shows the advanced formatting.&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; ShowAdvancedFormatting();&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; Shows the advanced report formatting.&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; ShowAdvancedReportFormatting();&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; Chooses the column.&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; ChooseColumn();&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#0000ff\"&gt;#endregion&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#0000ff\"&gt;#region&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; Feature Support&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; Whether or not the adapter supports hiding of columns&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;Boolean&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; AllowHideColumn { &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;get&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;; }&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; Whether or not the adapter supports best fit based on the header text&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;Boolean&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; AllowBestFitHeader { &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;get&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;; }&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; Whether or not the adapter supports best fit based on the column contents&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;Boolean&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; AllowBestFitColumn { &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;get&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;; }&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; Whether or not the adapter supports best fit based on the longer of header text and column contents&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;Boolean&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; AllowBestFitHeaderColumn { &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;get&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;; }&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; Whether or not the adapter supports best fit on all columns based on the longer of header text and column contents&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;Boolean&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; AllowBestFitAllHeaderColumns { &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;get&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;; }&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; Whether or not the adapter supports formatting of a column&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;Boolean&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; AllowFormatColumn { &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;get&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;; }&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; Whether or not the adapter supports formatting of all columns&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;Boolean&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; AllowFormatAllColumns { &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;get&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;; }&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; Whether or not the adapter supports advanced conditional formatting&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;Boolean&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; AllowAdvancedFormatting { &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;get&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;; }&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; Whether or not the adapter supports advanced report property formatting&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;Boolean&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; AllowAdvancedReportFormatting { &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;get&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;; }&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; Whether or not the adapter supports choosing columns&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;Boolean&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; AllowChooseColumn { &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;get&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;; }&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#0000ff\"&gt;#endregion&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;h3&gt;Identifying ISP Violation&lt;/h3&gt;  &lt;p&gt;The first characteristic that the interface violates ISP is the sheer size. This interface weighs in at 117 lines. Granted there are comments, etc but it is still rather large.&lt;/p&gt;  &lt;p&gt;The second characteristic that the interface violates ISP (and the biggest eye sore) is all the Allow properties. That should make you stop and scratch your head.&lt;/p&gt;  &lt;h3&gt;Fixing the interface&lt;/h3&gt;  &lt;p&gt;Let\xE2\x80\x99s simplify the bad interface and then learn how to fix it.&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:af0573fb-a845-4b32-ab9e-c0b6a842830d\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; An interface defining the contract for anything that has columns that can be formatted.&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;interface&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IBadColumnFormattingAdapter&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; Hides the column.&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; HideColumn();&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; Chooses the column.&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; ChooseColumn();&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; Whether or not the adapter supports hiding of columns&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;Boolean&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; AllowHideColumn { &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;get&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;; }&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; Whether or not the adapter supports choosing columns&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;Boolean&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; AllowChooseColumn { &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;get&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;; }&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;So in this scenario we can hide a column and then choose a column. Instead of having a large interface for these two behaviors, we should package the behaviors into separate interfaces.&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:93d251d2-8b41-40d5-9c4e-a520f02196bd\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt;Interface for supporting Hide Column feature&lt;/span&gt;&lt;br&gt; \xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;interface&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IHideColumn&lt;/span&gt;&lt;br&gt; \xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt;Hides the column.&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; HideColumn();&lt;/span&gt;&lt;br&gt; \xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt;Interface for supporting Choose Column feature&lt;/span&gt;&lt;br&gt; \xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;interface&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IChooseColumn&lt;/span&gt;&lt;br&gt; \xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt;Chooses the column.&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#808080\"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; ChooseColumn();&lt;/span&gt;&lt;br&gt; \xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;Now our functionality is encapsulated into behavior centric interfaces. Our adapters can then opt in to provide the functionality, and we don\xE2\x80\x99t have the superfluous Allow properties.&lt;/p&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-7112229662342560015?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2010/05/interface-segregation-principle-in.html</link><author>noreply@blogger.com (JB)</author><thr:total>1</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-1984332711772780353</guid><pubDate>Fri, 28 May 2010 15:00:00 +0000</pubDate><atom:updated>2010-05-28T08:00:05.528-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>Learning</category><category domain='http://www.blogger.com/atom/ns#'>Structure Map</category><title>Structure Map 2.6 Constructing the Concrete Type</title><description>&lt;h3&gt;&lt;/h3&gt;  &lt;h3&gt;Basic Use with Func&amp;lt;T&amp;gt;&lt;/h3&gt;  &lt;p&gt;Ryan yet again was asking for how to do another crazy thing with Structure Map. :)&lt;/p&gt;  &lt;p&gt;He wanted to know if there was a way to control the construction of a concrete type. Well.. he didn\xE2\x80\x99t put it that way but it is what he wanted to know.&lt;/p&gt;  &lt;p&gt;Besides the regular For&amp;lt;I&amp;gt;().Use&amp;lt;C&amp;gt;()\xE2\x80\xA6 we have the ability to construct the concrete type ourselves with a simple action.&lt;/p&gt;  &lt;p&gt;To demo this I have a Foo class that accepts a string in the constructor.&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:f2625343-33ca-49f2-9acb-1a88f5ee6cbe\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;class&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Foo&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; : &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IFoo&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; Foo(&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;string&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; message)&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;Message = message;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;string&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; Message { &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;get&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;set&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;; }&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;We want to pass in the message explicitly so we configure our container and tell it how to provide the concrete implementation.&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:8c744553-b3fc-43e0-8db7-3f5f1b60609f\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;_container = &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Container&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;();&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;_container.Configure(x =&amp;gt; x.For&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IFoo&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;().Use(() =&amp;gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Foo&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;(&lt;/span&gt;&lt;span style=\"background:#161616;color:#668f5f\"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;)));&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;And the tests to verify it works :&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:562db5fd-184d-486b-a187-c400b65b0025\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;[&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Test&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;]&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; IFoo_should_resolve_to_Foo()&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; foo = _container.GetInstance&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IFoo&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;foo.ShouldBeType&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Foo&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;();\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;[&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Test&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;]&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; message_should_be_set_during_construction()&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; foo = _container.GetInstance&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IFoo&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;foo.Message.ShouldBe(&lt;/span&gt;&lt;span style=\"background:#161616;color:#668f5f\"&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;);&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;h3&gt;Using Func&amp;lt;IContext, T&amp;gt;&lt;/h3&gt;  &lt;p&gt;There are other scenarios where not only do you want more control on a concrete types construction, but also need to resolve other dependencies. SM also allows you to specify a Func&amp;lt;IContext,T&amp;gt; where the IContext allows you to resolve classes from the container.&lt;/p&gt;  &lt;p&gt;So if we have a scenario with an IBar and an IFoo:&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:98099385-c9e5-4647-a9c8-b97c1381b967\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;class&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Bar&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; : &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IBar&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IFoo&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; Foo { &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;get&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;set&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;; }&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;class&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Foo&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; : &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IFoo&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;interface&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IBar&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IFoo&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; Foo { &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;get&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;; }&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;interface&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IFoo&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;We can use the Func&amp;lt;IContext,T&amp;gt; similar to how we used the Func&amp;lt;T&amp;gt;.&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:349d5bbc-1e36-4fb3-80f6-c205e475a54e\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;_container = &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Container&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;();&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;_container.Configure(x =&amp;gt;&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;x.For&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IFoo&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;().Use&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Foo&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;x.For&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IBar&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;().Use(c =&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; bar = &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Bar&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;();&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;bar.Foo = c.GetInstance&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IFoo&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;return&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; bar;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;});&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;});&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;And naturally our test to verify it works:&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:ebf877af-777f-45d0-b8eb-1121c9a8543c\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;[&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Test&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;]&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; should_set_foo_property_on_bar()&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; bar = _container.GetInstance&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IBar&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;bar.Foo.ShouldBeType&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Foo&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;So that was a brief introduction into using Funcs to provide the concrete implementation of an interface for Structure Map.&lt;/p&gt;  &lt;p&gt;All the Learning Structure Map code can be found in my Learning solution on Git Hub : &lt;a href=\"http://github.com/RookieOne/Learning\"&gt;http://github.com/RookieOne/Learning&lt;/a&gt;&lt;/p&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-1984332711772780353?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2010/05/structure-map-26-constructing-concrete.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-5879738512195293103</guid><pubDate>Thu, 27 May 2010 18:28:00 +0000</pubDate><atom:updated>2010-05-27T11:28:44.932-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>Virtual Brown Bag</category><title>Virtual Brown Bag 5/27/2010</title><description>&lt;p&gt;Claudio was a no show today. As I predicted he had meetings he could not get out of.&lt;/p&gt;  &lt;p&gt;But we powered through and covered a range of topics. &lt;/p&gt;  &lt;h3&gt;Wizards of Smart podcasts&lt;/h3&gt;  &lt;p&gt;Since our last meeting there have been 2 episodes of Wizards of Smart.&lt;/p&gt;  &lt;p&gt;Episode 3 \xE2\x80\x93 Testing : &lt;a href=\"http://www.theabsentmindedcoder.com/2010/05/wizards-of-smart-episode-3-testing.html\"&gt;http://www.theabsentmindedcoder.com/2010/05/wizards-of-smart-episode-3-testing.html&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Episode 4 \xE2\x80\x93 Code Reviews, Work Environment, Developers : &lt;a href=\"http://www.theabsentmindedcoder.com/2010/05/wizards-of-smart-episode-4.html\"&gt;http://www.theabsentmindedcoder.com/2010/05/wizards-of-smart-episode-4.html&lt;/a&gt;&lt;/p&gt;  &lt;h3&gt;Ruby on Rails&lt;/h3&gt;  &lt;p&gt;I talked a bit about my experience this week with Ruby on Rails. In particular I pointed out how I enjoyed the migration functionality.&lt;/p&gt;  &lt;p&gt;&lt;a href=\"http://guides.rubyonrails.org/migrations.html\"&gt;http://guides.rubyonrails.org/migrations.html&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Alper pointed out that c4mvc also has a session on some .net tools for migration : &lt;/p&gt;  &lt;p&gt;&lt;a href=\"http://www.c4mvc.net/Home/Events\"&gt;http://www.c4mvc.net/Home/Events&lt;/a&gt; \xE2\x80\x93&amp;gt; March Show and Tell : Topic Database Migration Frameworks : MigratorDotNet and RikMigrations&lt;/p&gt;  &lt;p&gt;I also point out the Dev Chix wiki for learning Ruby on Rails : &lt;a href=\"http://wiki.devchix.com/index.php?title=Server_2003\"&gt;http://wiki.devchix.com/index.php?title=Server_2003&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;The guide walks through every step from installing Ruby, rails gems, setting up git, heroku, and pushing your app to heroku. It\xE2\x80\x99s a great guide for those new to rails (like me!)&lt;/p&gt;  &lt;h3&gt;SQLite Database Browser&lt;/h3&gt;  &lt;p&gt;I pointed out this tool for looking at Sqlite databases. I am using it to look at my rails database. &lt;/p&gt;  &lt;p&gt;&lt;a href=\"http://sourceforge.net/projects/sqlitebrowser/\"&gt;http://sourceforge.net/projects/sqlitebrowser/&lt;/a&gt;&lt;/p&gt;  &lt;h3&gt;Domain Driven Design&lt;/h3&gt;  &lt;p&gt;Ed asked about DDD for everyday apps. I then fumbled around and gave a high level talk on how to apply some DDD principles to everyday code. I think I will work on a presentation on the subject because I find it an interesting perspective.&lt;/p&gt;  &lt;p&gt;We did point out some DDD resources :&lt;/p&gt;  &lt;p&gt;Greg Young on Herding Code : &lt;a href=\"http://herdingcode.com/?p=189\"&gt;http://herdingcode.com/?p=189&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Greg Young on InfoQ : &lt;a href=\"http://www.infoq.com/interviews/greg-young-ddd\"&gt;http://www.infoq.com/interviews/greg-young-ddd&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;David Laribee on Deep Fried Bytes : &lt;a href=\"http://deepfriedbytes.com/podcast/episode-6-talking-domain-driven-design-with-david-laribee-part-1/\"&gt;http://deepfriedbytes.com/podcast/episode-6-talking-domain-driven-design-with-david-laribee-part-1/&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Eric Evan\xE2\x80\x99s book : &lt;a href=\"http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1274981635&amp;amp;sr=8-1\"&gt;http://www.amazon.com/Domain-Driven-Design-Tackling-Complexity-Software/dp/0321125215/ref=sr_1_1?ie=UTF8&amp;amp;s=books&amp;amp;qid=1274981635&amp;amp;sr=8-1&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Jimmy Nilsson\xE2\x80\x99s book : &lt;a href=\"http://www.amazon.com/Applying-Domain-Driven-Design-Patterns-Examples/dp/0321268202/ref=sr_1_2?ie=UTF8&amp;amp;s=books&amp;amp;qid=1274981635&amp;amp;sr=8-2\"&gt;http://www.amazon.com/Applying-Domain-Driven-Design-Patterns-Examples/dp/0321268202/ref=sr_1_2?ie=UTF8&amp;amp;s=books&amp;amp;qid=1274981635&amp;amp;sr=8-2&lt;/a&gt;&lt;/p&gt;  &lt;h3&gt;Houston Techfest&lt;/h3&gt;  &lt;p&gt;I mentioned the Houston Techfest again and discussed some potential presentations Claudio and I might be doing.&lt;/p&gt;  &lt;p&gt;&lt;a href=\"http://www.houstontechfest.com/dotnetnuke/default.aspx\"&gt;http://www.houstontechfest.com/dotnetnuke/default.aspx&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;They are still taking abstracts. Email your abstracts and bio to &lt;a href=\"mailto:speakers@houstontechfest.com\"&gt;speakers@houstontechfest.com&lt;/a&gt;&lt;/p&gt;  &lt;h3&gt;Linq&lt;/h3&gt;  &lt;p&gt;I walked through some linq examples that can be found in my learning C# project in my Learning Repository : &lt;a href=\"http://github.com/RookieOne/Learning\"&gt;http://github.com/RookieOne/Learning&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;We looked at Select, my pet peeve of using a Where and then FirstorDefault, and also how to use Any instead of Count to verify if a list is not empty.&lt;/p&gt;  &lt;p&gt;I took a poll and there was a lot of interest in doing more Linq best practices and techniques. I am working on a presentation as well and it was nice to see there was a good deal of interest.&lt;/p&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-5879738512195293103?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2010/05/virtual-brown-bag-5272010.html</link><author>noreply@blogger.com (JB)</author><thr:total>1</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-6180753663664448090</guid><pubDate>Thu, 27 May 2010 16:02:00 +0000</pubDate><atom:updated>2010-05-27T09:02:22.574-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>Podcast</category><category domain='http://www.blogger.com/atom/ns#'>Wizards of Smart</category><title>Wizards of Smart - Episode 4</title><description>&lt;div&gt;Ryan and I talk about code reviews, work environment, and some traits of a good developer&lt;/div&gt;  &lt;div&gt;&amp;#160;&lt;/div&gt;  &lt;div&gt;&lt;object classid=\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\" codebase=\"http://fpdownload.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,0,0\" width=\"210\" height=\"25\" id=\"mp3playerlightsmallv3\" align=\"middle\"&gt; \t&lt;param name=\"allowScriptAccess\" value=\"sameDomain\" /&gt; \t&lt;param name=\"movie\" value=\"http://www.podbean.com/podcast-audio-video-blog-player/mp3playerlightsmallv3.swf?audioPath=http://rookieone.podbean.com/mf/play/zjnqtw/episode4.mp3&amp;amp;autoStart=no\" /&gt; \t&lt;param name=\"quality\" value=\"high\" /&gt;&lt;param name=\"bgcolor\" value=\"#ffffff\" /&gt;&lt;param name=\"wmode\" value=\"transparent\" /&gt; \t&lt;embed src=\"http://www.podbean.com/podcast-audio-video-blog-player/mp3playerlightsmallv3.swf?audioPath=http://rookieone.podbean.com/mf/play/zjnqtw/episode4.mp3&amp;amp;autoStart=no\" quality=\"high\" width=\"210\" height=\"25\" name=\"mp3playerlightsmallv3\" align=\"middle\" allowScriptAccess=\"sameDomain\" wmode=\"transparent\" type=\"application/x-shockwave-flash\" pluginspage=\"http://www.macromedia.com/go/getflashplayer\" /&gt;&lt;/embed&gt; \t&lt;/object&gt;    &lt;br /&gt;&lt;a style=\"border-bottom-style: none; padding-left: 41px; font-family: arial, helvetica, sans-serif; color: #2da274; font-size: 11px; font-weight: normal; text-decoration: none\" href=\"http://www.podbean.com\"&gt;Powered by Podbean.com&lt;/a&gt; &lt;/div&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-6180753663664448090?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2010/05/wizards-of-smart-episode-4.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-6287673500115156649</guid><pubDate>Wed, 26 May 2010 15:00:00 +0000</pubDate><atom:updated>2010-05-26T08:00:02.885-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>Learning</category><category domain='http://www.blogger.com/atom/ns#'>Structure Map</category><title>Structure Map 2.6 Constructor Arguments</title><description>&lt;h3&gt;Constructor Injection&lt;/h3&gt;  &lt;p&gt;When we use an IoC tool the most basic functionality we expect is to have constructor injection. That means if we have a type we are resolving and one of the constructor\xE2\x80\x99s parameters is also a type, the container will resolve that type as well.&lt;/p&gt;  &lt;p&gt;And turtles all the way down\xE2\x80\xA6&lt;/p&gt;  &lt;p&gt;If we have two types(Foo : IFoo and Bar : IBar) and in Bar\xE2\x80\x99s constructor it has an IFoo parameter, we should expect the IFoo parameter to be resolved to an instance of Foo.&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:8215a367-3c33-4754-99a2-5d62d0447402\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;class&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Bar&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; : &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IBar&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; Bar(&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IFoo&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; foo)&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;Foo = foo;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IFoo&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; Foo { &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;get&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;set&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;; }&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;Our container is setup like : &lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:48f4d7e2-e8df-48fb-92d6-6edcf34cdb59\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;_container = &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Container&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;();&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;_container.Configure(x =&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;x.For&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IFoo&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;().Use&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Foo&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;x.For&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IBar&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;().Use&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Bar&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;});&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;We then expect :&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:f124c259-ae05-4418-8a85-eb67d63a8169\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;[&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Test&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;]&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; IBar_should_resolve_to_Bar()&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; bar = _container.GetInstance&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IBar&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;bar.ShouldBeType&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Bar&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;[&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Test&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;]&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; IBars_IFoo_dependency_should_resolve_to_Foo()&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; bar = _container.GetInstance&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IBar&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;bar.Foo.ShouldBeType&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Foo&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;h3&gt;Constructor Arguments&lt;/h3&gt;  &lt;p&gt;Sometimes you need to specify the exact argument for a given type when it is constructed. Structure Map allows you to provide specific values for resolving a constructors argument. &lt;/p&gt;  &lt;p&gt;For example, Ryan was asking if there is a method with SM to resolve an \xE2\x80\x9Cid\xE2\x80\x9D value from an HttpContext. I know SM has some fancy session management lifecycle features built in, but since I don\xE2\x80\x99t live in the Web world I have never explored what can and can not be done with those features.&lt;/p&gt;  &lt;p&gt;What I do know is that I can specify where my \xE2\x80\x9Cid\xE2\x80\x9D parameter comes from.&lt;/p&gt;  &lt;p&gt;Let\xE2\x80\x99s look at this simple example.&lt;/p&gt;  &lt;p&gt;In my scenario I have a Foo class.&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:9b0ee50c-9536-4d02-b59c-f41036e5b905\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;class&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Foo&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; : &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IFoo&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; Foo(&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;int&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; id, &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IBar&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; bar)&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;Id = id;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;Bar = bar;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;int&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; Id { &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;get&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;set&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;; }&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IBar&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; Bar { &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;get&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;set&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;; }&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;The id that is passed into Foo is providing by some mysterious X. In my case my X is an IIdProvider.&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:8f8b5fd2-54e1-4e33-a927-cde687852c36\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;class&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;IdProvider&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; : &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IIdProvider&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;int&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; GetId()&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;return&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#bda265\"&gt;1&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;Now I want to tell SM that when it resolves an IFoo, I want it to use the IIdProvider to get the \xE2\x80\x9Cid\xE2\x80\x9D.&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:961875ea-6cb6-4f35-bf00-3e8437f840c8\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;x.For&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IFoo&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;().Use&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Foo&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;()&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;.Ctor&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;int&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;(&lt;/span&gt;&lt;span style=\"background:#161616;color:#668f5f\"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;)&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;.Is(c =&amp;gt; c.GetInstance&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IIdProvider&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;().GetId());&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;All together the configuration is:&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:33bedad3-dfb2-4c9c-8b32-d91304f092f5\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;_container = &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Container&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;();&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;_container.Configure(x =&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;x.For&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IIdProvider&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;().Use&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;IdProvider&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;x.For&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IBar&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;().Use&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Bar&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;x.For&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IFoo&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;().Use&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Foo&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;()&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;.Ctor&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;int&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;(&lt;/span&gt;&lt;span style=\"background:#161616;color:#668f5f\"&gt;&amp;quot;id&amp;quot;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;)&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;.Is(c =&amp;gt; c.GetInstance&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IIdProvider&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;().GetId());&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;});&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;And my tests to verify it works:&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:21b37dff-1445-4700-8c16-b61a40b45842\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;[&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Test&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;]&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; should_resolve_Bar()&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; foo = _container.GetInstance&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IFoo&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;foo.Bar.ShouldBeType&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Bar&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;[&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Test&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;]&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; should_resolve_id()&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; foo = _container.GetInstance&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IFoo&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;foo.Id.ShouldBe(&lt;/span&gt;&lt;span style=\"background:#161616;color:#bda265\"&gt;1&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;);&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;h3&gt;Lazy Constructor Arguments&lt;/h3&gt;  &lt;p&gt;Then Ryan tells me, he would really like to be lazy because he might not need the id for all requests. There are some Lazy features added to SM 2.6 but let\xE2\x80\x99s just use what we already know to solve this problem.&lt;/p&gt;  &lt;p&gt;Instead of having an int Id parameter, let\xE2\x80\x99s have a Func&amp;lt;int&amp;gt; getId parameter. &lt;/p&gt;  &lt;p&gt;Foo changes to :&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:ecd378d7-659c-4c45-83d0-c00128a594bb\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;class&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Foo&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; : &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IFoo&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; Foo(&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;Func&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;int&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt; getId, &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IBar&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; bar)&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;GetId = getId;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;Bar = bar;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;Func&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;int&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt; GetId { &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;get&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;set&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;; }&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IBar&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; Bar { &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;get&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;set&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;; }&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;Now our constructor configuration changes to :&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:ab9a4219-c0f5-4d84-a7b9-d14b7edb72a5\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;x.For&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IFoo&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;().Use&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Foo&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;()&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;.Ctor&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;Func&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;int&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;&amp;gt;(&lt;/span&gt;&lt;span style=\"background:#161616;color:#668f5f\"&gt;&amp;quot;getId&amp;quot;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;)&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;.Is(c =&amp;gt; c.GetInstance&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IIdProvider&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;().GetId);&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;And our tests become :&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:9b5c600a-1ed7-4f1f-86f5-8be26c2d5d28\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;[&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Test&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;]&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; should_resolve_Bar()&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; foo = _container.GetInstance&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IFoo&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;foo.Bar.ShouldBeType&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Bar&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;[&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Test&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;]&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; should_resolve_id()&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; foo = _container.GetInstance&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IFoo&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;foo.GetId().ShouldBe(&lt;/span&gt;&lt;span style=\"background:#161616;color:#bda265\"&gt;1&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;);&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;Yes it is a poor man\xE2\x80\x99s lazy instantiation. But in many ways its the clearest way to have the functionality.&lt;/p&gt;  &lt;p&gt;You can find all this code in my Git Hub Learning Repository and the Learning Structure Map solution : &lt;a href=\"http://github.com/RookieOne/Learning\"&gt;http://github.com/RookieOne/Learning&lt;/a&gt;&lt;/p&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-6287673500115156649?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2010/05/structure-map-26-constructor-arguments.html</link><author>noreply@blogger.com (JB)</author><thr:total>1</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-2996870567134441607</guid><pubDate>Tue, 25 May 2010 14:39:00 +0000</pubDate><atom:updated>2010-05-25T07:43:38.154-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>Podcast</category><category domain='http://www.blogger.com/atom/ns#'>Wizards of Smart</category><title>Wizards of Smart \xE2\x80\x93 Episode 3 Testing</title><description>&lt;div&gt;&amp;#160;&lt;/div&gt;  &lt;div&gt;Ryan and I talk a bit about testing, TDD, code coverage, code quality, Dependency Injection\xE2\x80\xA6. so a bunch of random topics loosely related to testing.&lt;/div&gt;  &lt;div&gt;&amp;#160;&lt;/div&gt;  &lt;div&gt;&lt;object classid=\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\" codebase=\"http://fpdownload.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,0,0\" width=\"210\" height=\"25\" id=\"mp3playerlightsmallv3\" align=\"middle\"&gt; \t&lt;param name=\"allowScriptAccess\" value=\"sameDomain\" /&gt; \t&lt;param name=\"movie\" value=\"http://www.podbean.com/podcast-audio-video-blog-player/mp3playerlightsmallv3.swf?audioPath=http://rookieone.podbean.com/mf/play/yqy4ta/episode3.mp3&amp;amp;autoStart=no\" /&gt; \t&lt;param name=\"quality\" value=\"high\" /&gt;&lt;param name=\"bgcolor\" value=\"#ffffff\" /&gt;&lt;param name=\"wmode\" value=\"transparent\" /&gt; \t&lt;embed src=\"http://www.podbean.com/podcast-audio-video-blog-player/mp3playerlightsmallv3.swf?audioPath=http://rookieone.podbean.com/mf/play/yqy4ta/episode3.mp3&amp;amp;autoStart=no\" quality=\"high\" width=\"210\" height=\"25\" name=\"mp3playerlightsmallv3\" align=\"middle\" allowScriptAccess=\"sameDomain\" wmode=\"transparent\" type=\"application/x-shockwave-flash\" pluginspage=\"http://www.macromedia.com/go/getflashplayer\" /&gt;&lt;/embed&gt; \t&lt;/object&gt;    &lt;br /&gt;&lt;a style=\"border-bottom-style: none; padding-left: 41px; font-family: arial, helvetica, sans-serif; color: #2da274; font-size: 11px; font-weight: normal; text-decoration: none\" href=\"http://www.podbean.com\"&gt;Powered by Podbean.com&lt;/a&gt; &lt;/div&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-2996870567134441607?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2010/05/wizards-of-smart-episode-3-testing.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-3674467753577842789</guid><pubDate>Mon, 24 May 2010 15:00:00 +0000</pubDate><atom:updated>2010-05-24T08:00:07.740-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>Learning</category><category domain='http://www.blogger.com/atom/ns#'>Structure Map</category><title>Structure Map 2.6 using Conventions</title><description>&lt;p&gt;An awesome feature of StructureMap is the ability to scan assemblies and register types using different conventions. At first this might seem a trivial feature but I had a project in the past where this approach was shunned&amp;#160; upon. Even when I tried to bring in this functionality it was not approved. The result? A \xE2\x80\x98module\xE2\x80\x99 class with tons of namespaces and tons of register lines. Why suffer that pain?!&lt;/p&gt;  &lt;h3&gt;Default Convention&lt;/h3&gt;  &lt;p&gt;How many times do we have an IFoo interface and then the concrete implementation named Foo. Shouldn\xE2\x80\x99t our IoC container be smart enough to recognized this most basic and popular pattern? Well StructureMap is that smart.&lt;/p&gt;  &lt;p&gt;To use conventions, we first specify which assemblies we want to &lt;strong&gt;scan&lt;/strong&gt;. Then we add conventions to use when scanning those assemblies. So to use the default convention scanner we simply do:&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:4c03b2c9-6122-4d49-89cd-c7b0b72ebd6d\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;container.Configure(x =&amp;gt; x.Scan(s =&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;s.TheCallingAssembly();&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;s.Convention&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;DefaultConventionScanner&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;();\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;} ));&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;And naturally we should have a test to verify it works as we expect.&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:751fe6d3-f2bc-4d7e-985c-fcef5fd5d04f\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;[&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Test&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;]&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; should_load_IFoo()&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; container = &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Container&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;();&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;container.Configure(x =&amp;gt; x.Scan(s =&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;s.TheCallingAssembly();&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;s.Convention&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;DefaultConventionScanner&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;();\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;} ));&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt;// IFoo -&amp;gt; Foo&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#008000\"&gt;// IWhatever -&amp;gt; Whatever&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; foo = container.GetInstance&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IFoo&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;foo.ShouldBeType&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Foo&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;h3&gt;Add All Types&lt;/h3&gt;  &lt;p&gt;Sometimes we have more than one implementation of a given interface. For that scenario we can use the same scanning process but this time tell the scanner to add of types of a given interface.&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:69964436-5f51-44f6-8c28-3f4231e3c1b9\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;s.AddAllTypesOf&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IEntity&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;()&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;What\xE2\x80\x99s even cooler is that we can add additional information to the registration. For example, what if we want to register all our IEntity types but use the actual type name as a key (PersonEntity \xE2\x80\x93&amp;gt; \xE2\x80\x98Person\xE2\x80\x99). Easy peasy.&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:7e206a3a-4ad1-48c5-a683-ecde4ee87bb9\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;s.AddAllTypesOf&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IEntity&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;().NameBy(t =&amp;gt; t.Name.Replace(&lt;/span&gt;&lt;span style=\"background:#161616;color:#668f5f\"&gt;&amp;quot;Entity&amp;quot;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;, &lt;/span&gt;&lt;span style=\"background:#161616;color:#668f5f\"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;));&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;And our test?&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:b6eb70a5-47ed-4609-9f69-3a1d316fba12\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;[&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Test&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;]&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; should_load_Person_Entity()&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; container = &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Container&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;();&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;container.Configure(x =&amp;gt; x.Scan(s =&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;s.TheCallingAssembly();&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;s.AddAllTypesOf&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IEntity&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;().NameBy(t =&amp;gt; t.Name.Replace(&lt;/span&gt;&lt;span style=\"background:#161616;color:#668f5f\"&gt;&amp;quot;Entity&amp;quot;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;, &lt;/span&gt;&lt;span style=\"background:#161616;color:#668f5f\"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;));&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;}));&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; person = container.GetInstance&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IEntity&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;(&lt;/span&gt;&lt;span style=\"background:#161616;color:#668f5f\"&gt;&amp;quot;Person&amp;quot;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;);&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;person.ShouldBeType&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;PersonEntity&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;&lt;/p&gt;  &lt;h3&gt;Custom Convention&lt;/h3&gt;  &lt;p&gt;Beyond the built in Default Convention and the ability to add all types, we can create our own custom conventions. These used to be called TypeScanners, but are now implementations of the IRegistrationConvention interface. I think the renaming was a good idea. I always had a hard time naming my scanners because I kept calling them conventions. Now I don\xE2\x80\x99t have that problem anymore. :)&lt;/p&gt;  &lt;p&gt;The interface is simple and has only one method you need to implement called Process. &lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:cca314eb-2a9f-4c41-8d81-4ff1def4da0b\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;class&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;CustomConvention&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; : &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IRegistrationConvention&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; Process(&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Type&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; type, &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Registry&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; registry)&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;throw&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;NotImplementedException&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;();&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;For our custom convention we are going to register all types of IController and use the type name as the key. So this is similar to how we registered our IEntity but instead of using the AddAllTypes feature we are using a convention.&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:f581442b-b170-40ee-b629-efc91710afbf\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;class&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;ControllerConvention&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; : &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IRegistrationConvention&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; Process(&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Type&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; type, &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Registry&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; registry)&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;if&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; (!type.CanBeCastTo(&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;typeof&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; (&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IController&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;)))&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;return&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;;&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;string&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; name = GetName(type);&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;registry.AddType(&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;typeof&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; (&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IController&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;), type, name);&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;static&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;string&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; GetName(&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Type&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; type)&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;return&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; type.Name.Replace(&lt;/span&gt;&lt;span style=\"background:#161616;color:#668f5f\"&gt;&amp;quot;Controller&amp;quot;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;, &lt;/span&gt;&lt;span style=\"background:#161616;color:#668f5f\"&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;);&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;And then to use our new conventions we just need to do:&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:4e4a4516-8295-43a6-bee1-0149a527cce5\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;_container = &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Container&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;();&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;_container.Configure(x =&amp;gt; x.Scan(s =&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;s.TheCallingAssembly();&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;s.Convention&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;ControllerConvention&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;}));&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;Here are the tests:&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:a6a0a0de-301c-4bb8-9635-deeac43a61bf\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;[&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Test&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;]&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; should_use_register_a_single_controller()&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; count = _container.GetAllInstances&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IController&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;().Count;&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;count.ShouldBe(&lt;/span&gt;&lt;span style=\"background:#161616;color:#bda265\"&gt;1&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;);&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;[&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Test&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;]&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; should_register_controller_for_person()&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; controller = _container.GetInstance&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IController&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;(&lt;/span&gt;&lt;span style=\"background:#161616;color:#668f5f\"&gt;&amp;quot;Person&amp;quot;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;);&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;controller.ShouldBeType&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;PersonController&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;Here we just covered the basics of using conventions and the assembly scanner with StructureMap to reduce wasteful registration code.&lt;/p&gt;  &lt;p&gt;The code can be found in my learning solution on GitHub : &lt;a href=\"http://github.com/RookieOne/Learning\"&gt;http://github.com/RookieOne/Learning&lt;/a&gt;&lt;/p&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-3674467753577842789?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2010/05/structure-map-26-using-conventions.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-2158137551946840458</guid><pubDate>Fri, 21 May 2010 15:08:00 +0000</pubDate><atom:updated>2010-05-21T08:08:00.492-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>Learning</category><category domain='http://www.blogger.com/atom/ns#'>Structure Map</category><title>Structure Map Basics 2.6</title><description>&lt;p&gt;I\xE2\x80\x99ve had doing Structure Map posts on my To-Do list for a long time now. It is time to spring clean these items and get some posts up!&lt;/p&gt;  &lt;p&gt;Like my other learning posts / projects, you can find the code at : &lt;a href=\"http://github.com/RookieOne/Learning\"&gt;http://github.com/RookieOne/Learning&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;I don\xE2\x80\x99t want to dive into how / why you can use a DI / IOC tool like StructureMap. Or why SM over another IoC tool. So I won\xE2\x80\x99t. :)&lt;/p&gt;  &lt;p&gt;My recommendation is prefer to use a tool made by people who think about the problem the same way you do. You will be happier and self-discover features more easily.&lt;/p&gt;  &lt;p&gt;I like the way Jeremy Miller thinks and naturally love Structure Map.&lt;/p&gt;  &lt;h3&gt;Normal Registration&lt;/h3&gt;  &lt;p&gt;Previously to register an interface with a concrete type there was a fluent by extremely verbose interface. With 2.6 that has been greatly simplified for a For&amp;lt;X&amp;gt;().Use&amp;lt;Y&amp;gt;() syntax. &lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:0a5054ff-289b-498c-a248-3f3aae18f1d9\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;[&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Test&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;]&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; IFoo_should_resolve_to_Foo()&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; container = &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Container&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;();&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;container.Configure(x =&amp;gt; x.For&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IFoo&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;().Use&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Foo&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;());&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; foo = container.GetInstance&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IFoo&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;foo.ShouldBeType&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Foo&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;h3&gt;Singleton Registration&lt;/h3&gt;  &lt;p&gt;To register the type as a singleton, we just need to add a Singleton() call between our For and Use calls.&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:d75d2a2d-61b7-4122-94d2-6f980c6fa364\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;[&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Test&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;]&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; should_return_same_instance_of_Foo()&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; container = &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Container&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;();&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;container.Configure(x =&amp;gt; x.For&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IFoo&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;().Singleton().Use&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Foo&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;());&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; foo1 = container.GetInstance&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IFoo&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; foo2 = container.GetInstance&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IFoo&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;foo1.ShouldBeTheSameInstanceAs(foo2);&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;h3&gt;Open Generic Registration&lt;/h3&gt;  &lt;p&gt;One of the cool things with StructureMap is the ability to register open generics. I know other tools support this, but it is still cool. So in this test I am registering an open generic interface IRepository&amp;lt;&amp;gt; with a concrete yet still open generic implementation Repository&amp;lt;&amp;gt;. I can then asked for a IRepository&amp;lt;Book&amp;gt; and I get back a Repository&amp;lt;Book&amp;gt;.&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:34ca5501-e55d-484c-8939-0522ad6b7e44\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;[&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Test&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;]&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; IRepositoryT_should_resolve_to_RepositoryT()&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; container = &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Container&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;();&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;container.Configure(x =&amp;gt; x.For(&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;typeof&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; (&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IRepository&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;lt;&amp;gt;)).Use(&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;typeof&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; (&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Repository&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;lt;&amp;gt;)));&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; repository = container.GetInstance&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IRepository&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Book&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;&amp;gt;();&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;repository.ShouldBeType&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Repository&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Book&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;&amp;gt;();&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;h3&gt;Open Generic with Closed Generic Alternative&lt;/h3&gt;  &lt;p&gt;Now this is where things get real cool. Besides registering an open generic concrete implementation, I can also registered a closed generic alternative. So in my test I am registering Repository&amp;lt;&amp;gt; for all IRepository&amp;lt;&amp;gt;. But I am also registering CustomerRepository with IRepository&amp;lt;Customer&amp;gt;. &lt;/p&gt;  &lt;p&gt;So with this I can have a general implementation but then provide specific implementations for those exceptional cases.&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:bb16ca5e-da93-40d4-b188-481503d30953\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;_container = &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Container&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;();&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;_container.Configure(x =&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;x.For(&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;typeof&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; (&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IRepository&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;lt;&amp;gt;)).Use(&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;typeof&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; (&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Repository&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;lt;&amp;gt;));&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;x.For&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IRepository&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Customer&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;&amp;gt;().Use&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;CustomerRepository&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;});&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;Now for the tests pay close attention to the request to the container. Notice how the user of the container doesn\xE2\x80\x99t need to know if the implementation they are using is the generic or the specific alternative. Isn\xE2\x80\x99t that sweet!&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:70061410-0036-47d8-a931-39698dcf225c\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;[&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Test&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;]&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; IRepository_book_should_resolve_to_Repository_book()&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; repository = _container.GetInstance&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IRepository&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Book&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;&amp;gt;();&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;repository.ShouldBeType&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Repository&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Book&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;&amp;gt;();&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;[&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Test&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;]&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; IRepository_customer_should_resolve_to_Customer_Repository()&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; repository = _container.GetInstance&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IRepository&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Customer&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;&amp;gt;();&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;repository.ShouldBeType&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;CustomerRepository&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;Naturally there are tons of other things Structure Map does but this was just a brief intro to some of the basics. I plan on blogging a bit more on some of the other neat features that make SM my IoC tool of choice. &lt;/p&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-2158137551946840458?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2010/05/structure-map-basics-26.html</link><author>noreply@blogger.com (JB)</author><thr:total>1</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-7329620515663941116</guid><pubDate>Thu, 20 May 2010 21:49:00 +0000</pubDate><atom:updated>2010-05-20T14:49:02.225-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>Podcast</category><category domain='http://www.blogger.com/atom/ns#'>F#</category><category domain='http://www.blogger.com/atom/ns#'>Virtual Brown Bag</category><title>Visual Brown Bag 5/20/2010</title><description>&lt;p&gt;We had another great turnout today so a big thanks to everyone who attended. And although I didn\xE2\x80\x99t get to share my \xE2\x80\x98Monad\xE2\x80\x99, Claudio mentioned monad. My goal now is to mention monad with every show. Mission Accomplished.&lt;/p&gt;  &lt;h3&gt;Dynamics&lt;/h3&gt;  &lt;p&gt;Today Claudio did a great demo on some of the dynamic features with .Net 4. He recently gave a dynamics presentation at the Visual Studio 2010 Launch Event in Dallas. &lt;/p&gt;  &lt;p&gt;Claudio did a blog post on his blog which can be read here : &lt;a href=\"http://claudiolassala.spaces.live.com/blog/cns!E2A4B22308B39CD2!3110.entry\"&gt;http://claudiolassala.spaces.live.com/blog/cns!E2A4B22308B39CD2!3110.entry&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;I plan on getting the material and integrating that with my Learning CSharp project on GitHub.&lt;/p&gt;  &lt;p&gt;Claudio talked through using the dynamic keyword, Expando object, and your own DynamicObject implementation. He also did it with learning tests which is awesome.&lt;/p&gt;  &lt;h3&gt;Wizards of Smart Podcast&lt;/h3&gt;  &lt;p&gt;I also talked a bit about the Wizards of Smart podcast Ryan and I started last week. Episodes 1 and 2 are out. I covered a bit on what tools / apps / websites we are using to make the podcast.&lt;/p&gt;  &lt;p&gt;Episode 1 can be found here : &lt;a href=\"http://www.theabsentmindedcoder.com/2010/05/wizards-of-smart-podcast-episode-1.html\"&gt;http://www.theabsentmindedcoder.com/2010/05/wizards-of-smart-podcast-episode-1.html&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Episode 2 can be found here : &lt;a href=\"http://www.theabsentmindedcoder.com/2010/05/wizards-of-smart-podcast-episode-2.html\"&gt;http://www.theabsentmindedcoder.com/2010/05/wizards-of-smart-podcast-episode-2.html&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;The blog post about the tools can be found here : &lt;a href=\"http://www.theabsentmindedcoder.com/2010/05/tools-of-our-podcasting.html\"&gt;http://www.theabsentmindedcoder.com/2010/05/tools-of-our-podcasting.html&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;I plan on doing a post on my switch from WavePad&amp;#160; to Mixcraft which Claudio and I talked about.&lt;/p&gt;  &lt;p&gt;Mixcraft can be found here : &lt;a href=\"http://www.acoustica.com/mixcraft/\"&gt;http://www.acoustica.com/mixcraft/&lt;/a&gt;&lt;/p&gt;  &lt;h3&gt;Greg Young Webcasts&lt;/h3&gt;  &lt;p&gt;George brought up the news that Greg Young will be offering free webcasts in the summer. Greg Young is the genius behind CQRS and is a leading voice in DDD.&lt;/p&gt;  &lt;p&gt;For more info on Greg Young check out one of my favorite podcasts ever : Our Grand Failure - &lt;a href=\"http://herdingcode.com/?p=189\"&gt;http://herdingcode.com/?p=189&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;He also blogs at codebetter.com : &lt;a href=\"http://codebetter.com/blogs/gregyoung/default.aspx\"&gt;http://codebetter.com/blogs/gregyoung/default.aspx&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;His post on the webcasts can be read at&amp;#160; &lt;a href=\"http://codebetter.com/blogs/gregyoung/archive/2010/05/19/webcasts.aspx\"&gt;http://codebetter.com/blogs/gregyoung/archive/2010/05/19/webcasts.aspx&lt;/a&gt;&lt;/p&gt;  &lt;h4&gt;Community for FSharp Meeting + Bistro&lt;/h4&gt;  &lt;p&gt;Ryan held another Community for FSharp (&lt;a href=\"http://www.communityforfsharp.net/\"&gt;http://www.communityforfsharp.net/&lt;/a&gt;) meeting this week. This week was a chance for people to share what they are working on with F#. &lt;/p&gt;  &lt;p&gt;Chris Marinos shared F# Koans.&lt;/p&gt;  &lt;p&gt;And what I shared at the VBB was the incredibly interesting Bistro framework. &lt;/p&gt;  &lt;p&gt;Bistro is an MVC implementation in F# (basically) For more info check out : &lt;a href=\"http://bistroframework.org/index.php?title=FSharp\"&gt;http://bistroframework.org/index.php?title=FSharp&lt;/a&gt;&lt;/p&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-7329620515663941116?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2010/05/visual-brown-bag-5202010.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-1771049466700468781</guid><pubDate>Thu, 20 May 2010 19:05:00 +0000</pubDate><atom:updated>2010-05-20T12:05:26.278-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>Presentation</category><category domain='http://www.blogger.com/atom/ns#'>C#</category><title>C# Sig Presentation - Evolve Your Code</title><description>&lt;p&gt;I gave this presentation back in March but I forgot to blog about it!&lt;/p&gt;  &lt;p&gt;So here is the quick run down.&lt;/p&gt;  &lt;p&gt;Evolve Your Code was a presentation I gave first at Houston Techfest. &lt;/p&gt;  &lt;p&gt;The abstract is:&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;Fluent NHibernate, HTML Helper &amp;amp; Input Builders, and Automapper (and others) use extension methods, fluent interfaces, and expressions to make a more approachable, readable, and flexible coding framework. These tools aren\xE2\x80\x99t restricted to the elite third party frameworks. You too can use these techniques to evolve your code.&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;But really the abstract should be:&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;Learn how to use extension methods, lambdas, expressions, and fluent interfaces to make more approachable, readable, and flexible code. We will learn the basics of these .Net 3.5 features along with applying the features to implement design patterns.&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;The code and slide show can be found at : &lt;a href=\"http://github.com/RookieOne/Evolve-Your-Code\"&gt;http://github.com/RookieOne/Evolve-Your-Code&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;There were some issues with opening the solution file. The problem is that the Visual Studio selector can figure out what version to open. If you open the solution file from Visual Studio, there isn\xE2\x80\x99t any problems.&lt;/p&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-1771049466700468781?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2010/05/c-sig-presentation-evolve-your-code.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-4495679922610077838</guid><pubDate>Mon, 17 May 2010 14:58:00 +0000</pubDate><atom:updated>2010-05-17T07:58:45.995-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>Podcast</category><category domain='http://www.blogger.com/atom/ns#'>Wizards of Smart</category><title>Wizards of Smart Podcast \xE2\x80\x93 Episode 2</title><description>&lt;p&gt;Episode 2 is thrown together bits of conversation Ryan and I had after the recording of Episode 1. Based on recommendations from Claudio Lassala and Ben Scheirman I balanced the L/R (or at least tried to). I also added an intro. I realized afterwards I need an outro so expect that change for Episode 3.&lt;/p&gt;  &lt;p&gt;I think the best part of the conversation comes towards the end of the podcast but I would like to hear from any / all listeners. &lt;/p&gt;  &lt;p&gt;I was thinking Ryan and I should target smaller podcasts. Instead of a 40 min \xE2\x80\x93 hour podcast, we should just have more, smaller podcasts. What do you think?&lt;/p&gt;  &lt;p&gt;Anyway, enjoy the podcast.&lt;/p&gt;  &lt;div&gt;&amp;#160;&lt;/div&gt;  &lt;div&gt;&amp;#160;&lt;/div&gt;  &lt;div&gt;&lt;object classid=\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\" codebase=\"http://fpdownload.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,0,0\" width=\"210\" height=\"25\" id=\"mp3playerlightsmallv3\" align=\"middle\"&gt; \t&lt;param name=\"allowScriptAccess\" value=\"sameDomain\" /&gt; \t&lt;param name=\"movie\" value=\"http://www.podbean.com/podcast-audio-video-blog-player/mp3playerlightsmallv3.swf?audioPath=http://rookieone.podbean.com/mf/play/v97qhb/episode2.mp3&amp;amp;autoStart=no\" /&gt; \t&lt;param name=\"quality\" value=\"high\" /&gt;&lt;param name=\"bgcolor\" value=\"#ffffff\" /&gt;&lt;param name=\"wmode\" value=\"transparent\" /&gt; \t&lt;embed src=\"http://www.podbean.com/podcast-audio-video-blog-player/mp3playerlightsmallv3.swf?audioPath=http://rookieone.podbean.com/mf/play/v97qhb/episode2.mp3&amp;amp;autoStart=no\" quality=\"high\" width=\"210\" height=\"25\" name=\"mp3playerlightsmallv3\" align=\"middle\" allowScriptAccess=\"sameDomain\" wmode=\"transparent\" type=\"application/x-shockwave-flash\" pluginspage=\"http://www.macromedia.com/go/getflashplayer\" /&gt;&lt;/embed&gt; \t&lt;/object&gt;    &lt;br /&gt;&lt;a style=\"border-bottom-style: none; padding-left: 41px; font-family: arial, helvetica, sans-serif; color: #2da274; font-size: 11px; font-weight: normal; text-decoration: none\" href=\"http://www.podbean.com\"&gt;Powered by Podbean.com&lt;/a&gt; &lt;/div&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-4495679922610077838?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2010/05/wizards-of-smart-podcast-episode-2.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-6895911475036082954</guid><pubDate>Fri, 14 May 2010 19:51:00 +0000</pubDate><atom:updated>2010-05-14T12:51:47.227-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>Podcast</category><category domain='http://www.blogger.com/atom/ns#'>Wizards of Smart</category><title>The Tools of our Podcasting</title><description>&lt;p&gt;One might ask, How are we creating this podcast? And that would be a good question.&lt;/p&gt;  &lt;p&gt;Ryan is in Bellingham, Washington and I am in Katy, Texas. So we started our research on how we can record ourselves by examining different Skype add-ins. &lt;/p&gt;  &lt;p&gt;&lt;a href=\"http://lh3.ggpht.com/_jZ1HIkVkz48/S-2pzUSwiaI/AAAAAAAAAHk/KWnemO10O3E/s1600-h/skype_logo%5B3%5D.png\"&gt;&lt;img style=\"border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px\" title=\"skype_logo\" border=\"0\" alt=\"skype_logo\" src=\"http://lh3.ggpht.com/_jZ1HIkVkz48/S-2pzs2LfnI/AAAAAAAAAHo/_1TyJQmzGEA/skype_logo_thumb%5B1%5D.png?imgmax=800\" width=\"105\" height=\"47\" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;On Monday we spent 2 hours trying different add-ins and configurations. We finally settled on using CallGraph &lt;a href=\"http://callgraph.biz/\"&gt;http://callgraph.biz/&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;img style=\"border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px\" title=\"callGraph\" border=\"0\" alt=\"callGraph\" src=\"http://lh5.ggpht.com/_jZ1HIkVkz48/S-2pzirJ5SI/AAAAAAAAAHs/SzNGELb3N9s/callGraph%5B3%5D.png?imgmax=800\" width=\"96\" height=\"96\" /&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;After we recorded our conversation, I went about looking for different sound editing software. I ran across WavePad and I could immediately become productive. &lt;/p&gt;  &lt;p&gt;WavePad is made by NCH Software and can be found @ &lt;a href=\"http://www.nch.com.au/wavepad/index.html\"&gt;http://www.nch.com.au/wavepad/index.html&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;a href=\"http://lh6.ggpht.com/_jZ1HIkVkz48/S-2pz54FazI/AAAAAAAAAHw/5DmZIKmd_JY/s1600-h/wavePad%5B3%5D.jpg\"&gt;&lt;img style=\"border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px\" title=\"wavePad\" border=\"0\" alt=\"wavePad\" src=\"http://lh4.ggpht.com/_jZ1HIkVkz48/S-2p0DJenfI/AAAAAAAAAH0/ukcaKATMxe0/wavePad_thumb%5B1%5D.jpg?imgmax=800\" width=\"150\" height=\"198\" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;After I had an edited down version of the conversation, I looked for a place to host the podcast. What I settled on for now is using PodBean.&lt;/p&gt;  &lt;p&gt;PodBean allows for some free hosting services. Find out more information @ &lt;a href=\"http://www.podbean.com/\"&gt;http://www.podbean.com/&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;a href=\"http://lh6.ggpht.com/_jZ1HIkVkz48/S-2p0XZjEVI/AAAAAAAAAH4/P0V0WW1phOM/s1600-h/podBean%5B3%5D.png\"&gt;&lt;img style=\"border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px\" title=\"podBean\" border=\"0\" alt=\"podBean\" src=\"http://lh6.ggpht.com/_jZ1HIkVkz48/S-2p0v5a65I/AAAAAAAAAH8/ul8LpmEtDoY/podBean_thumb%5B1%5D.png?imgmax=800\" width=\"240\" height=\"52\" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;I can then host the podcast at PodBean and then provide a little player on this site. &lt;/p&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-6895911475036082954?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2010/05/tools-of-our-podcasting.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-8956373976184798360</guid><pubDate>Fri, 14 May 2010 19:30:00 +0000</pubDate><atom:updated>2010-05-14T12:34:14.242-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>Podcast</category><category domain='http://www.blogger.com/atom/ns#'>Wizards of Smart</category><title>Wizards of Smart Podcast \xE2\x80\x93 Episode 1</title><description>&lt;div&gt;Ryan Riley and I had talked about doing a podcast for years now. We tend to have great conversations (well we think they are great &lt;img alt=\":)\" src=\"http://www.podbean.com/smilies/icon_smile.gif\" /&gt; ) about technology and programming. The only issue we had was that afterwards there was no record of the conversation.&lt;/div&gt;  &lt;p&gt;Well we finally hit the record button and started our own podcast. Since we are developers we approach everything from an iterative process. This is a rough cut of the first episode. We will continue to work at the process and make each episode better than the one before.&lt;/p&gt;  &lt;p&gt;Both of us enjoyed doing the podcast and look forward to doing more in the future.&lt;/p&gt;  &lt;p&gt;Actually the conversation went on longer than this and is being molded into the second episode which I will post once its done.&lt;/p&gt;  &lt;p&gt;Let us know what you think! &lt;/p&gt;  &lt;div&gt;&amp;#160;&lt;/div&gt;  &lt;div&gt;&lt;object classid=\"clsid:d27cdb6e-ae6d-11cf-96b8-444553540000\" codebase=\"http://fpdownload.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,0,0\" width=\"210\" height=\"25\" id=\"mp3playerlightsmallv3\" align=\"middle\"&gt; \t&lt;param name=\"allowScriptAccess\" value=\"sameDomain\" /&gt; \t&lt;param name=\"movie\" value=\"http://www.podbean.com/podcast-audio-video-blog-player/mp3playerlightsmallv3.swf?audioPath=http://rookieone.podbean.com/mf/play/in2hre/episode1.mp3&amp;amp;autoStart=no\" /&gt; \t&lt;param name=\"quality\" value=\"high\" /&gt;&lt;param name=\"bgcolor\" value=\"#ffffff\" /&gt;&lt;param name=\"wmode\" value=\"transparent\" /&gt; \t&lt;embed src=\"http://www.podbean.com/podcast-audio-video-blog-player/mp3playerlightsmallv3.swf?audioPath=http://rookieone.podbean.com/mf/play/in2hre/episode1.mp3&amp;amp;autoStart=no\" quality=\"high\" width=\"210\" height=\"25\" name=\"mp3playerlightsmallv3\" align=\"middle\" allowScriptAccess=\"sameDomain\" wmode=\"transparent\" type=\"application/x-shockwave-flash\" pluginspage=\"http://www.macromedia.com/go/getflashplayer\" /&gt;&lt;/embed&gt; \t&lt;/object&gt;    &lt;br /&gt;&lt;a style=\"border-bottom-style: none; padding-left: 41px; font-family: arial, helvetica, sans-serif; color: #2da274; font-size: 11px; font-weight: normal; text-decoration: none\" href=\"http://www.podbean.com\"&gt;Powered by Podbean.com&lt;/a&gt; &lt;/div&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-8956373976184798360?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2010/05/wizards-of-smart-podcast-episode-1.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-5762900632890109166</guid><pubDate>Thu, 13 May 2010 21:26:00 +0000</pubDate><atom:updated>2010-05-13T14:26:29.804-07:00</atom:updated><title>Virtual Brown Bag 5/13/2010</title><description>&lt;p&gt;I am going to try and do a better job capturing what we talk about and blog the notes the day of the VBB.&lt;/p&gt;  &lt;p&gt;We started the VBB off with me doing a walkthrough of some of the learning tests and blog posts surrounding MongoDB and NoRM.&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;MongoDB :&lt;a href=\"http://www.mongodb.org/\"&gt;http://www.mongodb.org/&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;NoRM (pronounced no-ORM and not norm) : &lt;a href=\"http://github.com/atheken/NoRM\"&gt;http://github.com/atheken/NoRM&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;My blog posts can be found here:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Learning Mongo DB and NoRM : &lt;a href=\"http://www.theabsentmindedcoder.com/2010/05/learning-mongo-db-and-norm.html\"&gt;http://www.theabsentmindedcoder.com/2010/05/learning-mongo-db-and-norm.html&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;Basic NoRM Ids : &lt;a href=\"http://www.theabsentmindedcoder.com/2010/05/basic-norm-ids.html\"&gt;http://www.theabsentmindedcoder.com/2010/05/basic-norm-ids.html&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;And you can get all the code in my learning git hub repository found @ &lt;a href=\"http://github.com/RookieOne/Learning\"&gt;http://github.com/RookieOne/Learning&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Azam from &lt;a href=\"http://www.highoncoding.com/\"&gt;High On Coding&lt;/a&gt; shared via chat his learning project called SKOOL. It combines MongoDB and MVC and can be found @ &lt;a href=\"http://github.com/azamsharp/SKOOL\"&gt;http://github.com/azamsharp/SKOOL&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Azam wanted to communicate that it is in the very early stages.&lt;/p&gt;  &lt;p&gt;George Mauer shared some NHibernate Internals focusing on the AbstractEntityPersister. George also shared some of the Dynamic Property support built into NHibernate.&lt;/p&gt;  &lt;p&gt;Chad (sorry I forgot to write down his last name) showed off his first experiments with Moles. Moles is an Isolation framework for .Net provided by Microsoft Research. &lt;/p&gt;  &lt;p&gt;Learn more at &lt;a href=\"http://research.microsoft.com/en-us/projects/moles/\"&gt;http://research.microsoft.com/en-us/projects/moles/&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;And at the end I briefly shared my Extension Methods post : &lt;a href=\"http://www.theabsentmindedcoder.com/2010/05/using-extension-methods-to-remove.html\"&gt;http://www.theabsentmindedcoder.com/2010/05/using-extension-methods-to-remove.html&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Claudio promised to share some of his dynamic goodness that he is presenting at Dallas this week. &lt;/p&gt;  &lt;p&gt;As for me, I will continue to do my thing and share whatever is on my mind.&lt;/p&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-5762900632890109166?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2010/05/virtual-brown-bag-5132010.html</link><author>noreply@blogger.com (JB)</author><thr:total>1</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-4612482850962367672</guid><pubDate>Thu, 13 May 2010 21:11:00 +0000</pubDate><atom:updated>2010-05-13T14:11:44.606-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>Learning</category><category domain='http://www.blogger.com/atom/ns#'>C#</category><title>Distinct with Func&lt;T,T,bool&gt;</title><description>&lt;p&gt;When you go to look for the ability to run a Distinct Linq query using a func and it isn\xE2\x80\x99t there\xE2\x80\xA6 it causes some confusion.&lt;/p&gt;  &lt;p&gt;&lt;a href=\"http://lh6.ggpht.com/_jZ1HIkVkz48/S-xrDFWJs6I/AAAAAAAAAHU/VmZQoKe5ncM/s1600-h/image%5B3%5D.png\"&gt;&lt;img style=\"border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px\" title=\"image\" border=\"0\" alt=\"image\" src=\"http://lh5.ggpht.com/_jZ1HIkVkz48/S-xrDXUPuBI/AAAAAAAAAHY/T3nFz-Yyy28/image_thumb%5B1%5D.png?imgmax=800\" width=\"551\" height=\"91\" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;To get around this troublesome omission I had to create my own extension.&lt;/p&gt;  &lt;p&gt;I first created my own implementation of IEqualityComparer&amp;lt;T&amp;gt; that will utilize a func to do the equals comparison.&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:4d1ce2b4-62b0-462d-992e-f5348ddc9494\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;class&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;FuncEqualityComparer&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;lt;T&amp;gt; : &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IEqualityComparer&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;lt;T&amp;gt;&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; FuncEqualityComparer(&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;Func&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;lt;T, T, &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;bool&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt; func)&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;_func = func;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;readonly&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;Func&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;lt;T, T, &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;bool&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt; _func;&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;bool&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; Equals(T x, T y)&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;return&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; _func(x, y);&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;int&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; GetHashCode(T obj)&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;return&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#bda265\"&gt;0&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;Next I will need an extension method off of IEnumerable&amp;lt;T&amp;gt;.&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:4c9da583-cea1-4cd7-aafb-406405889e3b\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;static&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IEnumerable&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;lt;T&amp;gt; Distinct&amp;lt;T&amp;gt;(&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;this&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IEnumerable&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;lt;T&amp;gt; items, &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;Func&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;lt;T, T, &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;bool&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt; func)&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;return&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; items.Distinct(&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;FuncEqualityComparer&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;lt;T&amp;gt;(func));&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;Now when I check to see what Distinct options are available I see my new Func extension.&lt;/p&gt;  &lt;p&gt;&lt;a href=\"http://lh5.ggpht.com/_jZ1HIkVkz48/S-xrDic24gI/AAAAAAAAAHc/ewzjpFAmgD0/s1600-h/image%5B7%5D.png\"&gt;&lt;img style=\"border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px\" title=\"image\" border=\"0\" alt=\"image\" src=\"http://lh5.ggpht.com/_jZ1HIkVkz48/S-xrDxZd_YI/AAAAAAAAAHg/Ol84bazJewg/image_thumb%5B3%5D.png?imgmax=800\" width=\"566\" height=\"100\" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;And to test whether this new distinct is working:&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:5e981d5b-e652-477e-87bf-012770742477\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;[&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Test&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;]&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; should_return_distinct_items()&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; jedis = &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;[]&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Jedi&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; {Name = &lt;/span&gt;&lt;span style=\"background:#161616;color:#668f5f\"&gt;&amp;quot;Mace Windu&amp;quot;}&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;,&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Jedi&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; {Name = &lt;/span&gt;&lt;span style=\"background:#161616;color:#668f5f\"&gt;&amp;quot;Mace Windu&amp;quot;}&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;,&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Jedi&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; {Name = &lt;/span&gt;&lt;span style=\"background:#161616;color:#668f5f\"&gt;&amp;quot;Luke Skywalker&amp;quot;}&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;,&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Jedi&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; {Name = &lt;/span&gt;&lt;span style=\"background:#161616;color:#668f5f\"&gt;&amp;quot;Yoda&amp;quot;}&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;,&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Jedi&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; {Name = &lt;/span&gt;&lt;span style=\"background:#161616;color:#668f5f\"&gt;&amp;quot;Yoda&amp;quot;}&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;,&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;};&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;IEnumerable&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Jedi&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt; distinct = jedis.Distinct((j1, j2) =&amp;gt; j1.Name == j2.Name);&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;distinct.Count().ShouldBe(&lt;/span&gt;&lt;span style=\"background:#161616;color:#bda265\"&gt;3&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;);&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;All this code can be found in my Learning Repository \xE2\x80\x93&amp;gt; Learning CSharp solution.&lt;/p&gt;  &lt;p&gt;&lt;a href=\"http://github.com/RookieOne/Learning\"&gt;http://github.com/RookieOne/Learning&lt;/a&gt;&lt;/p&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-4612482850962367672?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2010/05/distinct-with-func.html</link><author>noreply@blogger.com (JB)</author><thr:total>1</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-9107859230725001227</guid><pubDate>Thu, 13 May 2010 16:01:00 +0000</pubDate><atom:updated>2010-05-13T09:02:17.055-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>C#</category><title>Using Extension Methods to remove dependencies</title><description>&lt;p&gt;Yesterday I had a discussion with a co-worker about extension methods, he was concerned with some of the extension methods I was using and emailed this guidance when to NOT use an extension method:&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;When an instance method would introduce a dependency on some type, but such a dependency would break dependency management rules. For example, a dependency from String to System.Uri is probably not desirable, and so String.ToUri() instance method returning System.Uri would be the wrong design from a dependency management perspective. A static extension method Uri.ToUri(this string str) returning System.Uri would be a much better design.&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;I was confused because I read that guidance and I think that is a perfect time to use an extension method. I asked where he got the guidance and he set me the following links:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;&lt;a href=\"http://www.amazon.com/gp/product/0321545613?ie=UTF8&amp;amp;tag=bradabramsblo-20&amp;amp;link_code=wql&amp;amp;camp=212361&amp;amp;creative=380601\"&gt;Brad Abrams: Framework Design Guidelines: Conventions, Idioms, and Patterns for Reusable .NET Libraries&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=\"http://blogs.msdn.com/brada/archive/2009/01/12/framework-design-guidelines-extension-methods.aspx\"&gt;http://blogs.msdn.com/brada/archive/2009/01/12/framework-design-guidelines-extension-methods.aspx&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;If you look at the second link you see that in fact the guidance is FOR when to use extension methods. So apparently there was just a miscommunication on what the guidance was saying.&lt;/p&gt;  &lt;p&gt;Here is my feeble attempt at explaining what the guidance is saying. &lt;/p&gt;  &lt;p&gt;All the code can be found in my Learning GitHub Repository and the Learning CSharp solution @ &lt;a href=\"http://github.com/RookieOne/Learning\"&gt;http://github.com/RookieOne/Learning&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Suppose we have a class Foo. And with Foo we have a method \xE2\x80\x98Whatever\xE2\x80\x99 that returns a type Bar. Normally we would do something like this:&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:2fee103e-a24e-4b4b-a6f0-f8a945208688\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;class&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;BadFoo&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Bar&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; Whatever()&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;{\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;return&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;null&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;By writing our method this way, we make the BadFoo class dependent on the Bar namespace / assembly. When someone uses a BadFoo class they get to see the Whatever method and not realize they are going to also be dependent on the Bar namespace / assembly.&lt;/p&gt;  &lt;p&gt;&lt;a href=\"http://lh4.ggpht.com/_jZ1HIkVkz48/S-wiOb3SWdI/AAAAAAAAAGs/nFOxplMUEsU/s1600-h/image%5B4%5D.png\"&gt;&lt;img style=\"border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px\" title=\"image\" border=\"0\" alt=\"image\" src=\"http://lh3.ggpht.com/_jZ1HIkVkz48/S-wiOp_0OKI/AAAAAAAAAGw/5KxSjv3gR7g/image_thumb%5B2%5D.png?imgmax=800\" width=\"280\" height=\"150\" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;&lt;a href=\"http://lh5.ggpht.com/_jZ1HIkVkz48/S-wiO3j9uDI/AAAAAAAAAG0/AEwaC5Dhu2Q/s1600-h/image%5B8%5D.png\"&gt;&lt;img style=\"border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px\" title=\"image\" border=\"0\" alt=\"image\" src=\"http://lh6.ggpht.com/_jZ1HIkVkz48/S-wiPP0lRvI/AAAAAAAAAG4/sAT0DEkKCwc/image_thumb%5B4%5D.png?imgmax=800\" width=\"432\" height=\"86\" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;Instead of writing the Whatever method as an &lt;strong&gt;instance&lt;/strong&gt; method, we can write the method as an &lt;strong&gt;extension&lt;/strong&gt;.&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:720b6198-a432-4d49-addd-1b1413e0484f\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;static&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;class&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;FooExtensions&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;static&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Bar&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; Whatever(&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;this&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;GoodFoo&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; f)&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;return&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;null&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;a href=\"http://lh4.ggpht.com/_jZ1HIkVkz48/S-wiPRG-23I/AAAAAAAAAG8/OggL9B8aViU/s1600-h/image%5B12%5D.png\"&gt;&lt;img style=\"border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px\" title=\"image\" border=\"0\" alt=\"image\" src=\"http://lh4.ggpht.com/_jZ1HIkVkz48/S-wiPj4BHtI/AAAAAAAAAHA/2booV74CIGs/image_thumb%5B6%5D.png?imgmax=800\" width=\"365\" height=\"209\" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;I now can see that the Whatever method is clearly an extension method off of Foo. And yes, if I use the method I will then need the Bar namespace / assembly, etc. The difference is that with an extension method it is more of an opt in scenario. I can have users of Foo that don\xE2\x80\x99t need the Bar assembly nor the Whatever method. &lt;/p&gt;  &lt;p&gt;This is sort of hard to explain but I am giving it my best shot. :) Maybe some whiteboarding will help.&lt;/p&gt;  &lt;table border=\"0\" cellspacing=\"0\" cellpadding=\"2\" width=\"400\"&gt;&lt;tbody&gt;     &lt;tr&gt;       &lt;td valign=\"top\" width=\"200\"&gt;&lt;a href=\"http://lh3.ggpht.com/_jZ1HIkVkz48/S-wiQCPWb3I/AAAAAAAAAHE/2zmm9z-R6gU/s1600-h/IMG_0389%5B3%5D.jpg\"&gt;&lt;img style=\"border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px\" title=\"IMG_0389\" border=\"0\" alt=\"IMG_0389\" src=\"http://lh6.ggpht.com/_jZ1HIkVkz48/S-wiQQQYJ5I/AAAAAAAAAHI/5nJ_QssxepA/IMG_0389_thumb%5B1%5D.jpg?imgmax=800\" width=\"359\" height=\"270\" /&gt;&lt;/a&gt; &lt;/td&gt;        &lt;td valign=\"top\" width=\"200\"&gt;&lt;a href=\"http://lh6.ggpht.com/_jZ1HIkVkz48/S-wiQoerDWI/AAAAAAAAAHM/AmfEcI6rpYs/s1600-h/IMG_0390%5B3%5D.jpg\"&gt;&lt;img style=\"border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px\" title=\"IMG_0390\" border=\"0\" alt=\"IMG_0390\" src=\"http://lh5.ggpht.com/_jZ1HIkVkz48/S-wiQ_9R6tI/AAAAAAAAAHQ/Do6JXcmAykE/IMG_0390_thumb%5B1%5D.jpg?imgmax=800\" width=\"363\" height=\"273\" /&gt;&lt;/a&gt; &lt;/td&gt;     &lt;/tr&gt;   &lt;/tbody&gt;&lt;/table&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;Without the extension method, the Foo.dll has to reference the Bar.dll. If we instead moved the Whatever method out into an extension method in the X.dll we can see that Foo.dll no longer needs to reference the Bar.dll.   &lt;br /&gt;&lt;/p&gt;  &lt;p&gt;Anyway, I like extension methods and think there is a lot of misconceptions surrounding when and how to use them. I think a more interesting topic for extension methods is limiting their scope in order to provide bounded context specific operations. This \xE2\x80\x98removing of dependencies\xE2\x80\x99 aspect is just part of that topic.&lt;/p&gt;  &lt;p&gt;Again check out some of the code in my Learning solution &lt;a href=\"http://github.com/RookieOne/Learning\"&gt;http://github.com/RookieOne/Learning&lt;/a&gt;&lt;/p&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-9107859230725001227?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2010/05/using-extension-methods-to-remove.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-6595086496472380951</guid><pubDate>Wed, 12 May 2010 18:19:00 +0000</pubDate><atom:updated>2010-05-12T11:19:21.119-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>MongoDB</category><category domain='http://www.blogger.com/atom/ns#'>Learning</category><category domain='http://www.blogger.com/atom/ns#'>NoRM</category><title>Basic NoRM Ids</title><description>&lt;p&gt;Again I want to reiterate I am by no means an expert at Mongo DBs or NoRM, but I am sure there are tons of people like me looking for some of the basics. And maybe some of the things I learn will help others.&lt;/p&gt;  &lt;p&gt;When you start with NoRM you might quickly discover that if you don\xE2\x80\x99t have an id for your object, you can\xE2\x80\x99t insert or update that object. &lt;/p&gt;  &lt;p&gt;When you try to insert an object without an identifier, you receive an MongoException that says:&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;This collection does not accept insertions/updates, this is due to the fact that the collection's type &amp;lt;TYPE&amp;gt; does not specify an identifier property&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;So how can we specify an identifier property?&lt;/p&gt;  &lt;p&gt;The basic methods include&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;Use Id property of ObjectId type &lt;/li&gt;    &lt;li&gt;Use Guid property type and identify with MongoIdentifier attribute&lt;/li&gt;    &lt;li&gt;Use Guid property type and map as id with MongoConfigurationMap&lt;/li&gt; &lt;/ul&gt;  &lt;h3&gt;ObjectIds&lt;/h3&gt;  &lt;p&gt;The easy method is to use a property of type ObjectId (NoRM type) and named Id. In my learning project I am using this with Book.&lt;/p&gt; &lt;a href=\"http://11011.net/software/vspaste\"&gt;&lt;/a&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:3d4cc225-4253-4031-aa92-6b3f344dd534\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;class&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Book&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;ObjectId&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; Id { &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;get&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;set&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;; }&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;string&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; Title { &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;get&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;set&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;; }&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;string&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; Author { &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;get&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;set&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;; }&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;This property is also set once you insert a new book into a collection as demonstrated here:&lt;/p&gt;  &lt;p&gt;   &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:ee3e478e-7baf-464a-93ee-463e38ce2a15\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;[&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;SetUp&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;]&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; setup()&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Mongo&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; mongo = &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;MongoTestHelper&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;.create_new_database_connection();&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;mongo.Database.DropCollection(&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;typeof&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; (&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Book&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;).Name);&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;_book = &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Book&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;();&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;mongo.GetCollection&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Book&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;().Insert(_book);&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:4175ac5e-2e52-425b-9b51-ee28ff3a6106\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;[&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Test&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;]&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; should_set_id_on_insert()&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;_book.Id.ShouldNotBe(&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;ObjectId&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;.Empty);&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;h3&gt;Guid + MongoIdentifier&lt;/h3&gt;  &lt;p&gt;Another method is to use a Guid and then mark that Id property with a MongoIdentifier Attribute. In my learning project I am using this with Movie.&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:468008bb-3b18-4abb-b507-7deb3c29090e\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;class&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Movie&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; Movie()&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;Id = &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;Guid&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;.NewGuid();&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;[&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;MongoIdentifier&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;]&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;Guid&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; Id { &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;get&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;set&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;; }&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;string&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; Title { &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;get&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;set&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;; }&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;Notice that although I labeled the Id property with the MongoIdentifier attribute, it doesn\xE2\x80\x99t automatically get set. I have to set the id to a new guid in the constructor.&lt;/p&gt;  &lt;p&gt;Repeating the previous test shows that yes our movie can be inserted and the id set.&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:04393360-ce98-44bf-a546-7e5460bde64a\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;[&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;SetUp&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;]&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; setup()&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Mongo&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; mongo = &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;MongoTestHelper&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;.create_new_database_connection();&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;mongo.Database.DropCollection(&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;typeof&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; (&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Movie&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;).Name);&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;_movie = &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Movie&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;();&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;mongo.GetCollection&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Movie&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;().Insert(_movie);&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;   &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:bb26dbf1-e374-4ab9-aef0-182c4ab74649\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;[&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Test&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;]&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; should_set_id_on_insert()&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;_movie.Id.ShouldNotBe(&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;Guid&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;.Empty);&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/p&gt;  &lt;p&gt;This test really isn\xE2\x80\x99t that helpful since we set the new guid in the default constructor. Let\xE2\x80\x99s test that the Id can be read and set from the database.&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:914e48b8-2b15-421a-974e-146ef8d3eab2\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;[&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Test&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;]&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; should_read_and_set_id()&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;MongoQueryProvider&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; provider = &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;MongoTestHelper&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;.create_query_provider();&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Movie&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; movie = &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;MongoQuery&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Movie&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;(provider).First();&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;movie.Id.ShouldBe(_movie.Id);&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;h3&gt;Using Mongo Configuration Map&lt;/h3&gt;  &lt;p&gt;If you are like me and prefer the POCO lifestyle, you can use a MongoConfigurationMap to specify the identifier.&lt;/p&gt;  &lt;p&gt;In my learning project I am using this with Customer.&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:94211a58-3017-492e-85cd-a8efaa92c12d\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;class&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Customer&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; Customer()&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;Id = &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;Guid&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;.NewGuid();&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;Guid&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; Id { &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;get&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;set&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;; }&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;string&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; Name { &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;get&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;set&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;; }&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;And then I am creating a map for customer.&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:38b3ba6e-a57d-4d42-ac91-2e16a4f9a2b6\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;class&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;CustomerMap&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; : &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;MongoConfigurationMap&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; CustomerMap()&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;For&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Customer&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;(x =&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;x.IdIs(c =&amp;gt; c.Id);&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;x.ForProperty(c =&amp;gt; c.Name);&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;});&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;And the tests\xE2\x80\xA6&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:06684f44-1818-4ef6-a0eb-7e9e341a5250\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #161616; overflow: auto; padding: 2px 5px;\"&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;[&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;SetUp&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;]&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; setup()&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Mongo&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; mongo = &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;MongoTestHelper&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;.create_new_database_connection();&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;mongo.Database.DropCollection(&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;typeof&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; (&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Customer&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;).Name);&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;_customer = &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Customer&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;();&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;mongo.GetCollection&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Customer&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;().Insert(_customer);&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Customer&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; _customer;&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;[&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Test&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;]&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; should_read_and_set_id()&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;MongoQueryProvider&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; provider = &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;MongoTestHelper&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;.create_query_provider();&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Customer&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; customer = &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;MongoQuery&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Customer&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;&amp;gt;(provider).First();&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;customer.Id.ShouldBe(_customer.Id);&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;br&gt; &lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;[&lt;/span&gt;&lt;span style=\"background:#161616;color:#ff7400\"&gt;Test&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;]&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt; should_set_id()&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"background:#161616;color:#ffffff\"&gt;_customer.Id.ShouldNotBe(&lt;/span&gt;&lt;span style=\"background:#161616;color:#2b91af\"&gt;Guid&lt;/span&gt;&lt;span style=\"background:#161616;color:#ffffff\"&gt;.Empty);&lt;/span&gt;&lt;br&gt; &lt;span style=\"background:#161616;color:#ffffff\"&gt;}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;So those are three basic methods of setting an identifier for an object to be inserted or updated in a MongoDB with NoRM. All the code is in my learning git hub repository in the Learning_NoRM solution. The source can be found here : &lt;a href=\"http://github.com/RookieOne/Learning\"&gt;http://github.com/RookieOne/Learning&lt;/a&gt;&lt;/p&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-6595086496472380951?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2010/05/basic-norm-ids.html</link><author>noreply@blogger.com (JB)</author><thr:total>1</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-7218963224715322985</guid><pubDate>Tue, 11 May 2010 15:41:00 +0000</pubDate><atom:updated>2010-05-12T11:22:09.793-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>MongoDB</category><category domain='http://www.blogger.com/atom/ns#'>Learning</category><category domain='http://www.blogger.com/atom/ns#'>NoRM</category><title>Learning Mongo DB and NoRM</title><description>&lt;p&gt;I am currently working on a WPF application I will be using to manage our TFS system here at SolArc. Well it isn\xE2\x80\x99t for everyone, just for me (for now). I look at the TFS interface and I can\xE2\x80\x99t see what is important to me and doing the operations I want seems counter-intuitive. So what does a programmer do? He naturally writes an app for himself. :D&lt;/p&gt;  &lt;p&gt;The problem I am running into is that although the WorkItems API is nice, it isn\xE2\x80\x99t exactly what I want. I would rather not hit the SQL database as well. My current thoughts is to replicate the TFS workitems in a MongoDb. Naturally the WorkItems won\xE2\x80\x99t be \xE2\x80\x98workitems\xE2\x80\x99 but will actually be the shape and correct context for how we use them. For example we have work item types for Epic Scenarios, Scenarios, and Tasks. Anyway the nuts and bolts of the app can be another blog post once I have something more concrete to share.&lt;/p&gt;  &lt;p&gt;Since I am learning Mongo DB, I decided to write a post so that I will have something I can go back to when I inevitably forget how I got something to work.&lt;/p&gt;  &lt;p&gt;I got MongoDB at &lt;a href=\"http://www.mongodb.org/\"&gt;http://www.mongodb.org/&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Then in the bin folder I tried to run mongod. Unfortunately it failed because I had not created a data/db folder. That is the default location for MongoDB to store data files.&lt;/p&gt;  &lt;p&gt;&lt;a href=\"http://lh5.ggpht.com/_jZ1HIkVkz48/S-l6o9KcTNI/AAAAAAAAAGU/hLvkeGvzYKk/s1600-h/image%5B3%5D.png\"&gt;&lt;img style=\"border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px\" title=\"image\" border=\"0\" alt=\"image\" src=\"http://lh4.ggpht.com/_jZ1HIkVkz48/S-l6pJ9G79I/AAAAAAAAAGY/yuXneNDfba4/image_thumb%5B1%5D.png?imgmax=800\" width=\"507\" height=\"167\" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;After creating the folders on the C:\\ drive, I reran mongod and it started the database.&lt;/p&gt;  &lt;p&gt;&lt;a href=\"http://lh4.ggpht.com/_jZ1HIkVkz48/S-l6pV7hLrI/AAAAAAAAAGc/sSVVq9fJhGs/s1600-h/image%5B7%5D.png\"&gt;&lt;img style=\"border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px\" title=\"image\" border=\"0\" alt=\"image\" src=\"http://lh4.ggpht.com/_jZ1HIkVkz48/S-l6pmg0hcI/AAAAAAAAAGg/L452bxCuqz4/image_thumb%5B3%5D.png?imgmax=800\" width=\"600\" height=\"136\" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;I heard a lot about NoRM at Open Spaces so I figured I would use that to work with the MongoDB. &lt;/p&gt;  &lt;p&gt;I got NoRM at &lt;a href=\"http://github.com/atheken/NoRM\"&gt;http://github.com/atheken/NoRM&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;The NoRM tutorials I found online were using a different code base so the way I connected to the database was a bit different. My first test looks like:&lt;/p&gt;  &lt;p&gt;&lt;a href=\"http://lh4.ggpht.com/_jZ1HIkVkz48/S-l6qN_WThI/AAAAAAAAAGk/T9Xf2LCzz2c/s1600-h/image%5B11%5D.png\"&gt;&lt;img style=\"border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px\" title=\"image\" border=\"0\" alt=\"image\" src=\"http://lh5.ggpht.com/_jZ1HIkVkz48/S-l6qV_iVhI/AAAAAAAAAGo/2CWLo-693Ck/image_thumb%5B5%5D.png?imgmax=800\" width=\"496\" height=\"320\" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;I am sure there are better ways of writing the tests, but I thought I would share the minimum test that I wrote to prove that NoRM and MongoDB were working.&lt;/p&gt;  &lt;p&gt;I will be adding more learning tests and add them to the Learning_NoRM project in my Learning GitHub Repository.&lt;/p&gt;  &lt;p&gt;&lt;a href=\"http://github.com/RookieOne/Learning\"&gt;http://github.com/RookieOne/Learning&lt;/a&gt;&lt;/p&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-7218963224715322985?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2010/05/learning-mongo-db-and-norm.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-6022301124600006378</guid><pubDate>Mon, 10 May 2010 19:16:00 +0000</pubDate><atom:updated>2010-05-10T12:17:34.222-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>Alt Net</category><category domain='http://www.blogger.com/atom/ns#'>Presentation</category><category domain='http://www.blogger.com/atom/ns#'>Conference</category><category domain='http://www.blogger.com/atom/ns#'>Virtual Brown Bag</category><title>Houston Open Spaces</title><description>&lt;p&gt;It might be a week late, but I still want to share how awesome Houston Open Spaces was. I was concerned at first when I found out how small it was going to be and that certain intellectual giants were not going to be in attendance.&lt;/p&gt;  &lt;p&gt;But\xE2\x80\xA6 I knew I should have been prepared to be surprised. And I was.&lt;/p&gt;  &lt;p&gt;First of all, the WPF Workshop was well attended and I enjoyed presenting. Unfortunately all my recording attempts failed. :( But we live and learn. I figured out my issues with Camtasia. I made some newbie mistakes like not stopping the recording during every break. So although the talk isn\xE2\x80\x99t online or recorded, the slides and code are. They can be found on my GitHub: &lt;a href=\"http://github.com/RookieOne/JBsWpfExamples\"&gt;http://github.com/RookieOne/JBsWpfExamples&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;At the conference proper I had a blast and learned a lot. Open Spaces is truly a unique type of conference. The philosophies around the conference and the quality of people in attendance naturally lends itself to fantastic conversations and melding of the minds.&lt;/p&gt;  &lt;p&gt;Check out the site here : &lt;a href=\"http://altnethouston.com/\"&gt;http://altnethouston.com/&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;For those that could not attend, be sure to go check out the wiki (&lt;a href=\"http://houstonaltnet.pbworks.com/\"&gt;http://houstonaltnet.pbworks.com/&lt;/a&gt;). A lot of work was put into the wiki by attendees in order to share what was talked about in each of the sessions.&lt;/p&gt;  &lt;p&gt;I also brought my recorder to do some trial runs recording sessions. I was extremely pleased with the quality of the audio it recorded. Especially when you consider the size of the rooms and the volume levels people were talking at. &lt;/p&gt;  &lt;p&gt;Not all the sessions I attended I was able to record but check out these sessions for the audio.&lt;/p&gt;  &lt;p&gt;&lt;a href=\"http://houstonaltnet.pbworks.com/Polyglot\"&gt;http://houstonaltnet.pbworks.com/Polyglot&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;a href=\"http://houstonaltnet.pbworks.com/Virtual-Brown-Bag-One-Year-Later\"&gt;http://houstonaltnet.pbworks.com/Virtual-Brown-Bag-One-Year-Later&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;a href=\"http://houstonaltnet.pbworks.com/Design-Patterns\"&gt;http://houstonaltnet.pbworks.com/Design-Patterns&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;I convened the Polyglot and the VBB One Year later sessions. I then attended the Design Patterns and had a blast discussing patterns.&lt;/p&gt;  &lt;p&gt;Ruby was discussed a lot and it is on my short to-do list for this year. I was pointed to Why\xE2\x80\x99s Poignant Guide to Ruby (&lt;a href=\"http://mislav.uniqpath.com/poignant-guide/\"&gt;http://mislav.uniqpath.com/poignant-guide/&lt;/a&gt;) and have begun to go through this hilarious and informative online guide. The writing style and zaniness is exactly what I need in a technical manual. :D&lt;/p&gt;  &lt;p&gt;I also really enjoyed Rod Paddock\xE2\x80\x99s session on Movie Making as a metaphor for software. Although nothing concrete came out of the session, I left with a lot to think about. I might look into a book about movie making and see what I can learn. Sometimes you need to take a step back and re-examine what you think you know and this was a great session to challenge me with a new perspective on software development.&lt;/p&gt;  &lt;p&gt;I am looking forward to being active in next year\xE2\x80\x99s Open Spaces. I also think I will plan to attend the one in Seattle next year as well.&lt;/p&gt;  &lt;p&gt;So a big thank you to all those who put the conference together and those who attended. You guys rock!&lt;/p&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-6022301124600006378?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2010/05/houston-open-spaces.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-3753527079553564158</guid><pubDate>Mon, 05 Apr 2010 03:41:00 +0000</pubDate><atom:updated>2010-04-04T20:52:00.430-07:00</atom:updated><title>Houston Open Spaces \xE2\x80\x93 What it means to me</title><description>&lt;p&gt;As I began preparing for Houston\xE2\x80\x99s Alt .Net\xE2\x80\x99s Open Spaces 2010 Conference (&lt;a href=\"http://altnethouston.com/\"&gt;http://altnethouston.com/&lt;/a&gt;), I started to reflect on the year since the last Open Spaces. Last year, I had a decision to make: do I go to the already scheduled Nascar weekend with my Godfather\xE2\x80\x99s family or do I attend the inaugural Houston Open Spaces. After lots of time weighing my options, I opted to go to Open Spaces. I am glad I did.&lt;/p&gt;  &lt;p&gt;At Open Spaces I got lots of time to meet and interact with some of the greatest minds in .Net. Being able to talk to people like Jeremy Miller and Jeffrey Palermo was invaluable. Numerous sessions introduced me to brand new ways of thinking and solutions to common problems. To say I enjoyed Open Spaces would be an understatement.&lt;/p&gt;  &lt;p&gt;But for me, the biggest boon was that I recognized a huge gap in my professional career. Before Open Spaces I didn\xE2\x80\x99t even know who most of the heavy hitters in our professional community even were. Sad? Yes, but true. I decided at Open Spaces to start reaching out and pay more attention to the community. It was time to expand my understanding of the programming world. Also I knew it was time to start blogging more, sharing more, and presenting more. &lt;/p&gt;  &lt;p&gt;I think I have a knack for programming and was applying the appropriate principles and patterns; I just had difficulty expressing why I was coding the solution a certain way. I knew I was right but lacked the experience to express why. I remember when Ryan Riley (@panesofglass | &lt;a href=\"http://wizardsofsmart.net/\"&gt;http://wizardsofsmart.net/&lt;/a&gt;) came over to my computer one day and shared a Hanselminutes podcast featuring Uncle Bob. As I listened I got more and more excited. Uncle Bob was expressing in clear articulate terms exactly the principles I knew and coded by. I knew then that I needed to start learning the appropriate terms, definitions, and principles to express how to produce quality code.&lt;/p&gt;  &lt;p&gt;So at Open Spaces when Claudio Lassala (@claudiolassala | &lt;a href=\"http://claudiolassala.spaces.live.com/blog/\"&gt;http://claudiolassala.spaces.live.com/blog/&lt;/a&gt;) mentioned conducting Virtual Brown Bags, I quickly worked to volunteer and share what I was doing. The led to me being the substitute coordinator for several meetings. And now the one year anniversary for Virtual Brown Bags is coming up. What is a VBB?&lt;/p&gt;  &lt;p&gt;Check out Claudio on CodeCast: &lt;a href=\"http://www.code-magazine.com/codecast/index.aspx?messageid=d0e149ed-d8e7-44d2-bf7e-94d68ef4c1c3\"&gt;http://www.code-magazine.com/codecast/index.aspx?messageid=d0e149ed-d8e7-44d2-bf7e-94d68ef4c1c3&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;In short, we meet over Live Meeting every Thursday 12pm-1pm (central) and share whatever we are working on or feel like talking about. :) &lt;/p&gt;  &lt;p&gt;Every week I pressure myself to talk and share whatever I am working on. It has been great practice in talking as I code, expressing what and why I am doing something. I also surprised myself that every week I have something to share. I have a hard time sitting down and writing a blog post, but it\xE2\x80\x99s easy for me to plug into Live Meeting and just go over whatever code or blog post has my current attention. &lt;/p&gt;  &lt;p&gt;Beyond Virtual Brown Bags, I started to do public presentations at user groups and conferences. &lt;/p&gt;  &lt;p&gt;Here is the list of presentations I have done this last year:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;WPF Substance over Style - South Harris Dot Net User Group&lt;/li&gt;    &lt;li&gt;Evolve Your Code - Houston Tech Fest &amp;amp; C# SIG&lt;/li&gt;    &lt;ul&gt;     &lt;li&gt;INETA recorded this session (&lt;a title=\"http://live.ineta.org/Videos/Player.aspx?video=1ce91b60-5e4b-416d-9cb2-34740fdab8c6\" href=\"http://live.ineta.org/Videos/Player.aspx?video=1ce91b60-5e4b-416d-9cb2-34740fdab8c6\"&gt;http://live.ineta.org/Videos/Player.aspx?video=1ce91b60-5e4b-416d-9cb2-34740fdab8c6&lt;/a&gt;)&lt;/li&gt;   &lt;/ul&gt;    &lt;li&gt;WPF Input Validation \xE2\x80\x93 Houston Tech Fest (&lt;a href=\"http://www.theabsentmindedcoder.com/2009/09/houston-techfest.html\"&gt;http://www.theabsentmindedcoder.com/2009/09/houston-techfest.html&lt;/a&gt;)&lt;/li&gt;    &lt;li&gt;WPF in an Hour \xE2\x80\x93 EPOG &lt;/li&gt;    &lt;li&gt;Silverlight 4 \xE2\x80\x93 Aggieland DNUG&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;I also was able to do a podcast episode on CodeCast talking about Convention over Configuration:&lt;/p&gt;  &lt;p&gt;&lt;a title=\"http://www.code-magazine.com/codecast/index.aspx?messageid=0001bf99-1394-45c2-8949-388c673ac7a5\" href=\"http://www.code-magazine.com/codecast/index.aspx?messageid=0001bf99-1394-45c2-8949-388c673ac7a5\"&gt;http://www.code-magazine.com/codecast/index.aspx?messageid=0001bf99-1394-45c2-8949-388c673ac7a5&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;And I volunteered to conduct a free Advanced WPF Workshop. The links to the videos can be found in my blog post: &lt;a href=\"http://www.theabsentmindedcoder.com/2010/03/adv-wpf-videos.html\"&gt;http://www.theabsentmindedcoder.com/2010/03/adv-wpf-videos.html&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Also at EPS I presented 2 3-day WPF Training Sessions. Now if that doesn\xE2\x80\x99t challenge you on how long you can talk, then nothing will. :D&lt;/p&gt;  &lt;p&gt;As you can see, this was a busy year. Open Spaces allowed me to meet incredibly talented people and engage them in shop talk. It encouraged me to reach out and start mastering my craft, so I can teach others. Open Spaces 2009 was one of the most influential events in my career.&lt;/p&gt;  &lt;p&gt;And now we have 2010\xE2\x80\x99s Open Spaces coming up and it should be fantastic!! Not only will I be attending, but I will also be conducting another WPF workshop for Open Spaces 2010. More details will be shared later, but I am very excited about this presentation.&lt;/p&gt;  &lt;p&gt;The quality of the discussion and individuals at last year\xE2\x80\x99s conference led to my expansion this last year. I was blessed with so many opportunities to talk, share, and grow. I know that this year\xE2\x80\x99s session will provide me with the fuel to take 2010 to that next level.&lt;/p&gt;  &lt;p&gt;I hope to see you all there.&lt;/p&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-3753527079553564158?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2010/04/houston-open-spaces-what-it-means-to-me.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-5553910391092006742</guid><pubDate>Wed, 17 Mar 2010 16:59:00 +0000</pubDate><atom:updated>2010-03-17T09:59:26.817-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>Dynamic</category><title>Dynamic + Extension Methods = Fail</title><description>&lt;p&gt;I am playing around with dynamics right now working on a solution for a completely different problem.&lt;/p&gt;  &lt;p&gt;I discovered a issue I didn\xE2\x80\x99t foresee (and maybe I am doing something wrong). &lt;/p&gt;  &lt;p&gt;I use AssertExtensions to make my tests more readable so I created my first extension.&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:d62e8534-7c2b-494a-be51-1d053b5c7b9d\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #000000; overflow: auto; padding: 2px 5px; white-space: nowrap\"&gt;&lt;span style=\"color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;static&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;class&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;AssertExtensions&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;static&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; ShouldBe&amp;lt;T&amp;gt;(&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;this&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; T actual, T expected)&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;Assert&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;.AreEqual(expected, actual);&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;}&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;I created a test to \xE2\x80\x98get\xE2\x80\x99 a property from a dynamic object.&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:692cb3e0-3547-40f4-b829-94e1ac0cb858\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #000000; overflow: auto; padding: 2px 5px; white-space: nowrap\"&gt;&lt;span style=\"color:#ffffff\"&gt;[&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;TestMethod&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;]&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; should_be_able_to_get_property()&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; book = &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;Book&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; {Title = &lt;/span&gt;&lt;span style=\"color:#668f5f\"&gt;&amp;quot;Icarus Hunt&amp;quot;&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;, Author = &lt;/span&gt;&lt;span style=\"color:#668f5f\"&gt;&amp;quot;Timothy Zahn&amp;quot;}&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;;&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; d = book &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;as&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;dynamic&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;;&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;d.Author.ShouldBe(&lt;/span&gt;&lt;span style=\"color:#668f5f\"&gt;&amp;quot;Timothy Zahn&amp;quot;&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;);&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;Should work right?&lt;/p&gt;  &lt;p&gt;Wrong.&lt;/p&gt;  &lt;p&gt;&lt;a href=\"http://lh3.ggpht.com/_jZ1HIkVkz48/S6EKbLBdgMI/AAAAAAAAADs/8EWbKE0U4_M/s1600-h/image%5B3%5D.png\"&gt;&lt;img style=\"border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px\" title=\"image\" border=\"0\" alt=\"image\" src=\"http://lh3.ggpht.com/_jZ1HIkVkz48/S6EKbTf83yI/AAAAAAAAADw/sdbz2OzGZ8E/image_thumb%5B1%5D.png?imgmax=800\" width=\"829\" height=\"238\" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;Oh noes!&lt;/p&gt;  &lt;p&gt;Apparently the RuntimeBinder can\xE2\x80\x99t figure out the extension to string. My solution was to do this:&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:2810c3b8-ed61-45d3-9906-83a578b31ef5\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #000000; overflow: auto; padding: 2px 5px; white-space: nowrap\"&gt;&lt;span style=\"color:#ffffff\"&gt;[&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;TestMethod&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;]&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; should_be_able_to_get_property()&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; book = &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;Book&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; {Title = &lt;/span&gt;&lt;span style=\"color:#668f5f\"&gt;&amp;quot;Icarus Hunt&amp;quot;&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;, Author = &lt;/span&gt;&lt;span style=\"color:#668f5f\"&gt;&amp;quot;Timothy Zahn&amp;quot;}&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;;&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; d = book &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;as&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;dynamic&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;;&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; author = d.Author &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;as&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;string&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;;&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;author.ShouldBe(&lt;/span&gt;&lt;span style=\"color:#668f5f\"&gt;&amp;quot;Timothy Zahn&amp;quot;&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;);&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;I just found it interesting that it didn\xE2\x80\x99t behave the way I would have expected.&lt;/p&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-5553910391092006742?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2010/03/dynamic-extension-methods-fail.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-655220955974055745</guid><pubDate>Tue, 09 Mar 2010 19:58:00 +0000</pubDate><atom:updated>2010-03-09T11:58:16.090-08:00</atom:updated><title>100 Books Every Man Must Read</title><description>&lt;p&gt;So over lunch I decided to mark down which of the &lt;a href=\"http://artofmanliness.com/2008/05/14/100-must-read-books-the-essential-mans-library/\"&gt;100 books every man must read&lt;/a&gt; I have actually read.&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;Read&lt;/p&gt;  &lt;ol&gt;   &lt;li&gt;The Great Gatsby&lt;/li&gt;    &lt;li&gt;1984 &amp;lt;- multiple times... pure genius&lt;/li&gt;    &lt;li&gt;The Catcher in the Rye&lt;/li&gt;    &lt;li&gt;The Picture of Dorian Gray&lt;/li&gt;    &lt;li&gt;How to Win Friends and Influence People&lt;/li&gt;    &lt;li&gt;Call of the Wild&lt;/li&gt;    &lt;li&gt;Swiss Family Robinson&lt;/li&gt;    &lt;li&gt;Catch-22 &amp;lt;- love it! I need to reread. &lt;/li&gt;    &lt;li&gt;Lord of the Flies&lt;/li&gt;    &lt;li&gt;Don Quixote ... yes I've read it. It was long and I don't remember any of it.&lt;/li&gt;    &lt;li&gt;The Hobbit&lt;/li&gt;    &lt;li&gt;Huckleberry Finn&lt;/li&gt;    &lt;li&gt;Animal Farm &amp;lt;- again.. genius. &lt;/li&gt;    &lt;li&gt;Frankenstein &amp;lt;- Fire.... bad&lt;/li&gt;    &lt;li&gt;Hamlet&lt;/li&gt;    &lt;li&gt;The Stranger&lt;/li&gt;    &lt;li&gt;The Island of Dr Moreau&lt;/li&gt;    &lt;li&gt;All Quiet on the Western Front &amp;lt;- literally changed my mind about going into the army :)&lt;/li&gt;    &lt;li&gt;To Kill a Mockingbird&lt;/li&gt; &lt;/ol&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;p&gt;Read Excerpts&lt;/p&gt;  &lt;ol&gt;   &lt;li&gt;The Prince&lt;/li&gt;    &lt;li&gt;The Republic&lt;/li&gt;    &lt;li&gt;Brave New World (still need to finish it)&lt;/li&gt;    &lt;li&gt;The Iliad and Odyssey&lt;/li&gt;    &lt;li&gt;Walden&lt;/li&gt;    &lt;li&gt;The Metamorphosis&lt;/li&gt;    &lt;li&gt;The Art of Warfare&lt;/li&gt;    &lt;li&gt;The Divine Comedy &amp;lt;- I read Inferno &lt;/li&gt;    &lt;li&gt;The Politics&lt;/li&gt;    &lt;li&gt;The Federalist Papers &amp;lt;- genius&lt;/li&gt;    &lt;li&gt;Moby Dick &amp;lt;- started but never finished&lt;/li&gt;    &lt;li&gt;Paradise Lost&lt;/li&gt;    &lt;li&gt;The Red badge of Courage&lt;/li&gt;    &lt;li&gt;The Bible&lt;/li&gt;    &lt;li&gt;Zen and the Art of Motorcycle Maintenance&lt;/li&gt; &lt;/ol&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-655220955974055745?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2010/03/100-books-every-man-must-read.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-6744291397557243298</guid><pubDate>Sun, 07 Mar 2010 19:56:00 +0000</pubDate><atom:updated>2010-03-07T12:00:17.129-08:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>WPF</category><category domain='http://www.blogger.com/atom/ns#'>Presentation</category><title>Adv WPF Videos</title><description>&lt;p&gt;The videos are up from the Adv WPF Workshop we had here at EPS.&lt;/p&gt;  &lt;p&gt;Videos (the links are kind of slow and funky atm. I will look into it on Monday. I had more luck downloading the file as opposed to streaming it)&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;&lt;a title=\"http://www.epsdownloadsite.com/downloads/7a554107-cdd0-4133-967b-913c595971ee/Advanced_WPF_JB_part1.wmv\" href=\"http://www.epsdownloadsite.com/downloads/7a554107-cdd0-4133-967b-913c595971ee/Advanced_WPF_JB_part1.wmv\"&gt;Part 1&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=\"http://www.epsdownloadsite.com/downloads/8adbd281-908b-4301-8135-daddc13361f6/Advanced_WPF_JB_part2.wmv\"&gt;Part 2&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=\"http://www.epsdownloadsite.com/downloads/92639ab4-a67e-46c9-82f3-9ba03979b01f/Advanced_WPF_JB_part3.wmv\"&gt;Part 3&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=\"http://www.epsdownloadsite.com/downloads/821431b9-9313-46a5-8b48-6101fbb30814/Advanced_WPF_JB_part4.wmv\"&gt;Part 4&lt;/a&gt;&lt;/li&gt;    &lt;li&gt;&lt;a href=\"http://www.epsdownloadsite.com/downloads/078eab64-c9f7-4afb-9817-e696edacbe6e/Advanced_WPF_JB_part5.wmv\"&gt;Part 5&lt;/a&gt;&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;I had a great time talking through some of the things we are doing here with WPF. I think it took awhile to get started but towards the end I think we picked up speed. &lt;/p&gt;  &lt;p&gt;I don\xE2\x80\x99t exactly recall the topics right now but I believe we did cover these items from the original agenda:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;INotifyPropertyChange      &lt;ul&gt;       &lt;li&gt;Normal &lt;/li&gt;        &lt;li&gt;Type Safe &lt;/li&gt;        &lt;li&gt;Dynamic Proxy &lt;/li&gt;        &lt;li&gt;AOP&lt;/li&gt;     &lt;/ul&gt;   &lt;/li&gt;    &lt;li&gt;View + ViewModel      &lt;ul&gt;       &lt;li&gt;Typical methods &lt;/li&gt;        &lt;li&gt;IView extensions &lt;/li&gt;        &lt;li&gt;IView&amp;lt;VM&amp;gt; &lt;/li&gt;        &lt;li&gt;ViewRegistry &lt;/li&gt;        &lt;li&gt;Also will be covering StructureMap conventions (TypeScanners) and Type Interceptors&lt;/li&gt;     &lt;/ul&gt;   &lt;/li&gt;    &lt;li&gt;Event Aggregator      &lt;ul&gt;       &lt;li&gt;using Events &lt;/li&gt;        &lt;li&gt;Publish extension method &lt;/li&gt;        &lt;li&gt;ISubscribe &lt;/li&gt;        &lt;li&gt;Putting it all together with a Region Controller&lt;/li&gt;     &lt;/ul&gt;   &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;I guess one big note would be that PostSharp is no longer open source therefore you need a license for their 2.0 product. At EPS we picked up licenses for our current solution. The benefit we get out of PostSharp and AOP far surpasses the license price even when you have to buy the license for every developer.&lt;/p&gt;  &lt;p&gt;Check PostSharp out at &lt;a href=\"http://www.sharpcrafters.com/\"&gt;http://www.sharpcrafters.com/&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;I think we are going to work on a PostSharp CodeCast or some other informative session on the tool.&lt;/p&gt;  &lt;p&gt;Considering we have the Houston Open Spaces coming up, I will probably delay another workshop for a bit. But I had a good time and will probably do another one around May or June. &lt;/p&gt;  &lt;p&gt;I want to thank everyone who came online and on site. It was a lot of fun! Please provide feedback so we can make the next workshop even better.&lt;/p&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-6744291397557243298?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2010/03/adv-wpf-videos.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-2339794459575868076</guid><pubDate>Tue, 23 Feb 2010 20:07:00 +0000</pubDate><atom:updated>2010-02-23T12:07:15.563-08:00</atom:updated><title>Creating my first TFS 2010 Build</title><description>&lt;p&gt;My work this iteration on my project is setting up a CI build and then migrating all our POC code to the solution.&lt;/p&gt;  &lt;p&gt;Right now I am creating a simple build as practice for setting up the actual build.&lt;/p&gt;  &lt;p&gt;I am approaching this from a complete n00b when it comes to creating a TFS build. I have created builds before but they have been small and just simple MSBuild files. This is the first time I am using TFS and creating not only a build but a continuous integration environment. &lt;/p&gt;  &lt;p&gt;I created a Team Project and added a simple C# project to source control. I then looked at the Team Explorer and noticed that there is a Builds section under my project. Intuitively I right clicked and found where I can create a New Build Definition.&lt;/p&gt;  &lt;p&gt;&lt;a href=\"http://lh5.ggpht.com/_jZ1HIkVkz48/S4Q1RvQODSI/AAAAAAAAAC0/eGhAyFmr86s/s1600-h/image%5B3%5D.png\"&gt;&lt;img style=\"border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px\" title=\"image\" border=\"0\" alt=\"image\" src=\"http://lh4.ggpht.com/_jZ1HIkVkz48/S4Q1TEsf4AI/AAAAAAAAAC4/uUHqufswDq8/image_thumb%5B1%5D.png?imgmax=800\" width=\"441\" height=\"301\" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;I looked at the options available to me on the Build Window and noticed a Trigger section. Investigating the Trigger section allowed me to select what triggers this build. Oh look a CI trigger that builds after each check-in!&lt;/p&gt;  &lt;p&gt;&lt;a href=\"http://lh5.ggpht.com/_jZ1HIkVkz48/S4Q1T15FJQI/AAAAAAAAAC8/Pdjfgb4tTn0/s1600-h/image%5B12%5D.png\"&gt;&lt;img style=\"border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px\" title=\"image\" border=\"0\" alt=\"image\" src=\"http://lh4.ggpht.com/_jZ1HIkVkz48/S4Q1U0mMoJI/AAAAAAAAADA/lAMO30TJNKA/image_thumb%5B6%5D.png?imgmax=800\" width=\"647\" height=\"288\" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;I then had to set an output folder so I created a folder on our build machine and set the folder to that.&lt;/p&gt;  &lt;p&gt;&lt;a href=\"http://lh6.ggpht.com/_jZ1HIkVkz48/S4Q1VgDHMQI/AAAAAAAAADE/VRIqBM8khyM/s1600-h/image%5B25%5D.png\"&gt;&lt;img style=\"border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px\" title=\"image\" border=\"0\" alt=\"image\" src=\"http://lh3.ggpht.com/_jZ1HIkVkz48/S4Q1WYR1R0I/AAAAAAAAADI/9CDq0QxJFwY/image_thumb%5B13%5D.png?imgmax=800\" width=\"679\" height=\"209\" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;And then I was done. &lt;/p&gt;  &lt;p&gt;I do have to say we already had a TFS Build Controller setup so I can\xE2\x80\x99t comment on that for now.&lt;/p&gt;  &lt;p&gt;I then ran a couple of experiments. I first added a class foo to my project and checked in. I then double clicked on my Build under the TFS explorer and was given two reports. One report showed the current queued builds and the other had a list of the completed builds.&lt;/p&gt;  &lt;p&gt;After I ran my first successful build I then made a compile error and checked it in. I then had a failed build. &lt;/p&gt;  &lt;p&gt;&lt;a href=\"http://lh3.ggpht.com/_jZ1HIkVkz48/S4Q1W9cvqGI/AAAAAAAAADM/VpLr6HnR8VI/s1600-h/image%5B30%5D.png\"&gt;&lt;img style=\"border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px\" title=\"image\" border=\"0\" alt=\"image\" src=\"http://lh5.ggpht.com/_jZ1HIkVkz48/S4Q1Xi-GuxI/AAAAAAAAADQ/wR8BDdzu33o/image_thumb%5B16%5D.png?imgmax=800\" width=\"901\" height=\"120\" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;When I double clicked the failed build I got this UI.&lt;/p&gt;  &lt;p&gt;&lt;a href=\"http://lh4.ggpht.com/_jZ1HIkVkz48/S4Q1YRY60KI/AAAAAAAAADU/78Hpji0Uzno/s1600-h/image%5B34%5D.png\"&gt;&lt;img style=\"border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px\" title=\"image\" border=\"0\" alt=\"image\" src=\"http://lh3.ggpht.com/_jZ1HIkVkz48/S4Q1ZcNFsuI/AAAAAAAAADY/cBmz1RDTf6c/image_thumb%5B18%5D.png?imgmax=800\" width=\"427\" height=\"442\" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;I then created a test project and then made a failing test. Now my build looks like this:&lt;/p&gt;  &lt;p&gt;&lt;a href=\"http://lh6.ggpht.com/_jZ1HIkVkz48/S4Q1Z-gGDQI/AAAAAAAAADc/mhugqT1qTEs/s1600-h/image%5B38%5D.png\"&gt;&lt;img style=\"border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px\" title=\"image\" border=\"0\" alt=\"image\" src=\"http://lh5.ggpht.com/_jZ1HIkVkz48/S4Q1a-NdjAI/AAAAAAAAADg/MAndYJ_1gm8/image_thumb%5B20%5D.png?imgmax=800\" width=\"408\" height=\"258\" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;And when I double clicked I got this report.&lt;/p&gt;  &lt;p&gt;&lt;a href=\"http://lh3.ggpht.com/_jZ1HIkVkz48/S4Q1b3RD0EI/AAAAAAAAADk/PSVKXmUNqYo/s1600-h/image%5B42%5D.png\"&gt;&lt;img style=\"border-bottom: 0px; border-left: 0px; display: inline; border-top: 0px; border-right: 0px\" title=\"image\" border=\"0\" alt=\"image\" src=\"http://lh5.ggpht.com/_jZ1HIkVkz48/S4Q1cUUzIwI/AAAAAAAAADo/OpqSELw-yEY/image_thumb%5B22%5D.png?imgmax=800\" width=\"385\" height=\"396\" /&gt;&lt;/a&gt; &lt;/p&gt;  &lt;p&gt;So that was a real quick run through with creating a CI build with TFS 2010. I have to say\xE2\x80\xA6 I was surprised that it was that easy. I am continuing my work with the build but it looks like the simple scenario was incredibly easy!&lt;/p&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-2339794459575868076?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2010/02/creating-my-first-tfs-2010-build.html</link><author>noreply@blogger.com (JB)</author><thr:total>1</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-3679972065341902790</guid><pubDate>Thu, 18 Feb 2010 16:09:00 +0000</pubDate><atom:updated>2010-02-18T08:09:37.917-08:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>WPF</category><category domain='http://www.blogger.com/atom/ns#'>Structure Map</category><title>ISubscribe</title><description>&lt;p&gt;I believe Jimmy Bogard has a similar technique (IHandler&amp;lt;T&amp;gt;) with ASP .Net MVC but I thought I would still share the convention I\xE2\x80\x99ve been using to wire up subscriptions to the Prism Event Aggregator.&lt;/p&gt;  &lt;p&gt;Whenever an object is built with StructureMap, it goes through all the TypeInterceptors. I have a SubscriptionTypeInterceptor:&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:f17393e3-ace1-471b-8325-c307979682cd\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #000000; overflow: auto; padding: 2px 5px; white-space: nowrap\"&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;class&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;SubscriptionInterceptor&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; : &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;TypeInterceptor&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;object&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; Process(&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;object&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; target, &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;IContext&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; context)&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; eventAggregator = context.GetInstance&amp;lt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;IEventAggregator&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"color:#008000\"&gt;// Get interface ISubscribe&amp;lt;E&amp;gt;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; interfaces = target.GetType().GetInterfaces().Where(i =&amp;gt; i.Name.Contains(&lt;/span&gt;&lt;span style=\"color:#668f5f\"&gt;&amp;quot;ISubscribe&amp;quot;&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;));&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;foreach&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; (&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; type &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;in&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; interfaces)&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"color:#008000\"&gt;// typeof(E)&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; eventType = type.GetGenericArguments()[&lt;/span&gt;&lt;span style=\"color:#bda265\"&gt;0&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;];&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; setupMethod = GetType().GetMethod(&lt;/span&gt;&lt;span style=\"color:#668f5f\"&gt;&amp;quot;Setup&amp;quot;&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;);&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;setupMethod.MakeGenericMethod(eventType).Invoke(&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;this&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;, &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;[] { target, eventAggregator });&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;}&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;return&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; target;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;}&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;bool&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; MatchesType(&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;Type&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; type)&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;return&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; type.ImplementsInterfaceTemplate(&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;typeof&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;(&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;ISubscribe&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;&amp;lt;&amp;gt;));&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;}&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; Setup&amp;lt;T&amp;gt;(&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;ISubscribe&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;&amp;lt;T&amp;gt; subscriber, &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;IEventAggregator&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; eventAggregator)&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;eventAggregator&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;.GetEvent&amp;lt;&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;CompositePresentationEvent&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;&amp;lt;T&amp;gt;&amp;gt;()&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;.Subscribe(subscriber.Subscribe);&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;}&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;So it finds all the ISubscribe&amp;lt;T&amp;gt; interfaces the target implements and then subscribes the target to the event T in the event aggregator.&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:2e54c933-33ef-4d48-a592-e7cf6b376975\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #000000; overflow: auto; padding: 2px 5px; white-space: nowrap\"&gt;&lt;span style=\"color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;interface&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;ISubscribe&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;&amp;lt;E&amp;gt;&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; Subscribe(E e);&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;A simple example of usage:&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:6e64a3a0-a28b-4b8f-93f4-c78164113b36\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #000000; overflow: auto; padding: 2px 5px; white-space: nowrap\"&gt;&lt;span style=\"color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;class&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;SecurityController&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; : &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;IController&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;,&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;ISubscribe&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;RequestUserLoginEvent&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;&amp;gt;&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; Subscribe(&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;RequestUserLoginEvent&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; e)&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;Publish&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;.Event().ShowModal&amp;lt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;IRequestUserLoginViewModel&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;&amp;gt;();&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;}&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-3679972065341902790?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2010/02/isubscribe.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-486562499010253373</guid><pubDate>Thu, 18 Feb 2010 16:08:00 +0000</pubDate><atom:updated>2010-02-18T08:08:38.577-08:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>Podcast</category><title>CodeCast #68 : Convention over Configuration</title><description>&lt;p&gt;I recorded a podcast with Markus and Ken on Tuesday and it was published last night. :)&lt;/p&gt;  &lt;p&gt;We talked about Convention over Configuration using tools like Structure Map, PostSharp, Prism, etc&lt;/p&gt;  &lt;p&gt;You can download the podcast using itunes or online at:&lt;/p&gt;  &lt;p&gt;&lt;a href=\"http://www.code-magazine.com/codecast/index.aspx?messageid=0001bf99-1394-45c2-8949-388c673ac7a5\"&gt;http://www.code-magazine.com/codecast/index.aspx?messageid=0001bf99-1394-45c2-8949-388c673ac7a5&lt;/a&gt;&lt;/p&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-486562499010253373?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2010/02/codecast-68-convention-over.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-5393325040268963706</guid><pubDate>Thu, 18 Feb 2010 00:08:00 +0000</pubDate><atom:updated>2010-02-17T16:08:28.108-08:00</atom:updated><title>View + ViewModel + ViewRegistry</title><description>&lt;p&gt;In preparation for the Advanced WPF Workshop on Saturday Feb 20th, I thought I would throw together some blog posts around some techniques / code I will be sharing. JP asked the other day whether Views should have references to their ViewModels or should ViewModels have references to Views. Unfortunately twitter is a great medium for asking this question but not the best medium for answering the question.&lt;/p&gt;  &lt;p&gt;I am going to try using the dry marker board as a form of communication with my blogs. I have little patience for lining up pretty lines and colored boxes with Visio or Power Point. A dry marker board is fast and allows for a free flowing expression of my ideas.&lt;/p&gt;  &lt;p&gt;Let me try to diagram out how I currently manage my Views and ViewModels.&lt;/p&gt;  &lt;p&gt;&lt;a href=\"http://lh6.ggpht.com/_jZ1HIkVkz48/S3yE-dIcnSI/AAAAAAAAACo/lvsTWjok-gY/s1600-h/IMG_03564.jpg\"&gt;&lt;img style=\"border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; border-left-width: 0px\" title=\"IMG_0356\" border=\"0\" alt=\"IMG_0356\" src=\"http://lh5.ggpht.com/_jZ1HIkVkz48/S3yE-lGSu_I/AAAAAAAAACs/zZtcG4j5WbM/IMG_0356_thumb2.jpg?imgmax=800\" width=\"617\" height=\"464\" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;/p&gt;  &lt;ol&gt;   &lt;li&gt;We ask the StructureMap container for the ViewModel &lt;/li&gt;    &lt;li&gt;The VM instance is intercepted by a ViewModelTypeInterceptor &lt;/li&gt;    &lt;li&gt;Inside the VMTypeInterceptor      &lt;ol&gt;       &lt;li&gt;Get the V for out VM from the container &lt;/li&gt;        &lt;li&gt;Get the ViewRegistry from the container &lt;/li&gt;        &lt;li&gt;Register the V with the VM in the ViewRegistry &lt;/li&gt;        &lt;li&gt;Return the VM &lt;/li&gt;     &lt;/ol&gt;   &lt;/li&gt;    &lt;li&gt;And finally our VM is returned being registered with a V in the ViewRegistry &lt;/li&gt; &lt;/ol&gt;  &lt;p&gt;In short my ViewModel has no reference to my View, my View has no reference to my ViewModel (beyond setting the DataContext), and my View Registry registers the mappings between View and ViewModel.&lt;/p&gt;  &lt;p&gt;The best code to look for this is in the ViewModelInterceptor:&lt;/p&gt;  &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:972cde39-aaad-4d5f-8b43-59c3af814d3e\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background-color: #000000; overflow: auto; padding: 2px 5px; white-space: nowrap\"&gt;&lt;span style=\"color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;class&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;ViewModelInterceptor&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; : &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;TypeInterceptor&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;object&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; Process(&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;object&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; target, &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;IContext&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; context)&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; name = target.GetType().Name;&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; view = context.GetInstance&amp;lt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;IView&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;&amp;gt;(name);&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;context.GetInstance&amp;lt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;IViewRegistry&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;&amp;gt;()&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;.RegisterViewWith(target &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;as&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;IViewModel&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;, view);&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;return&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; target;&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;}&lt;/span&gt;&lt;br&gt; &lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;public&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;bool&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; MatchesType(&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;Type&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; type)&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;{&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;return&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; type.CanBeCastTo(&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;typeof&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; (&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;IViewModel&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;));&lt;/span&gt;&lt;br&gt; \xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#ffffff\"&gt;}&lt;/span&gt;&lt;br&gt; &lt;span style=\"color:#ffffff\"&gt;}&lt;/span&gt;&lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-5393325040268963706?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2010/02/view-viewmodel-viewregistry.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-8608143709852560735</guid><pubDate>Wed, 17 Feb 2010 18:52:00 +0000</pubDate><atom:updated>2010-02-18T13:41:50.192-08:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>WPF</category><category domain='http://www.blogger.com/atom/ns#'>Presentation</category><title>Advanced WPF Workshop</title><description>&lt;p&gt;On February 20th from 9 am (central) until we get bored\xE2\x80\xA6 I guess 1pm, we will be having a free Advanced WPF Workshop here at EPS. &lt;/p&gt;  &lt;p&gt;Let me emphasize \xE2\x80\xA6. &lt;/p&gt;  &lt;h1&gt;FREE!!!!!!&lt;/h1&gt;  &lt;p&gt;When : Feb 20th 9am - 1pm+&lt;/p&gt;  &lt;p&gt;Where : EPS Office&lt;/p&gt;  &lt;p&gt;6605 Cypresswood Dr, Suite 300&lt;/p&gt;  &lt;p&gt;Spring, TX 77379&lt;/p&gt; &lt;iframe height=\"350\" marginheight=\"0\" src=\"http://maps.google.com/maps?f=q&amp;amp;source=s_q&amp;amp;hl=en&amp;amp;geocode=&amp;amp;q=6605+cypresswood+dr+sprint+tx&amp;amp;sll=37.0625,-95.677068&amp;amp;sspn=64.792576,135.263672&amp;amp;ie=UTF8&amp;amp;hq=&amp;amp;hnear=6605+Cypresswood+Dr,+Spring,+Harris,+Texas+77379&amp;amp;z=17&amp;amp;ll=30.014289,-95.507411&amp;amp;output=embed\" frameborder=\"0\" width=\"425\" marginwidth=\"0\" scrolling=\"no\"&gt;&lt;/iframe&gt;  &lt;br /&gt;&lt;small&gt;&lt;a style=\"text-align: left; color: #0000ff\" href=\"http://maps.google.com/maps?f=q&amp;amp;source=embed&amp;amp;hl=en&amp;amp;geocode=&amp;amp;q=6605+cypresswood+dr+sprint+tx&amp;amp;sll=37.0625,-95.677068&amp;amp;sspn=64.792576,135.263672&amp;amp;ie=UTF8&amp;amp;hq=&amp;amp;hnear=6605+Cypresswood+Dr,+Spring,+Harris,+Texas+77379&amp;amp;z=17&amp;amp;ll=30.014289,-95.507411\"&gt;View Larger Map&lt;/a&gt;&lt;/small&gt;   &lt;p&gt;And online at : &lt;a href=\"https://www2.gotomeeting.com/register/902909498\"&gt;https://www2.gotomeeting.com/register/902909498&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;There will be lunch which at the moment is BBQ, but I might change my mind. ;)&lt;/p&gt;  &lt;p&gt;Currently the agenda looks like:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;INotifyPropertyChange      &lt;ul&gt;       &lt;li&gt;Normal &lt;/li&gt;        &lt;li&gt;Type Safe &lt;/li&gt;        &lt;li&gt;Dynamic Proxy &lt;/li&gt;        &lt;li&gt;AOP &lt;/li&gt;     &lt;/ul&gt;   &lt;/li&gt;    &lt;li&gt;View + ViewModel      &lt;ul&gt;       &lt;li&gt;Typical methods &lt;/li&gt;        &lt;li&gt;IView extensions &lt;/li&gt;        &lt;li&gt;IView&amp;lt;VM&amp;gt; &lt;/li&gt;        &lt;li&gt;ViewRegistry &lt;/li&gt;        &lt;li&gt;Also will be covering StructureMap conventions (TypeScanners) and Type Interceptors &lt;/li&gt;     &lt;/ul&gt;   &lt;/li&gt;    &lt;li&gt;Event Aggregator      &lt;ul&gt;       &lt;li&gt;using Events &lt;/li&gt;        &lt;li&gt;Publish extension method &lt;/li&gt;        &lt;li&gt;ISubscribe &lt;/li&gt;        &lt;li&gt;Putting it all together with a Region Controller &lt;/li&gt;     &lt;/ul&gt;   &lt;/li&gt;    &lt;li&gt;Commands      &lt;ul&gt;       &lt;li&gt;ICommand &lt;/li&gt;        &lt;li&gt;Action / Delegate Command &lt;/li&gt;        &lt;li&gt;Decorating with a Named Command &lt;/li&gt;        &lt;li&gt;* might be using commands with a convention &lt;/li&gt;     &lt;/ul&gt;   &lt;/li&gt;    &lt;li&gt;Resource Locator      &lt;ul&gt;       &lt;li&gt;Resource Dictionary Convention &lt;/li&gt;        &lt;li&gt;Image Convention &lt;/li&gt;     &lt;/ul&gt;   &lt;/li&gt;    &lt;li&gt;And anything else that comes up during our discussions &lt;/li&gt;    &lt;li&gt;Potential additions:      &lt;ul&gt;       &lt;li&gt;Paul Stovell\xE2\x80\x99s MicroModel &lt;/li&gt;        &lt;li&gt;Dependency Property Inheritance &lt;/li&gt;        &lt;li&gt;Attached Dep Property Behaviors &lt;/li&gt;        &lt;li&gt;Blend Behaviors &lt;/li&gt;        &lt;li&gt;Visual State Manager &lt;/li&gt;     &lt;/ul&gt;   &lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;We will be recording the session so have no fear if you can\xE2\x80\x99t come or join us online.&lt;/p&gt;  &lt;p&gt;I am very excited about the workshop! Its a great opportunity to share some stuff I\xE2\x80\x99ve been doing with WPF. User groups and brown bags offer only limited exposure to these techniques. With this workshop we get to dive into code and get rapid interactions. I hope to see you there.&lt;/p&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-8608143709852560735?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2010/02/advanced-wpf-workshop.html</link><author>noreply@blogger.com (JB)</author><thr:total>5</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-2168614335498636448</guid><pubDate>Tue, 15 Dec 2009 23:35:00 +0000</pubDate><atom:updated>2009-12-15T16:26:36.725-08:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>Lean</category><title>The Goal</title><description>&lt;p&gt;With my current mindset that things are broken, I dive into my current readings including The Goal and The Toyota Way. &lt;/p&gt;  &lt;table border=\"0\" cellspacing=\"0\" cellpadding=\"0\"&gt;&lt;tbody&gt;     &lt;tr&gt;       &lt;td&gt;&lt;a href=\"http://www.amazon.com/Goal-Process-Ongoing-Improvement/dp/0884271781%3FSubscriptionId%3D0JTCV5ZMHMF7ZYTXGFR2%26tag%3Dbrdicr-20%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D0884271781\"&gt;The Goal: A Process of Ongoing Improvement&lt;/a&gt;           &lt;br /&gt;&lt;img src=\"http://ecx.images-amazon.com/images/I/51W2NXJAXHL._SL160_.jpg\" /&gt; &lt;/td&gt;     &lt;/tr&gt;   &lt;/tbody&gt;&lt;/table&gt;  &lt;p&gt;I read The Goal back in my business graduate school days (about 5 years ago), but now its reading has a whole new impact. I am seeing more into the book after 5 years of working in software than I did as a fresh college graduate. Some of the mental exercises the protagonist in the book is going through I am going through as well. As he wrestles answering questions concerning his factory, I am wrestling with the questions concerning my software projects.&lt;/p&gt;  &lt;p&gt; The first exercise is to define &lt;strong&gt;'the goal'&lt;/strong&gt; for his company and all companies. Of course the protagonist takes a long time to come to the logical conclusion that it's to make money. &lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;&amp;#160;&lt;strong&gt;Every company's goal is to make money. &lt;/strong&gt;&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;As a software consulting company, how do we make money?&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;&amp;#160;&lt;strong&gt;We make money by winning a bid for a project and then performing the work to complete the project within budget. &lt;/strong&gt;&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;That seems pretty simple. Nothing about data access technologies, TDD, user stories, or any sort of architecture or design pattern.&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;&lt;strong&gt;If you need X done and will pay $Y then we should do X for less than $Y.&lt;/strong&gt;&lt;/p&gt;    &lt;p&gt;     &lt;br /&gt;&lt;/p&gt; &lt;/blockquote&gt;  &lt;table border=\"0\" cellspacing=\"0\" cellpadding=\"2\" width=\"769\"&gt;&lt;tbody&gt;     &lt;tr&gt;       &lt;td valign=\"top\" width=\"260\"&gt;         &lt;p&gt;Why is it so hard to deliver on that? &lt;/p&gt;          &lt;ol&gt;           &lt;li&gt;Define X &lt;/li&gt;            &lt;li&gt;Estimate Y &lt;/li&gt;            &lt;li&gt;\xE2\x80\xA6something &lt;/li&gt;            &lt;li&gt;Profit! &lt;/li&gt;         &lt;/ol&gt;       &lt;/td&gt;        &lt;td valign=\"top\" width=\"507\"&gt;&lt;a href=\"http://lh4.ggpht.com/_jZ1HIkVkz48/SygpOgUl-0I/AAAAAAAAAB8/n8uHnvwVeK0/s1600-h/underpants-gnomes.jpg\"&gt;&lt;img style=\"border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px\" title=\"underpants-gnomes\" border=\"0\" alt=\"underpants-gnomes\" align=\"left\" src=\"http://lh4.ggpht.com/_jZ1HIkVkz48/SygdTIczrCI/AAAAAAAAACA/Bpn4H4W3h-0/underpants-gnomes_thumb.jpg?imgmax=800\" width=\"244\" height=\"169\" /&gt;&lt;/a&gt;&lt;/td&gt;     &lt;/tr&gt;   &lt;/tbody&gt;&lt;/table&gt;  &lt;p&gt;If we scope a project then we need to know what X is. Simple to say, but man is it difficult to capture! &lt;/p&gt;  &lt;p&gt;X is always in motion, a moving target. The client changes their mind, we have scope creep, and what appears simple always ends up being more complex. We all know this! Its the one constant with software development. Things are going to change.&lt;/p&gt;  &lt;p&gt; From my perspective, SOLID and design patterns focus on writing code that is more adaptive to change. &lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;&lt;strong&gt;SOLID and design patterns in of themselves do NOT move us towards our goal by reducing the cost of writing software. &lt;/strong&gt;&lt;/p&gt;    &lt;p&gt;&lt;strong&gt;SOLID and design patterns move us towards our goal when our software has to change because the cost of the change has been reduced.&lt;/strong&gt; &lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;&lt;strong&gt;&lt;/strong&gt;&lt;/p&gt;  &lt;p&gt;The principles and patterns also provide a common language for developers. That common language moves us closer to the goal because current and new developers can grok more of the design in less time. And time = money.&lt;/p&gt;  &lt;p&gt;Where does testing fit into all this?&lt;/p&gt;  &lt;p&gt; Testing allows us to keep track of the quality of our production. Or.. does it? After some re-examination I want to say testing adds no quality. That will have to be another post. &lt;/p&gt;  &lt;p&gt; Testing provides a way to measure our progress towards X. We know we are moving towards X because we can have tests that verify we are delivering towards our promise. When I mention testing I am using a broad definition and including all sorts of tests from UAT testers to automated unit tests.&lt;/p&gt;  &lt;p&gt; So what does Test Driven Development (TDD) provide? TDD focuses every bit of code towards satisfying a test. If every test is relevant towards progress towards X, then TDD focuses our development towards productive work. Logically any work not moving us towards delivering X to our clients is unproductive work.&lt;/p&gt;  &lt;p&gt;What conclusions have I come to? &lt;/p&gt;  &lt;p&gt;The goal of a software consulting company is to make money. We make money by completing X under $Y. One of the important steps is to then define what X is. We know X will change so we should write code that is adaptive to change, but we need to balance that with only writing code that moves us towards delivering X.&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;We achieve more flexible and understandable code by using SOLID and design patterns. &lt;/li&gt;    &lt;li&gt; We measure our progress towards X by passing tests. &lt;/li&gt;    &lt;li&gt;TDD focuses our coding towards productive work.&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;I started to write about estimation in this section but have decided to move it to another post. &lt;/p&gt;  &lt;p&gt;After thinking about estimation, it has nothing to do with knowing what X is. Estimation has to do with what we think $Y is. X is what X is regardless if it takes you 3 hours or 3 months to deliver.&lt;/p&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-2168614335498636448?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2009/12/goal.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-2248140507224705082</guid><pubDate>Tue, 15 Dec 2009 23:12:00 +0000</pubDate><atom:updated>2009-12-15T15:12:18.222-08:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>Lean</category><title>Jaded .Net</title><description>&lt;p&gt;I love talking with Ryan and others passionate about new technology and languages. Lately though I have been increasingly jaded with anything \xE2\x80\x98new\xE2\x80\x99. &lt;/p&gt;  &lt;p&gt;How many different data technologies do we need? ADO .Net, Nhibernate, Linq-2-SQL, Entity Framework version.. whatever. We have been connecting to databases for over 20 years so why are we still worrying about this?!&lt;/p&gt;  &lt;p&gt;The sheer number of UI frameworks is reaching the point of ridiculousness. I was reading the WPF Disciples Google Group and ran across this &lt;a href=\"http://groups.google.com/group/wpf-disciples/browse_thread/thread/b416715440fdac36/f63304369d9cac11?lnk=gst&amp;amp;q=vm+frameworks#f63304369d9cac11\"&gt;post&lt;/a&gt;. Paul Stovell listed all the MVVM, MVC, MVC frameworks he knew of (around 11). Then everyone was commenting with their own \xE2\x80\x98me too\xE2\x80\x99 response. &lt;/p&gt;  &lt;p&gt;Am I the only one who finds that utterly hilarious? How many frameworks do we need?!&lt;/p&gt;  &lt;p&gt;Ryan is extremely involved with Ruby, Python, F#, and the other \xE2\x80\x98new\xE2\x80\x99 languages to the .Net Framework. I have been delaying learning Ruby for too long, because it's hard to get motivated to learn a new language. I see the potential and the possibilities, but I quickly get discouraged and uninterested.&lt;/p&gt;  &lt;p&gt;I have to ask myself\xE2\x80\xA6 why am I jaded? Why am I disinterested in things that used to excite me?&lt;/p&gt;  &lt;p&gt;The more I thought about it, the more the conclusion became crystal clear. Every project I have been a part of has had the same problems. None of the problems were technology related. &lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;&lt;strong&gt;&lt;em&gt;Why would I get excited about a solution to a problem I don\xE2\x80\x99t have?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;Reminds me of Karl Pilkington\xE2\x80\x99s comment about this picture of twins on one of the Ricky Gervais podcasts. Karl saw a picture of a set of twins on an office desk (obviously the kids of the guy sitting at the desk). His great idea was since they look alike and are dressed alike, the parent could just have the picture of one of them and save space. Ricky Gervais then commented something like :&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;&lt;strong&gt;&lt;em&gt;What you have there is the best non-solution to a problem that doesn\xE2\x80\x99t exist.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;And that is pretty much how I feel about most of the technological innovations these days. &lt;/p&gt;  &lt;p&gt;For example: can someone explain to me how Oslo is going to help me? I am also not sold on RIA or anything Cloud related. The technology is interesting, but I can\xE2\x80\x99t justify where I would use any of this stuff.&lt;/p&gt;  &lt;p&gt;&lt;a href=\"http://lh3.ggpht.com/_jZ1HIkVkz48/SygXzzRrlPI/AAAAAAAAABs/9PZawdlr-X0/s1600-h/shovelingCoal8.jpg\"&gt;&lt;img style=\"border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px\" title=\"shovelingCoal\" border=\"0\" alt=\"shovelingCoal\" align=\"left\" src=\"http://lh6.ggpht.com/_jZ1HIkVkz48/SygX0enYzVI/AAAAAAAAABw/LijbkyQCEY8/shovelingCoal_thumb6.jpg?imgmax=800\" width=\"240\" height=\"165\" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Sometimes I feel like a lone engineer shoveling coal into a furnace on a runaway train. I don't know where we are going, where we have been, and all I hear is FASTER, FASTER!&lt;/p&gt;  &lt;p&gt;When I scream for help, I get delivered a better shovel. &lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;&lt;strong&gt;I don't want a better shovel, I want to know why I am shoveling so much coal!!!&lt;/strong&gt;&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;Can't we do more with less? Can\xE2\x80\x99t we slow down? Do we even know why we are in this train?!&lt;/p&gt;  &lt;p&gt;Lately the murmurings on different blogs, podcasts, and developers has been that software development has gotten too complicated. How can that be true when we have tons of tools and frameworks that should make life easier? jQuery makes Javascript easier. Pick your favorite Data Access tool / ORM makes data access easier. Any number of UI frameworks makes UI construction easier. So why do we think things are more complicated? Shouldn\xE2\x80\x99t our life be easier?&lt;/p&gt;  &lt;p&gt;The majority of projects are always behind, always over budgeted, and always unclear on where they are and where they are going. This has been my experience spanning multiple companies and multiple positions on different teams. I am fully humble enough to recognize that \xE2\x80\x9CI\xE2\x80\x9D might be the problem, but I doubt it. There is enough shared pain through my conversations with other developers to recognize its a industry wide problem.&lt;/p&gt;  &lt;p&gt;The only project I was a part of that didn\xE2\x80\x99t feel this way had a full time Project Manager and a team full of very skilled developers. To me it didn\xE2\x80\x99t feel like the project was better run, it was just we had enough skilled team members to overcome any poor execution or poor planning. That isn\xE2\x80\x99t saying our PM wasn\xE2\x80\x99t an all star because he was. My point is that although the project was a \xE2\x80\x98success\xE2\x80\x99 I didn\xE2\x80\x99t feel like it was successful because we had a great methodology. We just powered through any complications.&lt;/p&gt;  &lt;p&gt;Every project (including that last \xE2\x80\x98successful\xE2\x80\x99 one) always had mad dashes of insane hours of work followed by listless lulls as we waited for one thing or another. I never felt I had enough time to do my work and other activities related to work (ie blog, present, create frameworks)&lt;/p&gt;  &lt;p&gt;Where am I going with this? I wanted to capture my state of mind and why I am re-examining how and why I develop. &lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;&lt;strong&gt;&lt;em&gt;The status quo will burn me out.&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;The ole definition of insanity : Doing the same thing over and over again expecting different results.&lt;/p&gt;  &lt;p&gt;I am tired of doing the same thing, so what can I do different? Why is there this constant pain? I know there are solutions and it's time for me to document my mental journey as I search for answers. Maybe my breadcrumbs will help those that follow. &lt;/p&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-2248140507224705082?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2009/12/jaded-net.html</link><author>noreply@blogger.com (JB)</author><thr:total>1</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-1252446438963407864</guid><pubDate>Tue, 15 Dec 2009 23:05:00 +0000</pubDate><atom:updated>2009-12-15T15:37:05.887-08:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>Lean</category><title>Examining how we develop software</title><description>&lt;p&gt;What I am starting is a mental exercise exploring how my view on software development is changing. Since this is a basically a brain dump, treat it as such. Feel free to comment on what I say... offer advice and opinions. Maybe there is something you can sympathize with. &lt;/p&gt;  &lt;p&gt;What has started me thinking along these lines has been my recent readings of The Toyota Way and my re-reading of The Goal. &lt;/p&gt;  &lt;table border=\"0\" cellspacing=\"0\" cellpadding=\"2\" width=\"400\"&gt;&lt;tbody&gt;     &lt;tr&gt;       &lt;td valign=\"top\" width=\"200\"&gt;         &lt;table border=\"0\" cellspacing=\"0\" cellpadding=\"0\"&gt;&lt;tbody&gt;             &lt;tr&gt;               &lt;td&gt;&lt;a href=\"http://www.amazon.com/Toyota-Way-Jeffrey-Liker/dp/0071392319%3FSubscriptionId%3D0JTCV5ZMHMF7ZYTXGFR2%26tag%3Dbrdicr-20%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D0071392319\"&gt;The Toyota Way&lt;/a&gt;                   &lt;br /&gt;&lt;img src=\"http://ecx.images-amazon.com/images/I/51UatoYrcWL._SL160_.jpg\" /&gt; &lt;/td&gt;             &lt;/tr&gt;           &lt;/tbody&gt;&lt;/table&gt;       &lt;/td&gt;        &lt;td valign=\"top\" width=\"200\"&gt;         &lt;table border=\"0\" cellspacing=\"0\" cellpadding=\"0\"&gt;&lt;tbody&gt;             &lt;tr&gt;               &lt;td&gt;&lt;a href=\"http://www.amazon.com/Goal-Process-Ongoing-Improvement/dp/0884271781%3FSubscriptionId%3D0JTCV5ZMHMF7ZYTXGFR2%26tag%3Dbrdicr-20%26linkCode%3Dxm2%26camp%3D2025%26creative%3D165953%26creativeASIN%3D0884271781\"&gt;The Goal: A Process of Ongoing Improvement&lt;/a&gt;                   &lt;br /&gt;&lt;img src=\"http://ecx.images-amazon.com/images/I/51W2NXJAXHL._SL160_.jpg\" /&gt; &lt;/td&gt;             &lt;/tr&gt;           &lt;/tbody&gt;&lt;/table&gt;       &lt;/td&gt;     &lt;/tr&gt;   &lt;/tbody&gt;&lt;/table&gt;  &lt;p&gt;Both readings have me re-examining my career and software development. Asking questions like, Are we focused on the right things? &lt;/p&gt;  &lt;p&gt;Anyway here are the posts:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;&lt;a href=\"http://www.theabsentmindedcoder.com/2009/12/jaded-net.html\"&gt;Jaded .Net&lt;/a&gt; &lt;/li&gt;    &lt;li&gt;&lt;a href=\"http://www.theabsentmindedcoder.com/2009/12/goal.html\"&gt;The Goal&lt;/a&gt; &lt;/li&gt;    &lt;li&gt;Estimating the Impossible &lt;/li&gt; &lt;/ul&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-1252446438963407864?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2009/12/examining-how-we-develop-software.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-2601069143538500443</guid><pubDate>Wed, 25 Nov 2009 22:54:00 +0000</pubDate><atom:updated>2009-11-25T14:57:31.338-08:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>WPF</category><title>Named Command Decorator</title><description>&lt;p&gt;Here is the problem, we have a list of \xE2\x80\x98commands\xE2\x80\x99 we wish to show depending on what view model / entity is active. If we just had a collection of ICommands, we could show buttons but what would their content be?&lt;/p&gt;  &lt;p&gt;My solution is to use the decorator pattern to decorate commands with a Name that can be used as the content for the buttons.&lt;/p&gt;  &lt;p&gt;My decorator looks like :&lt;/p&gt;  &lt;div style=\"font-family: consolas; background: #161616; color: white; font-size: 14pt\"&gt;   &lt;p style=\"margin: 0px\"&gt;&amp;#160;&amp;#160;&amp;#160; &lt;span style=\"color: #2b91af\"&gt;public&lt;/span&gt; &lt;span style=\"color: #2b91af\"&gt;class&lt;/span&gt; &lt;span style=\"color: #ff7400\"&gt;NamedCommand&lt;/span&gt; : &lt;span style=\"color: #2b91af\"&gt;ICommand&lt;/span&gt;&lt;/p&gt;    &lt;p style=\"margin: 0px\"&gt;&amp;#160;&amp;#160;&amp;#160; {&lt;/p&gt;    &lt;p style=\"margin: 0px\"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style=\"color: #2b91af\"&gt;public&lt;/span&gt; NamedCommand(&lt;span style=\"color: #2b91af\"&gt;ICommand&lt;/span&gt; decoratedCommand, &lt;span style=\"color: #2b91af\"&gt;string&lt;/span&gt; name)&lt;/p&gt;    &lt;p style=\"margin: 0px\"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; {&lt;/p&gt;    &lt;p style=\"margin: 0px\"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; _DecoratedCommand = decoratedCommand;&lt;/p&gt;    &lt;p style=\"margin: 0px\"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; Name = name;&lt;/p&gt;    &lt;p style=\"margin: 0px\"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; }&lt;/p&gt;    &lt;p style=\"margin: 0px\"&gt;&amp;#160;&lt;/p&gt;    &lt;p style=\"margin: 0px\"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style=\"color: #2b91af\"&gt;readonly&lt;/span&gt; &lt;span style=\"color: #2b91af\"&gt;ICommand&lt;/span&gt; _DecoratedCommand;&lt;/p&gt;    &lt;p style=\"margin: 0px\"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style=\"color: #2b91af\"&gt;public&lt;/span&gt; &lt;span style=\"color: #2b91af\"&gt;string&lt;/span&gt; Name { &lt;span style=\"color: #2b91af\"&gt;get&lt;/span&gt;; &lt;span style=\"color: #2b91af\"&gt;set&lt;/span&gt;; }&lt;/p&gt;    &lt;p style=\"margin: 0px\"&gt;&amp;#160;&lt;/p&gt;    &lt;p style=\"margin: 0px\"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style=\"color: #2b91af\"&gt;public&lt;/span&gt; &lt;span style=\"color: #2b91af\"&gt;void&lt;/span&gt; Execute(&lt;span style=\"color: #2b91af\"&gt;object&lt;/span&gt; parameter)&lt;/p&gt;    &lt;p style=\"margin: 0px\"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; {&lt;/p&gt;    &lt;p style=\"margin: 0px\"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; _DecoratedCommand.Execute(parameter);&lt;/p&gt;    &lt;p style=\"margin: 0px\"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; }&lt;/p&gt;    &lt;p style=\"margin: 0px\"&gt;&amp;#160;&lt;/p&gt;    &lt;p style=\"margin: 0px\"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style=\"color: #2b91af\"&gt;public&lt;/span&gt; &lt;span style=\"color: #2b91af\"&gt;bool&lt;/span&gt; CanExecute(&lt;span style=\"color: #2b91af\"&gt;object&lt;/span&gt; parameter)&lt;/p&gt;    &lt;p style=\"margin: 0px\"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; {&lt;/p&gt;    &lt;p style=\"margin: 0px\"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style=\"color: #2b91af\"&gt;return&lt;/span&gt; _DecoratedCommand.CanExecute(parameter);&lt;/p&gt;    &lt;p style=\"margin: 0px\"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; }&lt;/p&gt;    &lt;p style=\"margin: 0px\"&gt;&amp;#160;&lt;/p&gt;    &lt;p style=\"margin: 0px\"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style=\"color: #2b91af\"&gt;public&lt;/span&gt; &lt;span style=\"color: #2b91af\"&gt;event&lt;/span&gt; &lt;span style=\"color: #2b91af\"&gt;EventHandler&lt;/span&gt; CanExecuteChanged;&lt;/p&gt;    &lt;p style=\"margin: 0px\"&gt;&amp;#160;&amp;#160;&amp;#160; }      &lt;br /&gt;&lt;/p&gt; &lt;/div&gt;  &lt;p&gt;&lt;/p&gt;  &lt;p&gt;I then created an extension method on ICommand :&lt;/p&gt;  &lt;div style=\"font-family: consolas; background: #161616; color: white; font-size: 14pt\"&gt;   &lt;p style=\"margin: 0px\"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style=\"color: #2b91af\"&gt;public&lt;/span&gt; &lt;span style=\"color: #2b91af\"&gt;static&lt;/span&gt; &lt;span style=\"color: #2b91af\"&gt;ICommand&lt;/span&gt; Name(&lt;span style=\"color: #2b91af\"&gt;this&lt;/span&gt; &lt;span style=\"color: #2b91af\"&gt;ICommand&lt;/span&gt; command, &lt;span style=\"color: #2b91af\"&gt;string&lt;/span&gt; name)&lt;/p&gt;    &lt;p style=\"margin: 0px\"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; {&lt;/p&gt;    &lt;p style=\"margin: 0px\"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style=\"color: #2b91af\"&gt;return&lt;/span&gt; &lt;span style=\"color: #2b91af\"&gt;new&lt;/span&gt; &lt;span style=\"color: #ff7400\"&gt;NamedCommand&lt;/span&gt;(command, name);&lt;/p&gt;    &lt;p style=\"margin: 0px\"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; }      &lt;br /&gt;&lt;/p&gt; &lt;/div&gt;  &lt;p&gt;So in the code I can now do:&lt;/p&gt;  &lt;div style=\"font-family: consolas; background: #161616; color: white; font-size: 14pt\"&gt;   &lt;p style=\"margin: 0px\"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; Commands.Add(&lt;span style=\"color: #2b91af\"&gt;new&lt;/span&gt; &lt;span style=\"color: #ff7400\"&gt;ActionCommand&lt;/span&gt;(OnOpen).Name(&lt;span style=\"color: #668f5f\"&gt;&amp;quot;Open&amp;quot;&lt;/span&gt;));&lt;/p&gt; &lt;/div&gt;  &lt;p&gt;For my WPF visual, I have a DataTemplate :&lt;/p&gt;  &lt;div style=\"font-family: consolas; background: #161616; color: white; font-size: 14pt\"&gt;   &lt;p style=\"margin: 0px\"&gt;&lt;span style=\"color: #668f5f\"&gt;&amp;#160;&amp;#160;&amp;#160; &lt;/span&gt;&lt;span style=\"color: blue\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color: #2b91af\"&gt;DataTemplate&lt;/span&gt;&lt;span style=\"color: #ff7400\"&gt; DataType&lt;/span&gt;&lt;span style=\"color: blue\"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style=\"color: #a31515\"&gt;x&lt;/span&gt;&lt;span style=\"color: blue\"&gt;:&lt;/span&gt;&lt;span style=\"color: #a31515\"&gt;Type&lt;/span&gt;&lt;span style=\"color: red\"&gt; Commands&lt;/span&gt;&lt;span style=\"color: blue\"&gt;:&lt;/span&gt;&lt;span style=\"color: red\"&gt;NamedCommand&lt;/span&gt;&lt;span style=\"color: blue\"&gt;}&lt;/span&gt;&lt;span style=\"color: #668f5f\"&gt;&amp;quot;&lt;/span&gt;&lt;span style=\"color: blue\"&gt; &amp;gt;&lt;/span&gt;&lt;/p&gt;    &lt;p style=\"margin: 0px\"&gt;&lt;span style=\"color: #668f5f\"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;/span&gt;&lt;span style=\"color: blue\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color: #2b91af\"&gt;Button&lt;/span&gt;&lt;span style=\"color: #ff7400\"&gt; Content&lt;/span&gt;&lt;span style=\"color: blue\"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style=\"color: #a31515\"&gt;Binding&lt;/span&gt;&lt;span style=\"color: red\"&gt; Name&lt;/span&gt;&lt;span style=\"color: blue\"&gt;}&lt;/span&gt;&lt;span style=\"color: #668f5f\"&gt;&amp;quot;&lt;/span&gt;&lt;/p&gt;    &lt;p style=\"margin: 0px\"&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; &lt;span style=\"color: #ff7400\"&gt;Command&lt;/span&gt;&lt;span style=\"color: blue\"&gt;=&amp;quot;{&lt;/span&gt;&lt;span style=\"color: #a31515\"&gt;Binding&lt;/span&gt;&lt;span style=\"color: blue\"&gt; }&lt;/span&gt;&lt;span style=\"color: #668f5f\"&gt;&amp;quot;&lt;/span&gt;&lt;span style=\"color: blue\"&gt; /&amp;gt;&lt;/span&gt;&lt;/p&gt;    &lt;p style=\"margin: 0px\"&gt;&lt;span style=\"color: #668f5f\"&gt;&amp;#160;&amp;#160;&amp;#160; &lt;/span&gt;&lt;span style=\"color: blue\"&gt;&amp;lt;/&lt;/span&gt;&lt;span style=\"color: #2b91af\"&gt;DataTemplate&lt;/span&gt;&lt;span style=\"color: blue\"&gt;&amp;gt;&lt;/span&gt;&lt;/p&gt; &lt;/div&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-2601069143538500443?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2009/11/named-command-decorator_25.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-3425923371448516846</guid><pubDate>Thu, 29 Oct 2009 15:43:00 +0000</pubDate><atom:updated>2009-10-29T08:43:26.184-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>WPF</category><category domain='http://www.blogger.com/atom/ns#'>Structure Map</category><title>Aop INotifyPropertyChanged StructureMap</title><description>&lt;p&gt;Anyone who has worked with INotifyPropertyChanged knows that this simple interface can be a royal pain in the ass.&lt;/p&gt;  &lt;p&gt;To try and eliminate the pain, people have created some great solutions using AOP : IL weaving (&lt;a href=\"http://www.postsharp.org/\"&gt;PostSharp&lt;/a&gt;) and using a proxy (&lt;a href=\"http://serialseb.blogspot.com/2008/05/implementing-inotifypropertychanged.html\"&gt;Castle Dynamic Proxy&lt;/a&gt;).&lt;/p&gt;  &lt;p&gt;PostSharp has a little too much voodoo for me atm. I think I will warm up to it though and re-examine using PostSharp on my next solution. But for now, I wanted to use Castle Project\xE2\x80\x99s Dynamic Proxy.&lt;/p&gt;  &lt;p&gt;Naturally since Castle also has a very popular IoC container in Windsor, most examples marry Dynamic Proxy and Windsor to form an AOP INotifyPropertyChanged solution.&lt;/p&gt;  &lt;p&gt;Since I am using StructureMap for this project, I endeavored to create my own solution using Dynamic Proxy.&lt;/p&gt;  &lt;p&gt;My first attempt I shared at the Virtual Brown Bag look liked it worked but in reality I was constructing my objects twice. &lt;/p&gt;  &lt;p&gt;Once with SM and once with the Proxy generator. &lt;/p&gt;  &lt;p&gt;I had to go back to the drawing board and posted my problem at the SM google group. &lt;a href=\"http://groups.google.com/group/structuremap-users/browse_thread/thread/1a6b19ce8152db1b?hl=en\"&gt;http://groups.google.com/group/structuremap-users/browse_thread/thread/1a6b19ce8152db1b?hl=en&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;I believe the syntax given to me was an older version of SM. For the record, I am using version 2.5.3.0&lt;/p&gt;  &lt;p&gt;But it did direct me to the general idea on where I should start looking. I ended up needing to create an IBuildInterceptor.&lt;/p&gt;  &lt;div id=\"codeSnippetWrapper\"&gt;   &lt;pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\" id=\"codeSnippet\"&gt;&lt;span style=\"color: #0000ff\"&gt;public&lt;/span&gt; &lt;span style=\"color: #0000ff\"&gt;class&lt;/span&gt; MyBuildInterceptor : IBuildInterceptor&lt;br /&gt;   {&lt;br /&gt;       &lt;span style=\"color: #0000ff\"&gt;public&lt;/span&gt; MyBuildInterceptor(Type concreteType)&lt;br /&gt;       {&lt;br /&gt;           _ConcreteType = concreteType;&lt;br /&gt;       }&lt;br /&gt;&lt;br /&gt;       &lt;span style=\"color: #0000ff\"&gt;readonly&lt;/span&gt; Type _ConcreteType;&lt;br /&gt;&lt;br /&gt;       &lt;span style=\"color: #0000ff\"&gt;public&lt;/span&gt; &lt;span style=\"color: #0000ff\"&gt;object&lt;/span&gt; Build(BuildSession buildSession, Type pluginType, Instance instance)&lt;br /&gt;       {&lt;br /&gt;           var constructorArgs = _ConcreteType&lt;br /&gt;               .GetConstructors()&lt;br /&gt;               .FirstOrDefault()&lt;br /&gt;               .GetParameters()&lt;br /&gt;               .Select(p =&amp;gt; buildSession.CreateInstance(p.ParameterType))&lt;br /&gt;               .ToArray();&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;           var interceptors = &lt;span style=\"color: #0000ff\"&gt;new&lt;/span&gt; List&amp;lt;IInterceptor&amp;gt;&lt;br /&gt;                                  {&lt;br /&gt;                                      &lt;span style=\"color: #0000ff\"&gt;new&lt;/span&gt; NotifyInterceptor()&lt;br /&gt;                                  }&lt;br /&gt;                                  .ToArray();&lt;br /&gt;&lt;br /&gt;           &lt;span style=\"color: #0000ff\"&gt;return&lt;/span&gt; &lt;span style=\"color: #0000ff\"&gt;new&lt;/span&gt; ProxyGenerator().CreateClassProxy(_ConcreteType, interceptors, constructorArgs);&lt;br /&gt;       }&lt;br /&gt;&lt;br /&gt;       &lt;span style=\"color: #0000ff\"&gt;public&lt;/span&gt; IBuildPolicy Clone()&lt;br /&gt;       {&lt;br /&gt;           &lt;span style=\"color: #0000ff\"&gt;return&lt;/span&gt; InnerPolicy.Clone();&lt;br /&gt;       }&lt;br /&gt;&lt;br /&gt;       &lt;span style=\"color: #0000ff\"&gt;public&lt;/span&gt; &lt;span style=\"color: #0000ff\"&gt;void&lt;/span&gt; EjectAll()&lt;br /&gt;       {&lt;br /&gt;           InnerPolicy.EjectAll();&lt;br /&gt;       }&lt;br /&gt;&lt;br /&gt;       &lt;span style=\"color: #0000ff\"&gt;public&lt;/span&gt; IBuildPolicy InnerPolicy { get; set; }&lt;br /&gt;   }&lt;/pre&gt;\n\n  &lt;br /&gt;&lt;/div&gt;\n\n\
      &lt;p&gt;&lt;/p&gt;\n\n\
      &lt;p&gt;To register my ViewModels I created a convention using a TypeScanner&lt;/p&gt;\n\n\
      &lt;div id=\"codeSnippetWrapper\"&gt;\n  &lt;pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\" id=\"codeSnippet\"&gt;&lt;span style=\"color: #0000ff\"&gt;public&lt;/span&gt; &lt;span style=\"color: #0000ff\"&gt;class&lt;/span&gt; MyNotifyConvention : ITypeScanner&lt;br /&gt;{&lt;br /&gt;    &lt;span style=\"color: #0000ff\"&gt;public&lt;/span&gt; &lt;span style=\"color: #0000ff\"&gt;void&lt;/span&gt; Process(Type type, PluginGraph graph)&lt;br /&gt;    {&lt;br /&gt;&lt;br /&gt;        &lt;span style=\"color: #0000ff\"&gt;if&lt;/span&gt; (type.GetInterface(&lt;span style=\"color: #006080\"&gt;&amp;quot;IViewModel&amp;quot;&lt;/span&gt;) == &lt;span style=\"color: #0000ff\"&gt;null&lt;/span&gt;)&lt;br /&gt;            &lt;span style=\"color: #0000ff\"&gt;return&lt;/span&gt;;&lt;br /&gt;&lt;br /&gt;        var interfaceType = type.GetInterfaces().FirstOrDefault(i =&amp;gt; i.Name.Contains(&lt;span style=\"color: #006080\"&gt;&amp;quot;ViewModel&amp;quot;&lt;/span&gt;)&lt;br /&gt;                                                            &amp;amp;&amp;amp; i.Name != &lt;span style=\"color: #006080\"&gt;&amp;quot;IViewModel&amp;quot;&lt;/span&gt;);&lt;br /&gt;&lt;br /&gt;        &lt;span style=\"color: #0000ff\"&gt;if&lt;/span&gt; (interfaceType == &lt;span style=\"color: #0000ff\"&gt;null&lt;/span&gt;)&lt;br /&gt;            &lt;span style=\"color: #0000ff\"&gt;return&lt;/span&gt;;&lt;br /&gt;&lt;br /&gt;        graph.Configure(r =&amp;gt;&lt;br /&gt;                        r.ForRequestedType(interfaceType)&lt;br /&gt;                        .InterceptConstructionWith(&lt;span style=\"color: #0000ff\"&gt;new&lt;/span&gt; MyBuildInterceptor(type))&lt;br /&gt;                        .TheDefaultIsConcreteType(type));&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;\n\n  &lt;br /&gt;&lt;/div&gt;\n\n\
      &lt;p&gt;&lt;/p&gt;\n\n\
      &lt;p&gt;I then used a Dynamic Proxy Interceptor that I basically copy and pasted from Serial Seb\xE2\x80\x99s &lt;a href=\"http://serialseb.blogspot.com/2008/05/implementing-inotifypropertychanged.html\"&gt;example&lt;/a&gt;.&lt;/p&gt;\n\n\
      &lt;div id=\"codeSnippetWrapper\"&gt;\n  &lt;pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\" id=\"codeSnippet\"&gt;&lt;span style=\"color: #0000ff\"&gt;public&lt;/span&gt; &lt;span style=\"color: #0000ff\"&gt;class&lt;/span&gt; NotifyInterceptor : IInterceptor&lt;br /&gt;{&lt;br /&gt;    &lt;span style=\"color: #0000ff\"&gt;public&lt;/span&gt; &lt;span style=\"color: #0000ff\"&gt;void&lt;/span&gt; Intercept(IInvocation invocation)&lt;br /&gt;    {&lt;br /&gt;        &lt;span style=\"color: #008000\"&gt;// let the original call go through first, so we can notify *after*&lt;/span&gt;&lt;br /&gt;        invocation.Proceed();&lt;br /&gt;&lt;br /&gt;        &lt;span style=\"color: #0000ff\"&gt;if&lt;/span&gt; (invocation.Method.Name.StartsWith(&lt;span style=\"color: #006080\"&gt;&amp;quot;set_&amp;quot;&lt;/span&gt;))&lt;br /&gt;        {&lt;br /&gt;            &lt;span style=\"color: #0000ff\"&gt;string&lt;/span&gt; propertyName = invocation.Method.Name.Substring(4);&lt;br /&gt;            RaisePropertyChangedEvent(invocation, propertyName, invocation.TargetType);&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;&lt;br /&gt;    &lt;span style=\"color: #0000ff\"&gt;void&lt;/span&gt; RaisePropertyChangedEvent(IInvocation invocation, &lt;span style=\"color: #0000ff\"&gt;string&lt;/span&gt; propertyName, Type type)&lt;br /&gt;    {&lt;br /&gt;        &lt;span style=\"color: #008000\"&gt;// get the field storing the delegate list that are stored by the event.&lt;/span&gt;&lt;br /&gt;        var methodInfo = type.GetMethod(&lt;span style=\"color: #006080\"&gt;&amp;quot;RaisePropertyChanged&amp;quot;&lt;/span&gt;);&lt;br /&gt;&lt;br /&gt;        &lt;span style=\"color: #0000ff\"&gt;if&lt;/span&gt; (methodInfo == &lt;span style=\"color: #0000ff\"&gt;null&lt;/span&gt;)&lt;br /&gt;        {&lt;br /&gt;            &lt;span style=\"color: #0000ff\"&gt;if&lt;/span&gt; (type.BaseType != &lt;span style=\"color: #0000ff\"&gt;null&lt;/span&gt;)&lt;br /&gt;                RaisePropertyChangedEvent(invocation, propertyName, type.BaseType);&lt;br /&gt;        }&lt;br /&gt;        &lt;span style=\"color: #0000ff\"&gt;else&lt;/span&gt; &lt;span style=\"color: #008000\"&gt;// info != null&lt;/span&gt;&lt;br /&gt;        {&lt;br /&gt;            methodInfo.Invoke(invocation.InvocationTarget, &lt;span style=\"color: #0000ff\"&gt;new&lt;/span&gt; &lt;span style=\"color: #0000ff\"&gt;object&lt;/span&gt;[] {propertyName});&lt;br /&gt;        }&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;\n\n  &lt;br /&gt;&lt;/div&gt;\n\n\
      &lt;p&gt;Instead of looking for the PropertyChanged Handler, I create a RaisePropertyChanged method and use that. Although I could raise the event using the field method Seb was using, WPF wasn\xE2\x80\x99t updating the binding. I didn\xE2\x80\x99t really bother to investigate and just rolled with this solution.&lt;/p&gt;\n\n\
      &lt;p&gt;So that\xE2\x80\x99s my solution and I\xE2\x80\x99ll start using it in my current solution. Naturally I will clean up the code some more etc. Feel free to use this for any of your own projects. You can also get the solution at my GitHub:&lt;/p&gt;\n\n\
      &lt;p&gt;&lt;a href=\"http://github.com/RookieOne/StructureMapAopNotify\"&gt;http://github.com/RookieOne/StructureMapAopNotify&lt;/a&gt;&lt;/p&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-3425923371448516846?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2009/10/aop-inotifypropertychanged-structuremap.html</link><author>noreply@blogger.com (JB)</author><thr:total>1</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-6707864310656370343</guid><pubDate>Tue, 27 Oct 2009 21:33:00 +0000</pubDate><atom:updated>2009-10-27T14:33:30.673-07:00</atom:updated><title>London Time?</title><description>&lt;p&gt;A friend ping\xE2\x80\x99d me on gchat and asked if he had a DateTime object with our time in Texas, how could he get the time in London.&lt;/p&gt;  &lt;p&gt;I quickly threw together this example on how I would do it. &lt;/p&gt;  &lt;div id=\"codeSnippetWrapper\"&gt;   &lt;pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\" id=\"codeSnippet\"&gt;DateTime time = DateTime.Now;&lt;br /&gt;&lt;br /&gt;TimeZoneInfo londonTimeZone = TimeZoneInfo&lt;br /&gt;    .GetSystemTimeZones()&lt;br /&gt;    .FirstOrDefault(t =&amp;gt; t.DisplayName.Contains(&lt;span style=\"color: #006080\"&gt;&amp;quot;London&amp;quot;&lt;/span&gt;));&lt;br /&gt;&lt;br /&gt;DateTime londonTime = TimeZoneInfo.ConvertTime(time, londonTimeZone);&lt;br /&gt;&lt;br /&gt;Console.WriteLine(&lt;span style=\"color: #006080\"&gt;&amp;quot;Its {0} here&amp;quot;&lt;/span&gt;, time);&lt;br /&gt;Console.WriteLine(&lt;span style=\"color: #006080\"&gt;&amp;quot;But its {0} in London&amp;quot;&lt;/span&gt;, londonTime);&lt;br /&gt;Console.WriteLine(&lt;span style=\"color: #006080\"&gt;&amp;quot;Blimey!&amp;quot;&lt;/span&gt;);&lt;br /&gt;Console.ReadLine();&lt;/pre&gt;\n\n  &lt;br /&gt;&lt;/div&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-6707864310656370343?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2009/10/london-time.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-8934537265050976798</guid><pubDate>Thu, 22 Oct 2009 18:34:00 +0000</pubDate><atom:updated>2009-10-22T11:34:49.063-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>Virtual Brown Bag</category><title>Virtual Brown Bag 10/22/09</title><description>&lt;p&gt;Today was a great virtual brown bag. Claudio will have a more exhaustive list of what was discussed, but I thought I would share some links to stuff I talked about.&lt;/p&gt;  &lt;h4&gt;Creating a Generic Type using Reflection&lt;/h4&gt;  &lt;p&gt;&lt;a href=\"http://geekswithblogs.net/marcel/archive/2007/03/24/109722.aspx\"&gt;http://geekswithblogs.net/marcel/archive/2007/03/24/109722.aspx&lt;/a&gt;&lt;/p&gt;  &lt;div id=\"codeSnippetWrapper\"&gt;   &lt;pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\" id=\"codeSnippet\"&gt;&lt;span style=\"color: #0000ff\"&gt;public&lt;/span&gt; &lt;span style=\"color: #0000ff\"&gt;static&lt;/span&gt; &lt;span style=\"color: #0000ff\"&gt;object&lt;/span&gt; CreateGeneric(Type generic, Type innerType, &lt;span style=\"color: #0000ff\"&gt;params&lt;/span&gt; &lt;span style=\"color: #0000ff\"&gt;object&lt;/span&gt;[] args)&lt;br /&gt;{&lt;br /&gt;    System.Type specificType = generic.MakeGenericType(&lt;span style=\"color: #0000ff\"&gt;new&lt;/span&gt; System.Type[] { innerType });&lt;br /&gt;    &lt;span style=\"color: #0000ff\"&gt;return&lt;/span&gt; Activator.CreateInstance(specificType, args);&lt;br /&gt;}&lt;/pre&gt;\n\n  &lt;br /&gt;&lt;/div&gt;\n\n\
      &lt;h4&gt;StackOverflow Question from Marvin&lt;/h4&gt;\n\n\
      &lt;p&gt;&lt;a href=\"http://stackoverflow.com/questions/1532991/help-with-a-windows-service-scheduled-task-that-must-use-a-web-browser-and-file-d\"&gt;http://stackoverflow.com/questions/1532991/help-with-a-windows-service-scheduled-task-that-must-use-a-web-browser-and-file-d&lt;/a&gt;&amp;#160;&lt;/p&gt;\n\n\
      &lt;p&gt;As Marvin and Claudio talked, I threw together an example on how I would solve the problem. Hopefully we can hear back from Marvin on whether it worked. :)&lt;/p&gt;\n\n\
      &lt;p&gt;The code snippet is here : &lt;a href=\"http://codesnippets.joyent.com/posts/show/2345\"&gt;http://codesnippets.joyent.com/posts/show/2345&lt;/a&gt;&lt;/p&gt;\n\n\
      &lt;div id=\"codeSnippetWrapper\"&gt;\n  &lt;pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\" id=\"codeSnippet\"&gt;var url = &lt;span style=\"color: #006080\"&gt;&amp;quot;http://www.codinghorror.com/blog/files/exported-font-and-colors-for-jeff-atwood-sept-19.zip&amp;quot;&lt;/span&gt;;&lt;br /&gt;&lt;br /&gt;var request = WebRequest.Create(url) &lt;span style=\"color: #0000ff\"&gt;as&lt;/span&gt; HttpWebRequest;&lt;br /&gt;&lt;br /&gt;var response = request.GetResponse();&lt;br /&gt;&lt;br /&gt;var readStream = response.GetResponseStream();&lt;br /&gt;&lt;br /&gt;var fileStream = &lt;span style=\"color: #0000ff\"&gt;new&lt;/span&gt; FileStream(&lt;span style=\"color: #006080\"&gt;@&amp;quot;C:\\temp\\dlZip.zip&amp;quot;&lt;/span&gt;, FileMode.Create);&lt;br /&gt;&lt;br /&gt;&lt;span style=\"color: #0000ff\"&gt;int&lt;/span&gt; readByte = readStream.ReadByte();&lt;br /&gt;&lt;span style=\"color: #0000ff\"&gt;while&lt;/span&gt;(readByte != -1)&lt;br /&gt;{&lt;br /&gt;    fileStream.WriteByte((&lt;span style=\"color: #0000ff\"&gt;byte&lt;/span&gt;)readByte);&lt;br /&gt;    readByte = readStream.ReadByte();&lt;br /&gt;}&lt;br /&gt;&lt;br /&gt;fileStream.Flush();&lt;br /&gt;fileStream.Close();&lt;/pre&gt;\n\n  &lt;br /&gt;&lt;/div&gt;\n\n\
      &lt;h4&gt;Using StructureMap with Castle Dynamic Proxy for INotifyPropertyChanged AOP&lt;/h4&gt;\n\n\
      &lt;p&gt;For creating the DynamicProxy interceptor I based my code off of : &lt;a href=\"http://serialseb.blogspot.com/2008/05/implementing-inotifypropertychanged.html\"&gt;http://serialseb.blogspot.com/2008/05/implementing-inotifypropertychanged.html&lt;/a&gt;&lt;/p&gt;\n\n\
      &lt;p&gt;&lt;/p&gt;\n\n\
      &lt;p&gt;&lt;/p&gt;\n\n\
      &lt;p&gt;The entire solution can be found here : &lt;a href=\"http://github.com/RookieOne/StructureMapAopNotify\"&gt;http://github.com/RookieOne/StructureMapAopNotify&lt;/a&gt;&lt;/p&gt;\n\n\
      &lt;p&gt;All in all, a darn good Virtual Brown Bag. :)&lt;/p&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-8934537265050976798?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2009/10/virtual-brown-bag-102209.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-3286631191173032360</guid><pubDate>Mon, 19 Oct 2009 15:27:00 +0000</pubDate><atom:updated>2009-10-19T08:27:09.732-07:00</atom:updated><title>My New Career at Code / EPS</title><description>&lt;p&gt;It\xE2\x80\x99s been over a week since I started at Code / EPS and I have to say I am loving it here.&lt;a href=\"http://lh5.ggpht.com/_jZ1HIkVkz48/StyFR_p5GtI/AAAAAAAAABg/OSuQ2K-XMm0/s1600-h/IMG_02763.jpg\"&gt;&lt;img style=\"border-right-width: 0px; display: inline; border-top-width: 0px; border-bottom-width: 0px; margin-left: 0px; border-left-width: 0px; margin-right: 0px\" title=\"IMG_0276\" border=\"0\" alt=\"IMG_0276\" align=\"right\" src=\"http://lh5.ggpht.com/_jZ1HIkVkz48/StyFTInA3nI/AAAAAAAAABk/R96nE_LJTcg/IMG_0276_thumb1.jpg?imgmax=800\" width=\"244\" height=\"184\" /&gt;&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;My computer came in on Friday and I spent most of the day setting it up. Everyone knows the drill of installing Visual Studio, Office, third party tools, etc. It\xE2\x80\x99s a ritual of blessing a new computer for programming work. The picture on the right was taken with my iPhone. The two 24 inch monitors are freakin awesome!&lt;/p&gt;  &lt;p&gt;There are a lot of intangibles that make working at EPS fun and a perfect fit for me at this time. Sharing an office with Claudio is a huge perk.&amp;#160; Having Markus as a boss is also a pleasant change. Most bosses can be disconnected from the current pulse on software development. Markus stays up to date and is also passionate about being cutting edge. Its nice working with people you respect and can learn from.&lt;/p&gt;  &lt;p&gt;I also like that I am not working at the client. Having worked at the clients offices for several years, I began to dislike the random commutes, unknown work conditions, and random hardware configurations. :( &lt;/p&gt;  &lt;p&gt;Here I have an office, with a window. I have a nice computer setup so that I can maximize my productivity. I know where I will be 2-3 months out. All in all, a nice change that adds peace of mind. I can now focus on my next phase in my career. &lt;/p&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-3286631191173032360?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2009/10/my-new-career-at-code-eps.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-6864930829399391228</guid><pubDate>Tue, 29 Sep 2009 05:22:00 +0000</pubDate><atom:updated>2009-09-28T22:23:08.457-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>Me</category><title>Catapult \xE2\x80\x93&gt; EPS</title><description>&lt;p&gt;If you have not heard already, I am leaving Catapult Systems to go join the team at EPS Consulting.&lt;/p&gt;  &lt;p&gt;Catapult Systems is a fantastic company. They are a NSI (National Systems Integrator) and have 12 Microsoft competencies. They were awarded the 2009 Microsoft Worldwide Partner Conference Award for Custom Development Solutions. &lt;/p&gt;  &lt;p&gt;&lt;a title=\"http://www.catapultsystems.com/About/News/Articles/Pages/CatapultSystemsWinsEliteMicrosoftWorldwidePartneroftheYearAward.aspx\" href=\"http://www.catapultsystems.com/About/News/Articles/Pages/CatapultSystemsWinsEliteMicrosoftWorldwidePartneroftheYearAward.aspx\"&gt;http://www.catapultsystems.com/About/News/Articles/Pages/CatapultSystemsWinsEliteMicrosoftWorldwidePartneroftheYearAward.aspx&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;I will have to put a little plug in here and say I was part of the team at Wisenbaker. :)&lt;/p&gt;  &lt;p&gt;My departure has nothing to do with an exodus from Catapult. Catapult has positioned itself as a Microsoft Consulting company. I focus on Custom Application Development. What that means is I have very little interest in Sharepoint, EPM, Infrastructure, etc. I view selling and producing custom software products as a very different task than rolling out Windows 7.&lt;/p&gt;  &lt;p&gt;I also really want to focus more on training, presenting, and overall community activity. While Catapult encouraged this behavior (particularly Mark Whitmire), it was all done outside my normal duties. With EPS and some changes Markus has in store, we hope to make that part of my duties and expectations.&lt;/p&gt;  &lt;p&gt;My move is about my goals being slightly different than Catapult\xE2\x80\x99s goals while EPS\xE2\x80\x99s goals are more aligned with what I want to achieve. For example, at Houston TechFest I had some EPS coworkers come up and offer their support and advice. It was greatly appreciated. Their attendance and conversations made it clear they are pleased to have me on the team and are there to make me better at what I want to do.&lt;/p&gt;  &lt;p&gt;I still have lots of good friends at Catapult : Ryan Riley, David Morton, John McPherson, Apollo Gonzalez, Rafael Perez, etc.&lt;/p&gt;  &lt;p&gt;They have great ideas on revolutionizing the Application Development practice and I wish them the best of luck. &lt;/p&gt;  &lt;p&gt;For me, I am really looking forward to working with the team at EPS. I\xE2\x80\x99ve gotten to know Markus and Claudio (and others at EPS) over the past couple of months and am really impressed with them. This is my first time to be going to a company where I already know people (and respect their professionalism and skill level).&lt;/p&gt;  &lt;p&gt;I will still be doing Virtual Brown Bags with Claudio and will now be in a situation where it should be easier for me to participate. Before I had to arrange rooms with the client and never knew if I could have privacy, etc. It was a pain.&lt;/p&gt;  &lt;p&gt;My last day at Catapult will be Sept 30th. I then go on a brief vacation to Colorado to visit my Dad at the family mountain home. I come back on the 7th and start the new gig on the 8th. :D&lt;/p&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-6864930829399391228?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2009/09/catapult-eps.html</link><author>noreply@blogger.com (JB)</author><thr:total>2</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-868021485222375252</guid><pubDate>Tue, 29 Sep 2009 04:36:00 +0000</pubDate><atom:updated>2009-09-28T21:37:53.392-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>WPF</category><category domain='http://www.blogger.com/atom/ns#'>Patterns</category><category domain='http://www.blogger.com/atom/ns#'>TechFest</category><category domain='http://www.blogger.com/atom/ns#'>Fluent Interfaces</category><title>Houston Techfest</title><description>&lt;p&gt;Wow! That was lots of fun! I got the chance to see and talk to a lot of my friends who I haven\xE2\x80\x99t seen in awhile. &lt;/p&gt;  &lt;p&gt;Also, it was nice to be finally finished with my two presentations. Both were fun but I will admit to liking my Evolve Your Code material a bit more than the WPF Input Validation. They were both a lot of work. Be sure to thank presenters. I knew work went into the presentations but I didn\xE2\x80\x99t appreciate how much until I tried to do two. I learned a lesson with that decision. Never do 2 new presentations. It\xE2\x80\x99s way too much work and both suffer from neglect. I will write a post on all my presentation lessons later.&lt;/p&gt;  &lt;p&gt;Without the 2 presentations looming over me and my new job, I should be able to get back to blogging more. I love sharing what I know, even if its just to myself months from now when I forget everything. :)&lt;/p&gt;  &lt;p&gt;For the slides I am trying out slideshare and am also using Git Hub for the slides and solutions.&lt;/p&gt;  &lt;h4&gt;Evolve Your Code:&lt;/h4&gt;  &lt;p&gt;&lt;a title=\"http://www.slideshare.net/RookieOne/evolve-your-code\" href=\"http://www.slideshare.net/RookieOne/evolve-your-code\"&gt;http://www.slideshare.net/RookieOne/evolve-your-code&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;a title=\"http://github.com/RookieOne/Evolve-Your-Code\" href=\"http://github.com/RookieOne/Evolve-Your-Code\"&gt;http://github.com/RookieOne/Evolve-Your-Code&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;h4&gt;WPF Input Validation:&lt;/h4&gt;  &lt;p&gt;&lt;a title=\"http://www.slideshare.net/RookieOne/wpf-validation\" href=\"http://www.slideshare.net/RookieOne/wpf-validation\"&gt;http://www.slideshare.net/RookieOne/wpf-validation&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;&lt;a title=\"http://github.com/RookieOne/WPF-Input-Validation\" href=\"http://github.com/RookieOne/WPF-Input-Validation\"&gt;http://github.com/RookieOne/WPF-Input-Validation&lt;/a&gt;&lt;/p&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-868021485222375252?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2009/09/houston-techfest.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-8037348534674286549</guid><pubDate>Wed, 19 Aug 2009 14:02:00 +0000</pubDate><atom:updated>2009-08-19T07:03:13.301-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>Monads</category><title>Monads.</title><description>&lt;p&gt;Ryan is the monad king. Ok.. well maybe not the king. But he has a big megaphone and drops a \xE2\x80\x98monad\xE2\x80\x99 bomb daily. He has been doing some fantastic work in F# and C# using monads. He shares his code and I just stare\xE2\x80\xA6 going WTF is this!&lt;/p&gt;  &lt;p&gt;I know the basic concepts of what a monad is mostly due to random discussions. I never put any solid research time into &lt;strong&gt;what&lt;/strong&gt; it is\xE2\x80\xA6 &lt;strong&gt;why &lt;/strong&gt;I would use it\xE2\x80\xA6 and &lt;strong&gt;where &lt;/strong&gt;does it fit into the larger scheme of my personal development toolkit.&lt;/p&gt;  &lt;p&gt;I started my adventure in learning where I normally start\xE2\x80\xA6 wikipedia.&lt;/p&gt;  &lt;p&gt;&lt;a title=\"http://en.wikipedia.org/wiki/Monad_%28functional_programming%29\" href=\"http://en.wikipedia.org/wiki/Monad_%28functional_programming%29\"&gt;http://en.wikipedia.org/wiki/Monad_%28functional_programming%29&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Whoa.. lots of new terms thrown at me. Here are some random notes and crazy thoughts I am pulling out (mostly for myself).&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;\xE2\x80\x9Ca &lt;b&gt;monad&lt;/b&gt; is a kind of &lt;a href=\"http://en.wikipedia.org/wiki/Abstract_data_type\"&gt;abstract data type&lt;/a&gt; used to represent &lt;a href=\"http://en.wikipedia.org/wiki/Computation\"&gt;computations&lt;/a&gt; (instead of data in the &lt;a href=\"http://en.wikipedia.org/wiki/Domain_model\"&gt;domain model&lt;/a&gt;)\xE2\x80\x9D&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;That sparks some ideas. Anyone who talks to me on a regular basis knows I am a huge Greg Young CQS fan. I think I\xE2\x80\x99ve always been circling around these ideas but Greg\xE2\x80\x99s insights just pulled away the haze and brought into focus the essence of what always bothered me.&lt;/p&gt;  &lt;p&gt;For more information on Greg Young\xE2\x80\x99s CQS, I would suggest &lt;a title=\"http://jonathan-oliver.blogspot.com/2009/03/dddd-and-cqs-getting-started.html\" href=\"http://jonathan-oliver.blogspot.com/2009/03/dddd-and-cqs-getting-started.html\"&gt;http://jonathan-oliver.blogspot.com/2009/03/dddd-and-cqs-getting-started.html&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Jonathan has compiled a great set of links to get introduced to the ideas. I am by no means an expert, but I consider myself a CQS disciple. :)&lt;/p&gt;  &lt;p&gt;Back to monads.&lt;/p&gt;  &lt;p&gt;The idea of the \xE2\x80\x98domain\xE2\x80\x99 being a \xE2\x80\x98computation\xE2\x80\x99 or \xE2\x80\x98action\xE2\x80\x99 more than data makes me think there might be a connection to explore.&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;\xE2\x80\x9CMonads allow the programmer to chain actions together to build a &lt;a href=\"http://en.wikipedia.org/wiki/Pipeline_%28computing%29\"&gt;pipeline&lt;/a&gt;, in which each action is decorated with additional processing rules provided by the monad.\xE2\x80\x9D&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;This makes me think of the \xE2\x80\x98reconstruction\xE2\x80\x99 of a domain object by processing its events. That would be a neat POC to put together.&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;\xE2\x80\x9CThe &lt;i&gt;return&lt;/i&gt; operation puts a value from a plain type into a monadic container of type &lt;i&gt;M&lt;/i&gt;. The &lt;i&gt;bind&lt;/i&gt; operation performs the reverse process, extracting the original value from the container and passing it to the associated next function in the pipeline.\xE2\x80\x9D&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;I am still unclear on the whole wrapping business. I think I will revisit this again after going to another location to learn about monads.&lt;/p&gt;  &lt;p&gt;So I moved over to Channel 9 and began to watch:&lt;/p&gt;  &lt;p&gt;&lt;a title=\"http://channel9.msdn.com/shows/Going+Deep/Brian-Beckman-The-Zen-of-Expressing-State-The-State-Monad/\" href=\"http://channel9.msdn.com/shows/Going+Deep/Brian-Beckman-The-Zen-of-Expressing-State-The-State-Monad/\"&gt;http://channel9.msdn.com/shows/Going+Deep/Brian-Beckman-The-Zen-of-Expressing-State-The-State-Monad/&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Here are some random notes / quotes:&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;\xE2\x80\x9COnly two types of variables. A bound variable and a free variable. Bound variable is a function argument. A free variable has to be looked up somewhere else.\xE2\x80\x9D&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;&lt;strong&gt;State monad takes a state and spits out a state, content pair.&lt;/strong&gt;&lt;/p&gt;  &lt;blockquote&gt;   &lt;p&gt;\xE2\x80\x9CComposition is good\xE2\x80\x9D :)&lt;/p&gt; &lt;/blockquote&gt;  &lt;blockquote&gt;   &lt;p&gt;\xE2\x80\x9CMathematics is the art of abstraction and precision\xE2\x80\x9D&lt;/p&gt; &lt;/blockquote&gt;  &lt;p&gt;Is functional programming and monads a disruptive technology? Although it technically isn\xE2\x80\x99t that \xE2\x80\x98new\xE2\x80\x99. I think it might be. The comments around an army of OO programmers and the difficulty for learning to think functionally just resonates with the idea that functional programming is a disruptive technology (even though functional programming isn\xE2\x80\x99t new). &lt;/p&gt;  &lt;p&gt;Ok\xE2\x80\xA6 That was a pretty rough first day. Lots of terms and pictures and strange code thrown my way. It\xE2\x80\x99s time to process the information. I\xE2\x80\x99m pretty sure I will need to watch that video about 5 times in-between coding this stuff. I plan on trying Brian\xE2\x80\x99s exercises along with watching &lt;a href=\"http://channel9.msdn.com/shows/Going+Deep/Brian-Beckman-Dont-fear-the-Monads/\"&gt;\xE2\x80\x98Don\xE2\x80\x99t Fear the Monad\xE2\x80\x99&lt;/a&gt; (another Brian Beckman presentation).&lt;/p&gt;  &lt;p&gt;Ryan already has completed the first exercise in C# and F#. I will work on my own version of the C# exercise and then look at his code. I don\xE2\x80\x99t think I will dive into F# right now. I played with the language about 2 weeks ago but all I did was create \xE2\x80\x98Hello World\xE2\x80\x99. There is a &lt;a href=\"http://blog.codinglight.com/2009/08/houston-f-users-group-august-27th-700.html\"&gt;F# user group meeting on August 27th&lt;/a&gt; where I \xE2\x80\x98might\xE2\x80\x99 try to code these exercises.&lt;/p&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-8037348534674286549?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2009/08/monads.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-2130706187731981227</guid><pubDate>Fri, 07 Aug 2009 13:20:00 +0000</pubDate><atom:updated>2009-08-07T06:32:11.377-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>WPF</category><title>How do I hide columns with a Wpf GridView?</title><description>&lt;p&gt;In my current project we ran across a problem where we wanted to hide certain columns in a grid view based on domain criteria.&lt;/p&gt;  &lt;p&gt;We looked into custom grid headers, attached properties, custom controls, etc. Every path lead to a very complex and more importantly custom solution.&lt;/p&gt;  &lt;p&gt;I spent an afternoon playing around and came up with this solution which we are using today.&lt;/p&gt;  &lt;p&gt;It\xE2\x80\x99s simple, easy to follow, and doesn\xE2\x80\x99t require any custom code. All it uses is the power of style and triggers. The biggest knock is OH NOES! you have a bit of duplication in your xaml.&lt;/p&gt;  &lt;p&gt;What is it?&lt;/p&gt;  &lt;p&gt;Well, you set the \xE2\x80\x98View\xE2\x80\x99 property in your style. Then you utilize style triggers to swap out the View.&lt;/p&gt;  &lt;p&gt;Yup.. easy.. simple\xE2\x80\xA6 no mess.&lt;/p&gt;  &lt;p&gt;Example :&lt;/p&gt;  &lt;div id=\"codeSnippetWrapper\"&gt;   &lt;pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\" id=\"codeSnippet\"&gt;&lt;span style=\"color: #0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color: #800000\"&gt;Style&lt;/span&gt; &lt;span style=\"color: #ff0000\"&gt;x:Key&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;=&amp;quot;listViewStyle&amp;quot;&lt;/span&gt; &lt;span style=\"color: #ff0000\"&gt;TargetType&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;=&amp;quot;ListView&amp;quot;&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;&amp;gt;&lt;/span&gt; &lt;br /&gt;    &lt;span style=\"color: #0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color: #800000\"&gt;Setter&lt;/span&gt; &lt;span style=\"color: #ff0000\"&gt;Property&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;=&amp;quot;View&amp;quot;&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;&amp;gt;&lt;/span&gt; &lt;br /&gt;        &lt;span style=\"color: #0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color: #800000\"&gt;Setter.Value&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;            &lt;span style=\"color: #0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color: #800000\"&gt;GridView&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;&amp;gt;&lt;/span&gt; &lt;br /&gt;                &lt;span style=\"color: #0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color: #800000\"&gt;GridViewColumn&lt;/span&gt; &lt;span style=\"color: #ff0000\"&gt;Header&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;=&amp;quot;Name&amp;quot;&lt;/span&gt; &lt;br /&gt;                                &lt;span style=\"color: #ff0000\"&gt;DisplayMemberBinding&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;=&amp;quot;{Binding Name}&amp;quot;&lt;/span&gt; &lt;span style=\"color: #0000ff\"&gt;/&amp;gt;&lt;/span&gt;                        &lt;br /&gt;                &lt;span style=\"color: #0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color: #800000\"&gt;GridViewColumn&lt;/span&gt; &lt;span style=\"color: #ff0000\"&gt;Header&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;=&amp;quot;Salary&amp;quot;&lt;/span&gt; &lt;br /&gt;                                &lt;span style=\"color: #ff0000\"&gt;DisplayMemberBinding&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;=&amp;quot;{Binding Salary}&amp;quot;&lt;/span&gt; &lt;span style=\"color: #0000ff\"&gt;/&amp;gt;&lt;/span&gt; &lt;br /&gt;            &lt;span style=\"color: #0000ff\"&gt;&amp;lt;/&lt;/span&gt;&lt;span style=\"color: #800000\"&gt;GridView&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span style=\"color: #0000ff\"&gt;&amp;lt;/&lt;/span&gt;&lt;span style=\"color: #800000\"&gt;Setter.Value&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;&amp;gt;&lt;/span&gt; &lt;br /&gt;    &lt;span style=\"color: #0000ff\"&gt;&amp;lt;/&lt;/span&gt;&lt;span style=\"color: #800000\"&gt;Setter&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;    &lt;span style=\"color: #0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color: #800000\"&gt;Style.Triggers&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;&amp;gt;&lt;/span&gt; &lt;br /&gt;        &lt;span style=\"color: #0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color: #800000\"&gt;DataTrigger&lt;/span&gt; &lt;span style=\"color: #ff0000\"&gt;Binding&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;=&amp;quot;{Binding HideCols}&amp;quot;&lt;/span&gt; &lt;span style=\"color: #ff0000\"&gt;Value&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;=&amp;quot;True&amp;quot;&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;        &lt;br /&gt;            &lt;span style=\"color: #0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color: #800000\"&gt;Setter&lt;/span&gt; &lt;span style=\"color: #ff0000\"&gt;Property&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;=&amp;quot;View&amp;quot;&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;&amp;gt;&lt;/span&gt; &lt;br /&gt;                &lt;span style=\"color: #0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color: #800000\"&gt;Setter.Value&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;                &lt;br /&gt;                    &lt;span style=\"color: #0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color: #800000\"&gt;GridView&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;&amp;gt;&lt;/span&gt; &lt;br /&gt;                        &lt;span style=\"color: #0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color: #800000\"&gt;GridViewColumn&lt;/span&gt; &lt;span style=\"color: #ff0000\"&gt;Header&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;=&amp;quot;Name&amp;quot;&lt;/span&gt; &lt;br /&gt;                                        &lt;span style=\"color: #ff0000\"&gt;DisplayMemberBinding&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;=&amp;quot;{Binding Name}&amp;quot;&lt;/span&gt; &lt;span style=\"color: #0000ff\"&gt;/&amp;gt;&lt;/span&gt;                                &lt;br /&gt;                    &lt;span style=\"color: #0000ff\"&gt;&amp;lt;/&lt;/span&gt;&lt;span style=\"color: #800000\"&gt;GridView&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;                &lt;span style=\"color: #0000ff\"&gt;&amp;lt;/&lt;/span&gt;&lt;span style=\"color: #800000\"&gt;Setter.Value&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;&amp;gt;&lt;/span&gt; &lt;br /&gt;            &lt;span style=\"color: #0000ff\"&gt;&amp;lt;/&lt;/span&gt;&lt;span style=\"color: #800000\"&gt;Setter&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;        &lt;span style=\"color: #0000ff\"&gt;&amp;lt;/&lt;/span&gt;&lt;span style=\"color: #800000\"&gt;DataTrigger&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;&amp;gt;&lt;/span&gt; &lt;br /&gt;    &lt;span style=\"color: #0000ff\"&gt;&amp;lt;/&lt;/span&gt;&lt;span style=\"color: #800000\"&gt;Style.Triggers&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;&amp;gt;&lt;/span&gt; &lt;br /&gt;&lt;span style=\"color: #0000ff\"&gt;&amp;lt;/&lt;/span&gt;&lt;span style=\"color: #800000\"&gt;Style&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;/pre&gt;\n\
      &lt;/div&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-2130706187731981227?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2009/08/how-do-i-hide-columns-with-wpf-gridview.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-4293646151602536361</guid><pubDate>Thu, 06 Aug 2009 18:37:00 +0000</pubDate><atom:updated>2009-08-06T11:37:14.695-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>Spec#</category><category domain='http://www.blogger.com/atom/ns#'>Virtual Brown Bag</category><title>Virtual Brown Bag Summary 8/6/09</title><description>&lt;p&gt;Today's Brown Bag was lots of fun.&lt;/p&gt;\n\
      &lt;p&gt;Claudio was off educating the masses (I believe in Denver when I talked to him last). I gladly picked up the MC duties again. Although I love doing it, there is a good deal of stress preparing for the brown bag.&lt;/p&gt;\n\
      &lt;p&gt;Will people show? Will I have to talk all by myself? What the hell am I going to say?!&lt;/p&gt;\n\
      &lt;p&gt;But today went great. I read Matthew Podwysocki's blog post &lt;a href=\"http://codebetter.com/blogs/matthew.podwysocki/archive/2009/08/05/spec-and-boogie-released-on-codeplex.aspx\"&gt;Spec# and Boogie Released on CodePlex&lt;/a&gt; and decided I would do a brief demo of Spec#. I spent around 30-40 minutes just playing with the older version of Spec# I found at the &lt;a href=\"http://research.microsoft.com/en-us/projects/specsharp/\"&gt;Microsoft Research site&lt;/a&gt; in preparation for the BB.&lt;/p&gt;\n\
      &lt;p&gt;I was surprised at how much I picked up. Granted I have played with &lt;a href=\"http://research.microsoft.com/en-us/projects/contracts/\"&gt;CodeContracts&lt;/a&gt; before so I was familiar with some of the concepts. Design by Contract is definitely a new school of coding thought. Its taking some time for me to assimilate the termniology and intentions. I know I have barely begun the journey necessary to fully understand and leverage this coding methodology.&lt;/p&gt;\n\
      &lt;p&gt;For the BB, I just opened a Spec# Console project and we just started to code the stuff I learned just 30 minutes ago. I think it went well. We played with the non-null ! ... we set the reference types to default to non null. We setup some pre-conditions using 'requires' and tested some post conditions with 'ensures'. We didn't really use 'modifies' and our one attempt at invariant worked for a simple scenario but failed with another scenario.&lt;/p&gt;\n\
      &lt;p&gt;I forgot to record the BB. So I plan on using the new 2009 release of Spec# and doing a screencast covering the same material. At least we can record the same material if not the exact BB.&lt;/p&gt;\n\
      &lt;p&gt;Thanks to everyone who attended and especially those who asked questions! I hope to chat with you guys again next week. I always look forward to Brown Bag Thursdays!&lt;/p&gt;&lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-4293646151602536361?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2009/08/virtual-brown-bag-summary-8609.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-2141096661972547285</guid><pubDate>Thu, 06 Aug 2009 04:29:00 +0000</pubDate><atom:updated>2009-08-05T21:29:23.767-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>WPF</category><category domain='http://www.blogger.com/atom/ns#'>Patterns</category><title>MVVM \xE2\x80\x93 The no code behind challenge</title><description>&lt;p&gt;Glenn Block has an excellent post titled \xE2\x80\x9CThe spirit of MYYM, it\xE2\x80\x99s not a code counting exercise\xE2\x80\x9D. The &lt;a href=\"http://codebetter.com/blogs/glenn.block/archive/2009/08/02/the-spirit-of-mvvm-viewmodel-it-s-not-a-code-counting-exercise.aspx\"&gt;post&lt;/a&gt; can be found at CodeBetter.&lt;/p&gt;  &lt;p&gt;I thoroughly enjoyed the post and greatly appreciate practical discussions on WPF/SL application patterns. I am a bit of a WPF nut having lived and breathed xaml for over 2 years. I\xE2\x80\x99ve been a part of 2 successful WPF projects (both in production). In both scenarios I acted as the defacto WPF guru. &lt;/p&gt;  &lt;p&gt;This last project was a typical line of business application and we used the ViewModel pattern with Prism. I bring all this up to share my background with WPF and ViewModels.&lt;/p&gt;  &lt;p&gt;Concerning the content of the post, I agree with Glenn on the majority of the content. The Commands and Parameters especially rings true. I found that whenever I went with option A [using element binding to a command parameter] I ended up refactoring it to option B [binding the \xE2\x80\x98selected\xE2\x80\x99 item to a property on the ViewModel]. Although a neat use of xaml, in practice the binding to the property just allowed more flexibility that indubitable becomes necessary with future changes and demands (not to mention testing opportunities).&lt;/p&gt;  &lt;p&gt;With both projects we didn\xE2\x80\x99t have the luxury of a full time designer. In both scenarios I argued there was plenty of work for a designer, but alas the resources just weren\xE2\x80\x99t there. We were able to use a designer for a decent chunk of hours, but more could have been done. The applications were definitely better off for having every hour we could get from any designer resource. I believe the last project persuaded many that indeed there was enough work for a full time designer, so maybe I can hope for a designer with a future application.&lt;/p&gt;  &lt;p&gt;I say this because I can not speak towards what its like having a designer in Blend all the time working on Views. When we used a designer resource, they would work in Blend and then a go-between developer / designer would take the xaml and integrate it with our ResourceDictionaries.&lt;/p&gt;  &lt;p&gt;What I would like to address is the \xE2\x80\x98no code behind\xE2\x80\x99 philosophy compared to the code behind practicality.&lt;/p&gt;  &lt;p&gt;Two years ago when I was floundering for WPF information and blogs, I ran across a blog post (I want to say it was Josh Smith) where the writer stated something like : \xE2\x80\x9Cif something is easier to do in the code behind then its okay to do it in the code behind.\xE2\x80\x9D&lt;/p&gt;  &lt;p&gt;He was arguing that a crap load of xaml vs a couple lines of code behind isn\xE2\x80\x99t an argument at all. The code behind is the best choice. Naturally clearer intentions and code maintainability takes precedence over having a dogmatic \xE2\x80\x9Ceverything in xaml\xE2\x80\x9D approach. &lt;/p&gt;  &lt;p&gt;With this last LoB Prism application, we had some choices to make when we were deciding on how the client should be made up.&lt;/p&gt;  &lt;p&gt;Do we use UserControls as Views or (as Ryan Riley brought up) do we use Data Templates as views. I felt at the time the team wasn\xE2\x80\x99t ready for that leap to Data Templates as views. I considered the code behind of a User Control as a placebo safety net for a team struggling with the WPF learning curve. What I did do was firmly encouraged a no code behind policy. A \xE2\x80\x9Cno code behind\xE2\x80\x9D challenge if you will.&lt;/p&gt;  &lt;p&gt;If I were to go back to the beginning and make that View decision again, I would go with the Data Templates as views. The team did very well without using the code behind. A Data Template view would have brought more benefits than the cost of having no code behind. Often we found ourselves thinking.. if this view was a data template and not a user control, then we could more easier do X.&lt;/p&gt;  &lt;p&gt;I have championed the \xE2\x80\x9Cno code behind\xE2\x80\x9D stance internal to Catapult and to other developers. Yes you can legitimately use the code behind to accomplish certain tasks. More often than not though (in my experience), the use of the code behind has more to do with the prejudices carried over from WinForms development. Having a strict no code behind stance forces developers to learn and change the way they think about coding functionality into the UI. &lt;/p&gt;  &lt;p&gt;Glenn came up with a scenario (albiet a overly simplified one) of where he felt a code behind had some value. The scenario described is:&lt;/p&gt;  &lt;p&gt;'\xE2\x80\x9DThe user clicks a Save button on the Edit Order screen which requires some UI cue to the user such as an hourglass while the order is saving, and another cue once the Order has saved.\xE2\x80\x9D&lt;/p&gt;  &lt;p&gt;He argues that the code in the xaml is less testable. He even suggests the solution I made. He also recognizes others my disagree. Count me in the disagreement camp.&lt;/p&gt;  &lt;p&gt;I created a simple project that uses Attached Dependency properties to accomplish this simple scenario. This isn\xE2\x80\x99t a \xE2\x80\x9Cthrow down the gauntlet\xE2\x80\x9D sort of thing and I didn\xE2\x80\x99t really write it for Glenn. A coworker emailed Glenn\xE2\x80\x99s blog and I responded in an email describing my solution. He then asked to see it in action. So I coded it up.&lt;/p&gt;  &lt;p&gt;He also asked me to post a comment on Glenn\xE2\x80\x99s post, but I don\xE2\x80\x99t really see the point especially since I agree with the information Glenn is sharing and his opinions are built on experience &amp;amp; expertise. I really had no disagreement and the solution Glenn already knows of. /shrug&lt;/p&gt;  &lt;p&gt;Anyway.. you can find the solution here : &lt;a title=\"http://github.com/RookieOne/AttachedAnimation/tree/master\" href=\"http://github.com/RookieOne/AttachedAnimation/tree/master\"&gt;http://github.com/RookieOne/AttachedAnimation/tree/master&lt;/a&gt;&lt;/p&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-2141096661972547285?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2009/08/mvvm-no-code-behind-challenge.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-4718971184485161961</guid><pubDate>Thu, 06 Aug 2009 04:15:00 +0000</pubDate><atom:updated>2009-08-05T21:15:32.031-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>WPF</category><title>How to bind custom ICommands to Input Bindings</title><description>&lt;p&gt;If you are developing using any sort of V-VM-M pattern, you are already loving the awesome binding powers of Wpf.&lt;/p&gt;  &lt;p&gt;And you should also be loving ICommand and binding buttons to ICommand properties on your VM.&lt;/p&gt;  &lt;p&gt;What you might have discovered is that binding ICommands to Keys and other input gestures is not as easy as it was with vanilla Routed Commands.&lt;/p&gt;  &lt;p&gt;But have no fear! There is a solution.&lt;/p&gt;  &lt;p&gt;By utilizing Josh Smith's &lt;a href=\"http://joshsmithonwpf.wordpress.com/2008/07/22/enable-elementname-bindings-with-elementspy/\"&gt;Element Spy trick&lt;/a&gt; and creating a custom InputBinding, we can gain the functionality of binding an ICommand to a Key, etc.&lt;/p&gt;  &lt;p&gt;Here is my custom input binding :&lt;/p&gt;  &lt;p&gt;&amp;#160;&lt;/p&gt;  &lt;div&gt;   &lt;div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;     &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;   1:&lt;/span&gt; &lt;span style=\"color: #0000ff\"&gt;public&lt;/span&gt; &lt;span style=\"color: #0000ff\"&gt;class&lt;/span&gt; MyInputBinding : KeyBinding&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;   2:&lt;/span&gt; {&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;   3:&lt;/span&gt;     &lt;span style=\"color: #cc6633\"&gt;#region&lt;/span&gt; Fields&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;   4:&lt;/span&gt;&amp;#160; &lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;   5:&lt;/span&gt;     &lt;span style=\"color: #0000ff\"&gt;private&lt;/span&gt; &lt;span style=\"color: #0000ff\"&gt;static&lt;/span&gt; &lt;span style=\"color: #0000ff\"&gt;readonly&lt;/span&gt; DependencyProperty BoundCommandProperty = &lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;   6:&lt;/span&gt;                     DependencyProperty.Register(&lt;span style=\"color: #006080\"&gt;&amp;quot;BoundCommand&amp;quot;&lt;/span&gt;,&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;   7:&lt;/span&gt;                                                 &lt;span style=\"color: #0000ff\"&gt;typeof&lt;/span&gt; (ICommand),&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;   8:&lt;/span&gt;                                                 &lt;span style=\"color: #0000ff\"&gt;typeof&lt;/span&gt; (MyInputBinding),&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;   9:&lt;/span&gt;                                                 &lt;span style=\"color: #0000ff\"&gt;new&lt;/span&gt; PropertyMetadata(OnBoundCommandChanged));&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  10:&lt;/span&gt;&amp;#160; &lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  11:&lt;/span&gt;     &lt;span style=\"color: #cc6633\"&gt;#endregion&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  12:&lt;/span&gt;&amp;#160; &lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  13:&lt;/span&gt;     &lt;span style=\"color: #cc6633\"&gt;#region&lt;/span&gt; Properties&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  14:&lt;/span&gt;&amp;#160; &lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  15:&lt;/span&gt;     &lt;span style=\"color: #0000ff\"&gt;public&lt;/span&gt; ICommand BoundCommand&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  16:&lt;/span&gt;     {&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  17:&lt;/span&gt;         get { &lt;span style=\"color: #0000ff\"&gt;return&lt;/span&gt; GetValue(BoundCommandProperty) &lt;span style=\"color: #0000ff\"&gt;as&lt;/span&gt; ICommand; }&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  18:&lt;/span&gt;         set { SetValue(BoundCommandProperty, &lt;span style=\"color: #0000ff\"&gt;value&lt;/span&gt;);}&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  19:&lt;/span&gt;     }&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  20:&lt;/span&gt;&amp;#160; &lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  21:&lt;/span&gt;     &lt;span style=\"color: #cc6633\"&gt;#endregion&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  22:&lt;/span&gt;&amp;#160; &lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  23:&lt;/span&gt;     &lt;span style=\"color: #cc6633\"&gt;#region&lt;/span&gt; Methods&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  24:&lt;/span&gt;&amp;#160; &lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  25:&lt;/span&gt;     &lt;span style=\"color: #0000ff\"&gt;private&lt;/span&gt; &lt;span style=\"color: #0000ff\"&gt;static&lt;/span&gt; &lt;span style=\"color: #0000ff\"&gt;void&lt;/span&gt; OnBoundCommandChanged(DependencyObject obj, DependencyPropertyChangedEventArgs e)&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  26:&lt;/span&gt;     {&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  27:&lt;/span&gt;         MyInputBinding binding = obj &lt;span style=\"color: #0000ff\"&gt;as&lt;/span&gt; MyInputBinding;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  28:&lt;/span&gt;&amp;#160; &lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  29:&lt;/span&gt;         &lt;span style=\"color: #0000ff\"&gt;if&lt;/span&gt; (binding == &lt;span style=\"color: #0000ff\"&gt;null&lt;/span&gt;) &lt;span style=\"color: #0000ff\"&gt;return&lt;/span&gt;;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  30:&lt;/span&gt;&amp;#160; &lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  31:&lt;/span&gt;         binding.Command = e.NewValue &lt;span style=\"color: #0000ff\"&gt;as&lt;/span&gt; ICommand;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  32:&lt;/span&gt;     }&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  33:&lt;/span&gt;&amp;#160; &lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  34:&lt;/span&gt;     &lt;span style=\"color: #cc6633\"&gt;#endregion&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  35:&lt;/span&gt; }&lt;/pre&gt;\n  &lt;/div&gt;\n\
      &lt;/div&gt;\n\n\
      &lt;p&gt;Then when you combine the use of the ElementSpy, your xaml looks like:&lt;/p&gt;\n\n\
      &lt;p&gt;&amp;lt;Window.Resources&amp;gt; \n  &lt;br /&gt;\n\n  &lt;br /&gt;&amp;#160;&amp;#160;&amp;#160; &amp;lt;InputBindingSandbox:ElementSpy x:Key=&amp;quot;spy&amp;quot; /&amp;gt;&lt;/p&gt;\n\n\
      &lt;p&gt;&amp;lt;/Window.Resources&amp;gt;&lt;/p&gt;\n\n\
      &lt;p&gt;&amp;lt;Window.InputBindings&amp;gt;&lt;/p&gt;\n\n\
      &lt;p&gt;&amp;#160;&amp;#160;&amp;#160; &amp;lt;InputBindingSandbox:MyInputBinding BoundCommand=&amp;quot;{Binding Source={StaticResource spy},&lt;/p&gt;\n\n\
      &lt;p&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; Path=Element.DataContext.MyCommand}&amp;quot;&lt;/p&gt;\n\n\
      &lt;p&gt;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160;&amp;#160; Key=&amp;quot;Enter&amp;quot; /&amp;gt;&lt;/p&gt;\n\n\
      &lt;p&gt;&amp;lt;/Window.InputBindings&amp;gt;&lt;/p&gt;\n\n\
      &lt;p&gt;Naturally the custom input binding is very simple and does not expose the Command Parameter nor the Command Target, etc. But the basic pattern is there so feel free to utilize and extend.&lt;/p&gt;\n\n\
      &lt;p&gt;Happy coding!&lt;/p&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-4718971184485161961?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2009/08/how-to-bind-custom-icommands-to-input.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-840862914888367487</guid><pubDate>Thu, 06 Aug 2009 04:10:00 +0000</pubDate><atom:updated>2009-08-05T21:10:33.799-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>WPF</category><title>ItemsSourceChanged Event using Attached Dependency Properties</title><description>&lt;p&gt;If you stumble across this blog, you might have been searching for the non-existent ItemsSourceChanged event on a ListBox or ListView in Wpf.&lt;/p&gt;  &lt;p&gt;Yeah... it isn't there and it sucks.&lt;/p&gt;  &lt;p&gt;But, there is a workable that I wouldn't define as a hack. More of a Wpf extension. :D&lt;/p&gt;  &lt;p&gt;I am a huge fan of Attached Dependency Properties. They are a perfect tool to extend the functionality of closed controls. Attached Dependency Properties also circumvent the pain of created your own custom control.&lt;/p&gt;  &lt;p&gt;I am going to use an attached dependency property to mimic an ItemsSource Changed event.&lt;/p&gt;  &lt;p&gt;The full code :&lt;/p&gt;  &lt;div style=\"border-bottom: gray 1px solid; border-left: gray 1px solid; padding-bottom: 4px; line-height: 12pt; background-color: #f4f4f4; margin: 20px 0px 10px; padding-left: 4px; width: 97.5%; padding-right: 4px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; max-height: 200px; font-size: 8pt; overflow: auto; border-top: gray 1px solid; cursor: text; border-right: gray 1px solid; padding-top: 4px\"&gt;   &lt;div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;     &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;   1:&lt;/span&gt; &lt;span style=\"color: #008000\"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;   2:&lt;/span&gt; &lt;span style=\"color: #008000\"&gt;/// ItemsSourceChanged Behavior uses an Attached Dependency Property&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;   3:&lt;/span&gt; &lt;span style=\"color: #008000\"&gt;/// to add and raise a rotued event whenever an ItemsControl's ItemsSource property&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;   4:&lt;/span&gt; &lt;span style=\"color: #008000\"&gt;/// changes. Also looks for INotifyCollectionChanged on the ItemsSource and raises the&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;   5:&lt;/span&gt; &lt;span style=\"color: #008000\"&gt;/// event on every collection changed event&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;   6:&lt;/span&gt; &lt;span style=\"color: #008000\"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;   7:&lt;/span&gt; &lt;span style=\"color: #0000ff\"&gt;public&lt;/span&gt; &lt;span style=\"color: #0000ff\"&gt;static&lt;/span&gt;  &lt;span style=\"color: #0000ff\"&gt;class&lt;/span&gt; ItemsSourceChangedBehavior&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;   8:&lt;/span&gt; {&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;   9:&lt;/span&gt;     &lt;span style=\"color: #cc6633\"&gt;#region&lt;/span&gt; ItemsSourceChanged Property&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  10:&lt;/span&gt;&amp;#160; &lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  11:&lt;/span&gt;     &lt;span style=\"color: #008000\"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  12:&lt;/span&gt;     &lt;span style=\"color: #008000\"&gt;/// ItemsSourceChanged Attached Dependency Property with Callback method&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  13:&lt;/span&gt;     &lt;span style=\"color: #008000\"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  14:&lt;/span&gt;     &lt;span style=\"color: #0000ff\"&gt;public&lt;/span&gt; &lt;span style=\"color: #0000ff\"&gt;static&lt;/span&gt; &lt;span style=\"color: #0000ff\"&gt;readonly&lt;/span&gt; DependencyProperty ItemsSourceChangedProperty =&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  15:&lt;/span&gt;                                               DependencyProperty.RegisterAttached(&lt;span style=\"color: #006080\"&gt;&amp;quot;ItemsSourceChanged&amp;quot;&lt;/span&gt;,&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  16:&lt;/span&gt;                                               &lt;span style=\"color: #0000ff\"&gt;typeof&lt;/span&gt;(&lt;span style=\"color: #0000ff\"&gt;bool&lt;/span&gt;), &lt;span style=\"color: #0000ff\"&gt;typeof&lt;/span&gt;(ItemsSourceChangedBehavior),&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  17:&lt;/span&gt;                                               &lt;span style=\"color: #0000ff\"&gt;new&lt;/span&gt; FrameworkPropertyMetadata(&lt;span style=\"color: #0000ff\"&gt;false&lt;/span&gt;, OnItemsSourceChanged));&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  18:&lt;/span&gt;&amp;#160; &lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  19:&lt;/span&gt;     &lt;span style=\"color: #008000\"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  20:&lt;/span&gt;     &lt;span style=\"color: #008000\"&gt;/// Static Get method allowing easy Xaml usage and to simplify the&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  21:&lt;/span&gt;     &lt;span style=\"color: #008000\"&gt;/// GetValue process&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  22:&lt;/span&gt;     &lt;span style=\"color: #008000\"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  23:&lt;/span&gt;     &lt;span style=\"color: #008000\"&gt;/// &amp;lt;param name=&amp;quot;obj&amp;quot;&amp;gt;The dependency obj.&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  24:&lt;/span&gt;     &lt;span style=\"color: #008000\"&gt;/// &amp;lt;returns&amp;gt;True or False&amp;lt;/returns&amp;gt;&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  25:&lt;/span&gt;     &lt;span style=\"color: #0000ff\"&gt;public&lt;/span&gt; &lt;span style=\"color: #0000ff\"&gt;static&lt;/span&gt; &lt;span style=\"color: #0000ff\"&gt;bool&lt;/span&gt; GetItemsSourceChanged(DependencyObject obj)&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  26:&lt;/span&gt;     {&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  27:&lt;/span&gt;         &lt;span style=\"color: #0000ff\"&gt;return&lt;/span&gt; (&lt;span style=\"color: #0000ff\"&gt;bool&lt;/span&gt;)obj.GetValue(ItemsSourceChangedProperty);&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  28:&lt;/span&gt;     }&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  29:&lt;/span&gt;&amp;#160; &lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  30:&lt;/span&gt;     &lt;span style=\"color: #008000\"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  31:&lt;/span&gt;     &lt;span style=\"color: #008000\"&gt;/// Static Set method allowing easy Xaml usage and to simplify the&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  32:&lt;/span&gt;     &lt;span style=\"color: #008000\"&gt;/// Setvalue process&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  33:&lt;/span&gt;     &lt;span style=\"color: #008000\"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  34:&lt;/span&gt;     &lt;span style=\"color: #008000\"&gt;/// &amp;lt;param name=&amp;quot;obj&amp;quot;&amp;gt;The obj.&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  35:&lt;/span&gt;     &lt;span style=\"color: #008000\"&gt;/// &amp;lt;param name=&amp;quot;value&amp;quot;&amp;gt;if set to &amp;lt;c&amp;gt;true&amp;lt;/c&amp;gt; [value].&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  36:&lt;/span&gt;     &lt;span style=\"color: #0000ff\"&gt;public&lt;/span&gt; &lt;span style=\"color: #0000ff\"&gt;static&lt;/span&gt; &lt;span style=\"color: #0000ff\"&gt;void&lt;/span&gt; SetItemsSourceChanged(DependencyObject obj, &lt;span style=\"color: #0000ff\"&gt;bool&lt;/span&gt; &lt;span style=\"color: #0000ff\"&gt;value&lt;/span&gt;)&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  37:&lt;/span&gt;     {&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  38:&lt;/span&gt;         obj.SetValue(ItemsSourceChangedProperty, &lt;span style=\"color: #0000ff\"&gt;value&lt;/span&gt;);&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  39:&lt;/span&gt;     }&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  40:&lt;/span&gt;&amp;#160; &lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  41:&lt;/span&gt;     &lt;span style=\"color: #008000\"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  42:&lt;/span&gt;     &lt;span style=\"color: #008000\"&gt;/// Dependency Property Changed Call Back method. This will be called anytime&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  43:&lt;/span&gt;     &lt;span style=\"color: #008000\"&gt;/// the ItemsSourceChangedProperty value changes on a Dependency Object&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  44:&lt;/span&gt;     &lt;span style=\"color: #008000\"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  45:&lt;/span&gt;     &lt;span style=\"color: #008000\"&gt;/// &amp;lt;param name=&amp;quot;obj&amp;quot;&amp;gt;The obj.&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  46:&lt;/span&gt;     &lt;span style=\"color: #008000\"&gt;/// &amp;lt;param name=&amp;quot;e&amp;quot;&amp;gt;The &amp;lt;see cref=&amp;quot;System.Windows.DependencyPropertyChangedEventArgs&amp;quot;/&amp;gt; instance containing the event data.&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  47:&lt;/span&gt;     &lt;span style=\"color: #0000ff\"&gt;private&lt;/span&gt; &lt;span style=\"color: #0000ff\"&gt;static&lt;/span&gt; &lt;span style=\"color: #0000ff\"&gt;void&lt;/span&gt; OnItemsSourceChanged(DependencyObject obj, DependencyPropertyChangedEventArgs e)&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  48:&lt;/span&gt;     {&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  49:&lt;/span&gt;         ItemsControl itemsControl = obj &lt;span style=\"color: #0000ff\"&gt;as&lt;/span&gt; ItemsControl;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  50:&lt;/span&gt;&amp;#160; &lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  51:&lt;/span&gt;         &lt;span style=\"color: #0000ff\"&gt;if&lt;/span&gt; (itemsControl == &lt;span style=\"color: #0000ff\"&gt;null&lt;/span&gt;)&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  52:&lt;/span&gt;             &lt;span style=\"color: #0000ff\"&gt;return&lt;/span&gt;;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  53:&lt;/span&gt;&amp;#160; &lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  54:&lt;/span&gt;         &lt;span style=\"color: #0000ff\"&gt;bool&lt;/span&gt; oldValue = (&lt;span style=\"color: #0000ff\"&gt;bool&lt;/span&gt;)e.OldValue;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  55:&lt;/span&gt;         &lt;span style=\"color: #0000ff\"&gt;bool&lt;/span&gt; newValue = (&lt;span style=\"color: #0000ff\"&gt;bool&lt;/span&gt;)e.NewValue;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  56:&lt;/span&gt;&amp;#160; &lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  57:&lt;/span&gt;         &lt;span style=\"color: #0000ff\"&gt;if&lt;/span&gt; (!oldValue &amp;amp;&amp;amp; newValue) &lt;span style=\"color: #008000\"&gt;// If changed from false to true&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  58:&lt;/span&gt;         {           &lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  59:&lt;/span&gt;             &lt;span style=\"color: #008000\"&gt;// Create a binding to the ItemsSourceProperty on the ItemsControl&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  60:&lt;/span&gt;             Binding b = &lt;span style=\"color: #0000ff\"&gt;new&lt;/span&gt; Binding&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  61:&lt;/span&gt;                             {&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  62:&lt;/span&gt;                                 Source = itemsControl,&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  63:&lt;/span&gt;                                 Path = &lt;span style=\"color: #0000ff\"&gt;new&lt;/span&gt; PropertyPath(ItemsControl.ItemsSourceProperty)&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  64:&lt;/span&gt;                             };&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  65:&lt;/span&gt;&amp;#160; &lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  66:&lt;/span&gt;             &lt;span style=\"color: #008000\"&gt;// Since the ItemsSourceListenerProperty is now bound to the&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  67:&lt;/span&gt;             &lt;span style=\"color: #008000\"&gt;// ItemsSourceProperty on the ItemsControl, whenever the &lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  68:&lt;/span&gt;             &lt;span style=\"color: #008000\"&gt;// ItemsSourceProperty changes the ItemsSourceListenerProperty&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  69:&lt;/span&gt;             &lt;span style=\"color: #008000\"&gt;// callback method will execute&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  70:&lt;/span&gt;             itemsControl.SetBinding(ItemsSourceListenerProperty, b);&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  71:&lt;/span&gt;         }&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  72:&lt;/span&gt;         &lt;span style=\"color: #0000ff\"&gt;else&lt;/span&gt; &lt;span style=\"color: #0000ff\"&gt;if&lt;/span&gt; (oldValue &amp;amp;&amp;amp; !newValue) &lt;span style=\"color: #008000\"&gt;// If changed from true to false&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  73:&lt;/span&gt;         {&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  74:&lt;/span&gt;             &lt;span style=\"color: #008000\"&gt;// Clear Binding on the ItemsSourceListenerProperty&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  75:&lt;/span&gt;             BindingOperations.ClearBinding(itemsControl, ItemsSourceListenerProperty);&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  76:&lt;/span&gt;         }&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  77:&lt;/span&gt;     }&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  78:&lt;/span&gt;&amp;#160; &lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  79:&lt;/span&gt;     &lt;span style=\"color: #cc6633\"&gt;#endregion&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  80:&lt;/span&gt;&amp;#160; &lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  81:&lt;/span&gt;     &lt;span style=\"color: #cc6633\"&gt;#region&lt;/span&gt; Items Source Listener Property&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  82:&lt;/span&gt;&amp;#160; &lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  83:&lt;/span&gt;     &lt;span style=\"color: #008000\"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  84:&lt;/span&gt;     &lt;span style=\"color: #008000\"&gt;/// The ItemsSourceListener Attached Dependency Property is a private property&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  85:&lt;/span&gt;     &lt;span style=\"color: #008000\"&gt;/// the ItemsSourceChangedBehavior will use silently to bind to the ItemsControl&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  86:&lt;/span&gt;     &lt;span style=\"color: #008000\"&gt;/// ItemsSourceProperty.&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  87:&lt;/span&gt;     &lt;span style=\"color: #008000\"&gt;/// Once bound, the callback method will execute anytime the ItemsSource property changes&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  88:&lt;/span&gt;     &lt;span style=\"color: #008000\"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  89:&lt;/span&gt;     &lt;span style=\"color: #0000ff\"&gt;private&lt;/span&gt; &lt;span style=\"color: #0000ff\"&gt;static&lt;/span&gt; &lt;span style=\"color: #0000ff\"&gt;readonly&lt;/span&gt; DependencyProperty ItemsSourceListenerProperty =&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  90:&lt;/span&gt;         DependencyProperty.RegisterAttached(&lt;span style=\"color: #006080\"&gt;&amp;quot;ItemsSourceListener&amp;quot;&lt;/span&gt;,&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  91:&lt;/span&gt;                                             &lt;span style=\"color: #0000ff\"&gt;typeof&lt;/span&gt;(&lt;span style=\"color: #0000ff\"&gt;object&lt;/span&gt;), &lt;span style=\"color: #0000ff\"&gt;typeof&lt;/span&gt;(ItemsSourceChangedBehavior),&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  92:&lt;/span&gt;                                             &lt;span style=\"color: #0000ff\"&gt;new&lt;/span&gt; FrameworkPropertyMetadata(&lt;span style=\"color: #0000ff\"&gt;null&lt;/span&gt;, OnItemsSourceListenerChanged));&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  93:&lt;/span&gt;&amp;#160; &lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  94:&lt;/span&gt;&amp;#160; &lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  95:&lt;/span&gt;     &lt;span style=\"color: #008000\"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  96:&lt;/span&gt;     &lt;span style=\"color: #008000\"&gt;/// Dependency Property Changed Call Back method. This will be called anytime&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  97:&lt;/span&gt;     &lt;span style=\"color: #008000\"&gt;/// the ItemsSourceListenerProperty value changes on a Dependency Object&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  98:&lt;/span&gt;     &lt;span style=\"color: #008000\"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt;  99:&lt;/span&gt;     &lt;span style=\"color: #008000\"&gt;/// &amp;lt;param name=&amp;quot;obj&amp;quot;&amp;gt;The obj.&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt; 100:&lt;/span&gt;     &lt;span style=\"color: #008000\"&gt;/// &amp;lt;param name=&amp;quot;e&amp;quot;&amp;gt;The &amp;lt;see cref=&amp;quot;System.Windows.DependencyPropertyChangedEventArgs&amp;quot;/&amp;gt; instance containing the event data.&amp;lt;/param&amp;gt;&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt; 101:&lt;/span&gt;     &lt;span style=\"color: #0000ff\"&gt;private&lt;/span&gt; &lt;span style=\"color: #0000ff\"&gt;static&lt;/span&gt; &lt;span style=\"color: #0000ff\"&gt;void&lt;/span&gt; OnItemsSourceListenerChanged(DependencyObject obj, DependencyPropertyChangedEventArgs e)&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt; 102:&lt;/span&gt;     {&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt; 103:&lt;/span&gt;         ItemsControl itemsControl = obj &lt;span style=\"color: #0000ff\"&gt;as&lt;/span&gt; ItemsControl;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt; 104:&lt;/span&gt;         &lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt; 105:&lt;/span&gt;         &lt;span style=\"color: #0000ff\"&gt;if&lt;/span&gt; (itemsControl == &lt;span style=\"color: #0000ff\"&gt;null&lt;/span&gt;)&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt; 106:&lt;/span&gt;             &lt;span style=\"color: #0000ff\"&gt;return&lt;/span&gt;;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt; 107:&lt;/span&gt;&amp;#160; &lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt; 108:&lt;/span&gt;         INotifyCollectionChanged collection = e.NewValue &lt;span style=\"color: #0000ff\"&gt;as&lt;/span&gt; INotifyCollectionChanged;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt; 109:&lt;/span&gt;&amp;#160; &lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt; 110:&lt;/span&gt;         &lt;span style=\"color: #0000ff\"&gt;if&lt;/span&gt; (collection != &lt;span style=\"color: #0000ff\"&gt;null&lt;/span&gt;)&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt; 111:&lt;/span&gt;         {&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt; 112:&lt;/span&gt;             collection.CollectionChanged += &lt;span style=\"color: #0000ff\"&gt;delegate&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt; 113:&lt;/span&gt;                                                 {&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt; 114:&lt;/span&gt;                                                     itemsControl.RaiseEvent(&lt;span style=\"color: #0000ff\"&gt;new&lt;/span&gt; RoutedEventArgs(ItemsSourceChangedEvent));&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt; 115:&lt;/span&gt;                                                 };&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt; 116:&lt;/span&gt;&amp;#160; &lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt; 117:&lt;/span&gt;         }&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt; 118:&lt;/span&gt;&amp;#160; &lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt; 119:&lt;/span&gt;         &lt;span style=\"color: #0000ff\"&gt;if&lt;/span&gt; (GetItemsSourceChanged(itemsControl))&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt; 120:&lt;/span&gt;             itemsControl.RaiseEvent(&lt;span style=\"color: #0000ff\"&gt;new&lt;/span&gt; RoutedEventArgs(ItemsSourceChangedEvent));&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt; 121:&lt;/span&gt;     }&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt; 122:&lt;/span&gt;&amp;#160; &lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt; 123:&lt;/span&gt;     &lt;span style=\"color: #cc6633\"&gt;#endregion&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt; 124:&lt;/span&gt;&amp;#160; &lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt; 125:&lt;/span&gt;     &lt;span style=\"color: #cc6633\"&gt;#region&lt;/span&gt; Items Source Changed Event&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt; 126:&lt;/span&gt;&amp;#160; &lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt; 127:&lt;/span&gt;     &lt;span style=\"color: #008000\"&gt;/// &amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt; 128:&lt;/span&gt;     &lt;span style=\"color: #008000\"&gt;/// Routed Event to raise whenever the ItemsSource changes on an ItemsControl&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt; 129:&lt;/span&gt;     &lt;span style=\"color: #008000\"&gt;/// &amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt; 130:&lt;/span&gt;     &lt;span style=\"color: #0000ff\"&gt;public&lt;/span&gt; &lt;span style=\"color: #0000ff\"&gt;static&lt;/span&gt; &lt;span style=\"color: #0000ff\"&gt;readonly&lt;/span&gt; RoutedEvent ItemsSourceChangedEvent =&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt; 131:&lt;/span&gt;         EventManager.RegisterRoutedEvent(&lt;span style=\"color: #006080\"&gt;&amp;quot;ItemsSourceChanged&amp;quot;&lt;/span&gt;, &lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt; 132:&lt;/span&gt;                                          RoutingStrategy.Bubble, &lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt; 133:&lt;/span&gt;                                          &lt;span style=\"color: #0000ff\"&gt;typeof&lt;/span&gt;(RoutedEventHandler),&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt; 134:&lt;/span&gt;                                          &lt;span style=\"color: #0000ff\"&gt;typeof&lt;/span&gt;(ItemsControl));&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt; 135:&lt;/span&gt;&amp;#160; &lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt; 136:&lt;/span&gt;     &lt;span style=\"color: #cc6633\"&gt;#endregion&lt;/span&gt;&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;&lt;span style=\"color: #606060\"&gt; 137:&lt;/span&gt; }&lt;/pre&gt;\n  &lt;/div&gt;\n\
      &lt;/div&gt;\n\n\
      &lt;p&gt;&amp;#160;&lt;/p&gt;\n\n\
      &lt;p&gt;By setting the ItemsSourceChanged property on any ItemsControl to true, the ItemsSourceListener property will be bound to the ItemsSource property. The ItemsSourceListener callback will be executed anytime the ItemsSource changes and therefore can raise the ItemsSourceChanged routed event.&lt;/p&gt;\n\n\
      &lt;p&gt;Also if the ItemsSource implements INotifyCollectionChanged, I added a delegate so that on the CollectionChanged event, the ItemsSourceChanged event will also be raised.&lt;/p&gt;\n\n\
      &lt;p&gt;Feel free to use the code and adapt it to your needs.&lt;/p&gt;\n\n\
      &lt;p&gt;Peace out!&lt;/p&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-840862914888367487?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2009/08/itemssourcechanged-event-using-attached.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-425549416204336675</guid><pubDate>Wed, 05 Aug 2009 05:17:00 +0000</pubDate><atom:updated>2009-08-04T22:18:08.480-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>Me</category><category domain='http://www.blogger.com/atom/ns#'>Windows 7</category><title>New PC! Hello Win 7 and 64 bit goodness</title><description>&lt;p&gt;About 5 years ago I decided that I had enough of building my own PCs. It stopped being fun for me and became a chore. So at that time I came up with an experimental PC purchasing plan. I would spend $2k-$3k on a PC that will then last 3 years and then upgrade. &lt;/p&gt;  &lt;p&gt;The plan worked great. So great in fact that my last PC lasted 5 years. :D&lt;/p&gt;  &lt;p&gt;Its still a great PC. At the time I mostly gamed. Sure I was coding at work, but when I got home, I was gaming. Therefore, the specifications for the computer were gaming related. In end the PC\xE2\x80\x99s specs were roughly : 3 Ghz intel p4; 3 gigs of ram; 512mb PCI-E x16 Nvidia&lt;/p&gt;  &lt;p&gt;Still a great machine for gaming. &lt;/p&gt;  &lt;p&gt;But now I spend near 100% of my time coding. When I do game, my friends and I all have xboxs. Its cheaper and easier to hook up online and play than a PC. At least I think so. &lt;/p&gt;  &lt;p&gt;Now when I code, I have multiple Visual Studio sessions open, maybe streaming a video, maybe downloading files, etc. My poor single processor PC was under a very demanding load.&lt;/p&gt;  &lt;p&gt;But riding in to save the day is my new PC I bought from Dell.&lt;/p&gt;  &lt;p&gt;Its specs:&lt;/p&gt;  &lt;ul&gt;   &lt;li&gt;XPS 730X, Intel Core3 I7-950 (3.06GHz, 8MB cache)&lt;/li&gt;    &lt;li&gt;6GB Multi-Channel DDR3 at 1066MHZ (3x2GB DIMM)&lt;/li&gt;    &lt;li&gt;SLi, Dual nVidia GeForce 9800G512MB&lt;/li&gt;    &lt;li&gt;300GB Western Digital Velociraptor - SATA-II, 3GB/S 10000RPM, 16MB Cache&lt;/li&gt; &lt;/ul&gt;  &lt;p&gt;Niiiiice. :) The thing is freaking enormous. &lt;/p&gt;  &lt;p&gt;This is my first PC with a multiple core and with a 64 bit processor (and OS). &lt;/p&gt;  &lt;p&gt;So far tonight I\xE2\x80\x99ve done nothing but install Win 7 and an assortment of applications. Its amazing how many little addons and applications you forget you use on a daily basis. &lt;/p&gt;  &lt;p&gt;I am not an OS guy. I don\xE2\x80\x99t really care for command lines nor all the super duper features. I just like things to work. I am one of the few out in there that liked Vista and didn\xE2\x80\x99t find anything wrong with it.&lt;/p&gt;  &lt;p&gt;But Win 7 is supposedly da bomb so why not upgrade? The most I\xE2\x80\x99ve noticed about Windows 7 is the new taskbar (which I like). I think the main trend I\xE2\x80\x99ve noticed going from Vista to Win 7 is that the most common tasks I do are closer\xE2\x80\xA6 if that makes sense. So things that were 2 clicks away are now 1 click away.&lt;/p&gt;  &lt;p&gt;I\xE2\x80\x99m going to get back to playing with my new toy. I look forward to the many years of development I will get out of this machine.&lt;/p&gt;  &lt;p&gt;Life is good.&lt;/p&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-425549416204336675?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2009/08/new-pc-hello-win-7-and-64-bit-goodness.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-236104928740493549</guid><pubDate>Tue, 04 Aug 2009 05:17:00 +0000</pubDate><atom:updated>2009-08-03T22:18:15.321-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>Patterns</category><category domain='http://www.blogger.com/atom/ns#'>Fluent Interfaces</category><title>Acase().for(patternType.FluentInterfaces).create()</title><description>&lt;p&gt;When I was first exposed to the idea of fluent interfaces my response was\xE2\x80\xA6 big flipping deal.&lt;/p&gt; &lt;p&gt;It wasn\xE2\x80\x99t until I actively started using fluent interfaces in my code did I begin to see their power and elegance.&lt;/p&gt; &lt;p&gt;What is a fluent interface? Here is the obligatory &lt;a href=\"http://en.wikipedia.org/wiki/Fluent_interface\" target=\"_blank\"&gt;link&lt;/a&gt; to wikipedia ;)&lt;/p&gt; &lt;p&gt;In simple terms, its returning a type instead of void in order to achieve method chaining.&lt;/p&gt; &lt;p&gt;The end goal of the method chaining is to provide a more readable interface and code.&lt;/p&gt; &lt;p&gt;First, does it break the Law of Demeter?&lt;/p&gt; &lt;p&gt;Law of Demeter doesn\xE2\x80\x99t equal the number of periods. I am of the opinion fluent interfaces do not violate the Law of Demeter.&lt;/p&gt; &lt;p&gt;What is LoD? Another &lt;a href=\"http://en.wikipedia.org/wiki/Law_Of_Demeter\" target=\"_blank\"&gt;link&lt;/a&gt; to wiki and here is a &lt;a href=\"http://stackoverflow.com/questions/67561/do-fluent-interfaces-violate-the-law-of-demeter\" target=\"_blank\"&gt;link&lt;/a&gt; to a stack overflow on this very subject! :)&lt;/p&gt; &lt;p&gt;To me, Law of Demeter is about restricting communication between objects.&lt;/p&gt; &lt;p&gt;A common violation of LoD (imho) is the exposure of a list property on an object. I believe this serves as a good example of LoD as well as being an example on how to make a fluent interface. :)&lt;/p&gt; &lt;p&gt;A Person object has a name and a list of friends.&lt;/p&gt; &lt;div class=\"csharpcode\"&gt; &lt;div class=\"csharpcode\"&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;   1:  &lt;/span&gt;    &lt;span class=\"kwrd\"&gt;public&lt;/span&gt; &lt;span class=\"kwrd\"&gt;class&lt;/span&gt; Person&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;   2:  &lt;/span&gt;    {&lt;/pre&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;   3:  &lt;/span&gt;        &lt;span class=\"kwrd\"&gt;public&lt;/span&gt; &lt;span class=\"kwrd\"&gt;string&lt;/span&gt; Name { get; set; }&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;   4:  &lt;/span&gt;        &lt;span class=\"kwrd\"&gt;public&lt;/span&gt; List&amp;lt;Person&amp;gt; Friends { get; set; }&lt;/pre&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;   5:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;   6:  &lt;/span&gt;        &lt;span class=\"kwrd\"&gt;public&lt;/span&gt; Person()&lt;/pre&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;   7:  &lt;/span&gt;        {&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;   8:  &lt;/span&gt;            Friends = &lt;span class=\"kwrd\"&gt;new&lt;/span&gt; List&amp;lt;Person&amp;gt;();&lt;/pre&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;   9:  &lt;/span&gt;        }&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;  10:  &lt;/span&gt;    }&lt;/pre&gt;&lt;/div&gt;\n\
      &lt;style type=\"text/css\"&gt;.csharpcode, .csharpcode pre\n\
      {\n\
      \tfont-size: small;\n\
      \tcolor: black;\n\
      \tfont-family: consolas, \"Courier New\", courier, monospace;\n\
      \tbackground-color: #ffffff;\n\
      \t/*white-space: pre;*/\n\
      }\n\
      .csharpcode pre { margin: 0em; }\n\
      .csharpcode .rem { color: #008000; }\n\
      .csharpcode .kwrd { color: #0000ff; }\n\
      .csharpcode .str { color: #006080; }\n\
      .csharpcode .op { color: #0000c0; }\n\
      .csharpcode .preproc { color: #cc6633; }\n\
      .csharpcode .asp { background-color: #ffff00; }\n\
      .csharpcode .html { color: #800000; }\n\
      .csharpcode .attr { color: #ff0000; }\n\
      .csharpcode .alt\n\
      {\n\
      \tbackground-color: #f4f4f4;\n\
      \twidth: 100%;\n\
      \tmargin: 0em;\n\
      }\n\
      .csharpcode .lnum { color: #606060; }\n\
      &lt;/style&gt;\n\n\
      &lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;pre class=\"alt\"&gt;&lt;/pre&gt;&lt;/div&gt;\n\
      &lt;p&gt;I could then add friends by\xE2\x80\xA6&lt;/p&gt;\n\
      &lt;div class=\"csharpcode\"&gt;&amp;nbsp;&lt;/div&gt;\n\
      &lt;div class=\"csharpcode\"&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;   1:  &lt;/span&gt;var roger = &lt;span class=\"kwrd\"&gt;new&lt;/span&gt; Person{ Name=&lt;span class=\"str\"&gt;\"Roger\"&lt;/span&gt; };&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;   2:  &lt;/span&gt;roger.Friends.Add(&lt;span class=\"kwrd\"&gt;new&lt;/span&gt; Person { Name = &lt;span class=\"str\"&gt;\"Eddie\"&lt;/span&gt; });&lt;/pre&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;   3:  &lt;/span&gt;roger.Friends.Add(&lt;span class=\"kwrd\"&gt;new&lt;/span&gt; Person { Name = &lt;span class=\"str\"&gt;\"Freddie\"&lt;/span&gt; });&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;   4:  &lt;/span&gt;roger.Friends.Add(&lt;span class=\"kwrd\"&gt;new&lt;/span&gt; Person { Name = &lt;span class=\"str\"&gt;\"Gordie\"&lt;/span&gt; });&lt;/pre&gt;&lt;/div&gt;\n\
      &lt;style type=\"text/css\"&gt;.csharpcode, .csharpcode pre\n\
      {\n\
      \tfont-size: small;\n\
      \tcolor: black;\n\
      \tfont-family: consolas, \"Courier New\", courier, monospace;\n\
      \tbackground-color: #ffffff;\n\
      \t/*white-space: pre;*/\n\
      }\n\
      .csharpcode pre { margin: 0em; }\n\
      .csharpcode .rem { color: #008000; }\n\
      .csharpcode .kwrd { color: #0000ff; }\n\
      .csharpcode .str { color: #006080; }\n\
      .csharpcode .op { color: #0000c0; }\n\
      .csharpcode .preproc { color: #cc6633; }\n\
      .csharpcode .asp { background-color: #ffff00; }\n\
      .csharpcode .html { color: #800000; }\n\
      .csharpcode .attr { color: #ff0000; }\n\
      .csharpcode .alt\n\
      {\n\
      \tbackground-color: #f4f4f4;\n\
      \twidth: 100%;\n\
      \tmargin: 0em;\n\
      }\n\
      .csharpcode .lnum { color: #606060; }\n\
      &lt;/style&gt;\n\n\
      &lt;p&gt;Now this is pretty typical, so what\xE2\x80\x99s the problem?&lt;/p&gt;\n\
      &lt;p&gt;Well my code knows WAY too much about Person. I know it has a list of friends and if they change that list to say a dictionary, I am hosed.&lt;/p&gt;\n\
      &lt;p&gt;Not only that, but poor Person class\xE2\x80\xA6 people can add friends to his collection without him every knowing. What if some additional logic needs to be done when adding a friend?&lt;/p&gt;\n\
      &lt;p&gt;What if the person wants to record the birth date of every friend so they can send out birthday cards? Person is SOL.&lt;/p&gt;\n\
      &lt;p&gt;As for Law of Demeter, my code is using the Person object to communicate through to the List&amp;lt;Person&amp;gt;. I am exposing my code to changes in Person.&lt;/p&gt;\n\
      &lt;p&gt;Let\xE2\x80\x99s change Person to eliminate this problem.&lt;/p&gt;\n\
      &lt;div class=\"csharpcode\"&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;   1:  &lt;/span&gt;    &lt;span class=\"kwrd\"&gt;public&lt;/span&gt; &lt;span class=\"kwrd\"&gt;class&lt;/span&gt; Person2&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;   2:  &lt;/span&gt;    {&lt;/pre&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;   3:  &lt;/span&gt;        &lt;span class=\"kwrd\"&gt;public&lt;/span&gt; &lt;span class=\"kwrd\"&gt;string&lt;/span&gt; Name { get; set; }&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;   4:  &lt;/span&gt;        &lt;span class=\"kwrd\"&gt;private&lt;/span&gt; &lt;span class=\"kwrd\"&gt;readonly&lt;/span&gt; List&amp;lt;Person2&amp;gt; _friends;&lt;/pre&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;   5:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;   6:  &lt;/span&gt;        &lt;span class=\"kwrd\"&gt;public&lt;/span&gt; Person2()&lt;/pre&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;   7:  &lt;/span&gt;        {&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;   8:  &lt;/span&gt;            _friends = &lt;span class=\"kwrd\"&gt;new&lt;/span&gt; List&amp;lt;Person2&amp;gt;();&lt;/pre&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;   9:  &lt;/span&gt;        }&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;  10:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;  11:  &lt;/span&gt;        &lt;span class=\"kwrd\"&gt;public&lt;/span&gt; &lt;span class=\"kwrd\"&gt;void&lt;/span&gt; AddFriend(Person2 friend)&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;  12:  &lt;/span&gt;        {&lt;/pre&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;  13:  &lt;/span&gt;            _friends.Add(friend);&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;  14:  &lt;/span&gt;        }&lt;/pre&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;  15:  &lt;/span&gt;    }&lt;/pre&gt;&lt;/div&gt;\n\
      &lt;style type=\"text/css\"&gt;.csharpcode, .csharpcode pre\n\
      {\n\
      \tfont-size: small;\n\
      \tcolor: black;\n\
      \tfont-family: consolas, \"Courier New\", courier, monospace;\n\
      \tbackground-color: #ffffff;\n\
      \t/*white-space: pre;*/\n\
      }\n\
      .csharpcode pre { margin: 0em; }\n\
      .csharpcode .rem { color: #008000; }\n\
      .csharpcode .kwrd { color: #0000ff; }\n\
      .csharpcode .str { color: #006080; }\n\
      .csharpcode .op { color: #0000c0; }\n\
      .csharpcode .preproc { color: #cc6633; }\n\
      .csharpcode .asp { background-color: #ffff00; }\n\
      .csharpcode .html { color: #800000; }\n\
      .csharpcode .attr { color: #ff0000; }\n\
      .csharpcode .alt\n\
      {\n\
      \tbackground-color: #f4f4f4;\n\
      \twidth: 100%;\n\
      \tmargin: 0em;\n\
      }\n\
      .csharpcode .lnum { color: #606060; }\n\
      &lt;/style&gt;\n\n\
      &lt;p&gt;Now the only way to add a friend is through Person. Yippie!&lt;/p&gt;\n\
      &lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\
      &lt;div class=\"csharpcode\"&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;   1:  &lt;/span&gt;var roger2 = &lt;span class=\"kwrd\"&gt;new&lt;/span&gt; Person2 {Name = &lt;span class=\"str\"&gt;\"Roger\"&lt;/span&gt;};&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;   2:  &lt;/span&gt;roger2.AddFriend(&lt;span class=\"kwrd\"&gt;new&lt;/span&gt; Person2 { Name = &lt;span class=\"str\"&gt;\"Eddie\"&lt;/span&gt; });&lt;/pre&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;   3:  &lt;/span&gt;roger2.AddFriend(&lt;span class=\"kwrd\"&gt;new&lt;/span&gt; Person2 { Name = &lt;span class=\"str\"&gt;\"Freddie\"&lt;/span&gt; });&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;   4:  &lt;/span&gt;roger2.AddFriend(&lt;span class=\"kwrd\"&gt;new&lt;/span&gt; Person2 { Name = &lt;span class=\"str\"&gt;\"Gordie\"&lt;/span&gt; });&lt;/pre&gt;&lt;/div&gt;\n\
      &lt;style type=\"text/css\"&gt;.csharpcode, .csharpcode pre\n\
      {\n\
      \tfont-size: small;\n\
      \tcolor: black;\n\
      \tfont-family: consolas, \"Courier New\", courier, monospace;\n\
      \tbackground-color: #ffffff;\n\
      \t/*white-space: pre;*/\n\
      }\n\
      .csharpcode pre { margin: 0em; }\n\
      .csharpcode .rem { color: #008000; }\n\
      .csharpcode .kwrd { color: #0000ff; }\n\
      .csharpcode .str { color: #006080; }\n\
      .csharpcode .op { color: #0000c0; }\n\
      .csharpcode .preproc { color: #cc6633; }\n\
      .csharpcode .asp { background-color: #ffff00; }\n\
      .csharpcode .html { color: #800000; }\n\
      .csharpcode .attr { color: #ff0000; }\n\
      .csharpcode .alt\n\
      {\n\
      \tbackground-color: #f4f4f4;\n\
      \twidth: 100%;\n\
      \tmargin: 0em;\n\
      }\n\
      .csharpcode .lnum { color: #606060; }\n\
      &lt;/style&gt;\n\n\
      &lt;p&gt;&amp;nbsp;&lt;/p&gt;\n\
      &lt;p&gt;If I wanted to make this a fluent interface all I would need to do is instead of returning void, return the Person class.&lt;/p&gt;\n\
      &lt;div class=\"csharpcode\"&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;   1:  &lt;/span&gt;    &lt;span class=\"kwrd\"&gt;public&lt;/span&gt; &lt;span class=\"kwrd\"&gt;class&lt;/span&gt; Person3&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;   2:  &lt;/span&gt;    {&lt;/pre&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;   3:  &lt;/span&gt;        &lt;span class=\"kwrd\"&gt;public&lt;/span&gt; &lt;span class=\"kwrd\"&gt;string&lt;/span&gt; Name { get; set; }&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;   4:  &lt;/span&gt;        &lt;span class=\"kwrd\"&gt;private&lt;/span&gt; &lt;span class=\"kwrd\"&gt;readonly&lt;/span&gt; List&amp;lt;Person3&amp;gt; _friends;&lt;/pre&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;   5:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;   6:  &lt;/span&gt;        &lt;span class=\"kwrd\"&gt;public&lt;/span&gt; Person3()&lt;/pre&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;   7:  &lt;/span&gt;        {&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;   8:  &lt;/span&gt;            _friends = &lt;span class=\"kwrd\"&gt;new&lt;/span&gt; List&amp;lt;Person3&amp;gt;();&lt;/pre&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;   9:  &lt;/span&gt;        }&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;  10:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;  11:  &lt;/span&gt;        &lt;span class=\"kwrd\"&gt;public&lt;/span&gt; Person3 AddFriend(Person3 friend)&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;  12:  &lt;/span&gt;        {&lt;/pre&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;  13:  &lt;/span&gt;            _friends.Add(friend);&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;  14:  &lt;/span&gt;            &lt;span class=\"kwrd\"&gt;return&lt;/span&gt; &lt;span class=\"kwrd\"&gt;this&lt;/span&gt;;&lt;/pre&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;  15:  &lt;/span&gt;        }&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;  16:  &lt;/span&gt;    }&lt;/pre&gt;&lt;/div&gt;\n\
      &lt;style type=\"text/css\"&gt;.csharpcode, .csharpcode pre\n\
      {\n\
      \tfont-size: small;\n\
      \tcolor: black;\n\
      \tfont-family: consolas, \"Courier New\", courier, monospace;\n\
      \tbackground-color: #ffffff;\n\
      \t/*white-space: pre;*/\n\
      }\n\
      .csharpcode pre { margin: 0em; }\n\
      .csharpcode .rem { color: #008000; }\n\
      .csharpcode .kwrd { color: #0000ff; }\n\
      .csharpcode .str { color: #006080; }\n\
      .csharpcode .op { color: #0000c0; }\n\
      .csharpcode .preproc { color: #cc6633; }\n\
      .csharpcode .asp { background-color: #ffff00; }\n\
      .csharpcode .html { color: #800000; }\n\
      .csharpcode .attr { color: #ff0000; }\n\
      .csharpcode .alt\n\
      {\n\
      \tbackground-color: #f4f4f4;\n\
      \twidth: 100%;\n\
      \tmargin: 0em;\n\
      }\n\
      .csharpcode .lnum { color: #606060; }\n\
      &lt;/style&gt;\n\n\
      &lt;p&gt;Now I can do the same logic like\xE2\x80\xA6&lt;/p&gt;\n\
      &lt;div class=\"csharpcode\"&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;   1:  &lt;/span&gt;var roger3 = &lt;span class=\"kwrd\"&gt;new&lt;/span&gt; Person3 { Name = &lt;span class=\"str\"&gt;\"Roger\"&lt;/span&gt; }&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;   2:  &lt;/span&gt;                            .AddFriend(&lt;span class=\"kwrd\"&gt;new&lt;/span&gt; Person3 { Name = &lt;span class=\"str\"&gt;\"Eddie\"&lt;/span&gt; })&lt;/pre&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;   3:  &lt;/span&gt;                            .AddFriend(&lt;span class=\"kwrd\"&gt;new&lt;/span&gt; Person3 { Name = &lt;span class=\"str\"&gt;\"Freddie\"&lt;/span&gt; })&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;   4:  &lt;/span&gt;                            .AddFriend(&lt;span class=\"kwrd\"&gt;new&lt;/span&gt; Person3 { Name = &lt;span class=\"str\"&gt;\"Gordie\"&lt;/span&gt; });&lt;/pre&gt;&lt;/div&gt;\n\
      &lt;style type=\"text/css\"&gt;.csharpcode, .csharpcode pre\n\
      {\n\
      \tfont-size: small;\n\
      \tcolor: black;\n\
      \tfont-family: consolas, \"Courier New\", courier, monospace;\n\
      \tbackground-color: #ffffff;\n\
      \t/*white-space: pre;*/\n\
      }\n\
      .csharpcode pre { margin: 0em; }\n\
      .csharpcode .rem { color: #008000; }\n\
      .csharpcode .kwrd { color: #0000ff; }\n\
      .csharpcode .str { color: #006080; }\n\
      .csharpcode .op { color: #0000c0; }\n\
      .csharpcode .preproc { color: #cc6633; }\n\
      .csharpcode .asp { background-color: #ffff00; }\n\
      .csharpcode .html { color: #800000; }\n\
      .csharpcode .attr { color: #ff0000; }\n\
      .csharpcode .alt\n\
      {\n\
      \tbackground-color: #f4f4f4;\n\
      \twidth: 100%;\n\
      \tmargin: 0em;\n\
      }\n\
      .csharpcode .lnum { color: #606060; }\n\
      &lt;/style&gt;\n\n\
      &lt;p&gt;That is pretty cool, but fluent interfaces really shine with the builder pattern.&lt;/p&gt;\n\
      &lt;p&gt;This time around I want to force construction of a person through a builder and have the builder use a fluent interface. Notice my Person\xE2\x80\x99s constructor and fields are private. I embed the builder class within the Person class so the builder has access to the constructor and fields. In this manner only my builder class has access to constructing a person. My builder can now act as an anti-corruption layer for Person.&lt;/p&gt;\n\
      &lt;div class=\"csharpcode\"&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;   1:  &lt;/span&gt;    &lt;span class=\"kwrd\"&gt;public&lt;/span&gt; &lt;span class=\"kwrd\"&gt;class&lt;/span&gt; Person4&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;   2:  &lt;/span&gt;    {&lt;/pre&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;   3:  &lt;/span&gt;        &lt;span class=\"kwrd\"&gt;private&lt;/span&gt; &lt;span class=\"kwrd\"&gt;string&lt;/span&gt; _name;&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;   4:  &lt;/span&gt;        &lt;span class=\"kwrd\"&gt;private&lt;/span&gt; List&amp;lt;Person4&amp;gt; _friends;&lt;/pre&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;   5:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;   6:  &lt;/span&gt;        &lt;span class=\"kwrd\"&gt;private&lt;/span&gt; Person4()&lt;/pre&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;   7:  &lt;/span&gt;        {&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;   8:  &lt;/span&gt;            _friends = &lt;span class=\"kwrd\"&gt;new&lt;/span&gt; List&amp;lt;Person4&amp;gt;();&lt;/pre&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;   9:  &lt;/span&gt;        }&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;  10:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;  11:  &lt;/span&gt;        &lt;span class=\"kwrd\"&gt;public&lt;/span&gt; Person4 AddFriend(Person4 friend)&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;  12:  &lt;/span&gt;        {&lt;/pre&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;  13:  &lt;/span&gt;            _friends.Add(friend);&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;  14:  &lt;/span&gt;            &lt;span class=\"kwrd\"&gt;return&lt;/span&gt; &lt;span class=\"kwrd\"&gt;this&lt;/span&gt;;&lt;/pre&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;  15:  &lt;/span&gt;        }&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;  16:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;  17:  &lt;/span&gt;        &lt;span class=\"kwrd\"&gt;public&lt;/span&gt; &lt;span class=\"kwrd\"&gt;static&lt;/span&gt; PersonBuilder createAPerson()&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;  18:  &lt;/span&gt;        {&lt;/pre&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;  19:  &lt;/span&gt;            &lt;span class=\"kwrd\"&gt;return&lt;/span&gt; &lt;span class=\"kwrd\"&gt;new&lt;/span&gt; PersonBuilder();&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;  20:  &lt;/span&gt;        }&lt;/pre&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;  21:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;  22:  &lt;/span&gt;        &lt;span class=\"kwrd\"&gt;public&lt;/span&gt; &lt;span class=\"kwrd\"&gt;class&lt;/span&gt; PersonBuilder&lt;/pre&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;  23:  &lt;/span&gt;        {&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;  24:  &lt;/span&gt;            &lt;span class=\"kwrd\"&gt;private&lt;/span&gt; Person4 _person;&lt;/pre&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;  25:  &lt;/span&gt;            &lt;span class=\"kwrd\"&gt;public&lt;/span&gt; PersonBuilder()&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;  26:  &lt;/span&gt;            {&lt;/pre&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;  27:  &lt;/span&gt;                _person = &lt;span class=\"kwrd\"&gt;new&lt;/span&gt; Person4();&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;  28:  &lt;/span&gt;            }&lt;/pre&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;  29:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;  30:  &lt;/span&gt;            &lt;span class=\"kwrd\"&gt;public&lt;/span&gt; PersonBuilder named(&lt;span class=\"kwrd\"&gt;string&lt;/span&gt; name)&lt;/pre&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;  31:  &lt;/span&gt;            {&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;  32:  &lt;/span&gt;                _person._name = name;&lt;/pre&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;  33:  &lt;/span&gt;                &lt;span class=\"kwrd\"&gt;return&lt;/span&gt; &lt;span class=\"kwrd\"&gt;this&lt;/span&gt;;&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;  34:  &lt;/span&gt;            }&lt;/pre&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;  35:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;  36:  &lt;/span&gt;            &lt;span class=\"kwrd\"&gt;public&lt;/span&gt; PersonBuilder withFriend(Person4 friend)&lt;/pre&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;  37:  &lt;/span&gt;            {&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;  38:  &lt;/span&gt;                _person.AddFriend(friend);&lt;/pre&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;  39:  &lt;/span&gt;                &lt;span class=\"kwrd\"&gt;return&lt;/span&gt; &lt;span class=\"kwrd\"&gt;this&lt;/span&gt;;&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;  40:  &lt;/span&gt;            }&lt;/pre&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;  41:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;  42:  &lt;/span&gt;            &lt;span class=\"kwrd\"&gt;public&lt;/span&gt; PersonBuilder withaFriendNamed(&lt;span class=\"kwrd\"&gt;string&lt;/span&gt; name)&lt;/pre&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;  43:  &lt;/span&gt;            {&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;  44:  &lt;/span&gt;                var friend = createAPerson().named(name).finish();&lt;/pre&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;  45:  &lt;/span&gt;                _person.AddFriend(friend);&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;  46:  &lt;/span&gt;                &lt;span class=\"kwrd\"&gt;return&lt;/span&gt; &lt;span class=\"kwrd\"&gt;this&lt;/span&gt;;&lt;/pre&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;  47:  &lt;/span&gt;            }&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;  48:  &lt;/span&gt;&amp;nbsp;&lt;/pre&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;  49:  &lt;/span&gt;            &lt;span class=\"kwrd\"&gt;public&lt;/span&gt; Person4 finish()&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;  50:  &lt;/span&gt;            {&lt;/pre&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;  51:  &lt;/span&gt;                &lt;span class=\"kwrd\"&gt;return&lt;/span&gt; _person;&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;  52:  &lt;/span&gt;            }&lt;/pre&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;  53:  &lt;/span&gt;        }&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;  54:  &lt;/span&gt;    }&lt;/pre&gt;&lt;/div&gt;\n\
      &lt;style type=\"text/css\"&gt;.csharpcode, .csharpcode pre\n\
      {\n\
      \tfont-size: small;\n\
      \tcolor: black;\n\
      \tfont-family: consolas, \"Courier New\", courier, monospace;\n\
      \tbackground-color: #ffffff;\n\
      \t/*white-space: pre;*/\n\
      }\n\
      .csharpcode pre { margin: 0em; }\n\
      .csharpcode .rem { color: #008000; }\n\
      .csharpcode .kwrd { color: #0000ff; }\n\
      .csharpcode .str { color: #006080; }\n\
      .csharpcode .op { color: #0000c0; }\n\
      .csharpcode .preproc { color: #cc6633; }\n\
      .csharpcode .asp { background-color: #ffff00; }\n\
      .csharpcode .html { color: #800000; }\n\
      .csharpcode .attr { color: #ff0000; }\n\
      .csharpcode .alt\n\
      {\n\
      \tbackground-color: #f4f4f4;\n\
      \twidth: 100%;\n\
      \tmargin: 0em;\n\
      }\n\
      .csharpcode .lnum { color: #606060; }\n\
      &lt;/style&gt;\n\n\
      &lt;p&gt;Now to create Roger and his friends I do..&lt;/p&gt;\n\
      &lt;div class=\"csharpcode\"&gt;&amp;nbsp;&lt;/div&gt;\n\
      &lt;div class=\"csharpcode\"&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;   1:  &lt;/span&gt;var roger4 = Person4.createAPerson()&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;   2:  &lt;/span&gt;                    .named(&lt;span class=\"str\"&gt;\"Roger\"&lt;/span&gt;)&lt;/pre&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;   3:  &lt;/span&gt;                    .withaFriendNamed(&lt;span class=\"str\"&gt;\"Eddie\"&lt;/span&gt;)&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;   4:  &lt;/span&gt;                    .withaFriendNamed(&lt;span class=\"str\"&gt;\"Freddie\"&lt;/span&gt;)&lt;/pre&gt;&lt;pre class=\"alt\"&gt;&lt;span class=\"lnum\"&gt;   5:  &lt;/span&gt;                    .withaFriendNamed(&lt;span class=\"str\"&gt;\"Gordie\"&lt;/span&gt;)&lt;/pre&gt;&lt;pre&gt;&lt;span class=\"lnum\"&gt;   6:  &lt;/span&gt;                    .finish();       &lt;/pre&gt;&lt;/div&gt;\n\
      &lt;style type=\"text/css\"&gt;.csharpcode, .csharpcode pre\n\
      {\n\
      \tfont-size: small;\n\
      \tcolor: black;\n\
      \tfont-family: consolas, \"Courier New\", courier, monospace;\n\
      \tbackground-color: #ffffff;\n\
      \t/*white-space: pre;*/\n\
      }\n\
      .csharpcode pre { margin: 0em; }\n\
      .csharpcode .rem { color: #008000; }\n\
      .csharpcode .kwrd { color: #0000ff; }\n\
      .csharpcode .str { color: #006080; }\n\
      .csharpcode .op { color: #0000c0; }\n\
      .csharpcode .preproc { color: #cc6633; }\n\
      .csharpcode .asp { background-color: #ffff00; }\n\
      .csharpcode .html { color: #800000; }\n\
      .csharpcode .attr { color: #ff0000; }\n\
      .csharpcode .alt\n\
      {\n\
      \tbackground-color: #f4f4f4;\n\
      \twidth: 100%;\n\
      \tmargin: 0em;\n\
      }\n\
      .csharpcode .lnum { color: #606060; }\n\
      &lt;/style&gt;\n\n\
      &lt;p&gt;It\xE2\x80\x99s a simple example but maybe it sparked some ideas on how to use fluent interfaces to chain methods and make your code more approachable to people without Computer Science degrees. :D&lt;/p&gt;\n\
      &lt;p&gt;JB&lt;/p&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-236104928740493549?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2009/08/acaseforpatterntypefluentinterfacescrea.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-1357736149422268270</guid><pubDate>Tue, 04 Aug 2009 05:11:00 +0000</pubDate><atom:updated>2009-08-03T22:14:17.361-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>Tutorial</category><category domain='http://www.blogger.com/atom/ns#'>Open Rasta</category><title>Hello Open Rasta</title><description>&lt;p&gt;So Ryan, the apostle of everything on the web, has been spreading the gospel of Open Rasta for months. Tonight I decided that finally, I should download and give this fantastical framework a shot.&lt;/p&gt;  &lt;p&gt;For an explanation on what OpenRasta is and is not, I shall direct you to their sites:&lt;/p&gt;  &lt;ol&gt;   &lt;li&gt;&lt;font color=\"#efefef\"&gt;&lt;a href=\"http://trac.caffeine-it.com/openrasta/wiki/Doc\"&gt;Open Rasta Documentation&lt;/a&gt;&lt;/font&gt; &lt;/li&gt;    &lt;li&gt;&lt;font color=\"#efefef\"&gt;&lt;a href=\"http://www.ohloh.net/p/openrasta\"&gt;Open Rasta Download Home&lt;/a&gt;&lt;/font&gt; &lt;/li&gt; &lt;/ol&gt;  &lt;p&gt;What I am going to do is just describe my experience trying their framework for the first time.&lt;/p&gt;  &lt;p&gt;I am a person that likes to learn by trying so I immediately jumped to the \xE2\x80\x98creating your first OpenRasta website\xE2\x80\x99 (&lt;a href=\"http://svn.caffeine-it.com/openrasta/trunk/doc/content/Tutorials/Create-First-Site.html\"&gt;here&lt;/a&gt;). I have looked at some of Ryan\xE2\x80\x99s code and have survived several conversations with Ryan over the framework. ;) I believe that is enough preparation for at least a simple tutorial.&lt;/p&gt;  &lt;p&gt;Well I go to the modifying the web.config section and was left with a broken solution. Apparently from the time the tutorial was written and the time I downloaded the version 2.0.2039.312, the handlers and modules all moved to another assembly. I had a gut feeling it moved and when I talked to Ryan, he confirmed my suspicions. Supposedly he is going to try and update the tutorial.&lt;/p&gt;  &lt;p&gt;In the meantime, just change \xE2\x80\xA6.&amp;quot;OpenRasta.Web.OpenRastaHandler, OpenRasta&amp;quot;&lt;/p&gt;  &lt;p&gt;to\xE2\x80\xA6 &amp;quot;OpenRasta.Hosting.AspNet.OpenRastaHandler, OpenRasta.Hosting.AspNet&amp;quot;&lt;/p&gt;  &lt;p&gt;So change the assembly reference from the OpenRasta.dll to the OpenRasta.Hosting.AspNet.dll&lt;/p&gt;  &lt;p&gt;I assume if you are reading this you have the skill set to modify said correction for the other references.&lt;/p&gt;  &lt;p&gt;After that I breezed through the creation of the \xE2\x80\x98Home\xE2\x80\x99 resource and the \xE2\x80\x98Home\xE2\x80\x99 handler. No duh? Any programmer can make a couple of classes. :)&lt;/p&gt;  &lt;p&gt;I\xE2\x80\x99m at the configuration section and I have to say, I love the fluent interface. Anyone who has talked to me in the past 6 months knows I love the pattern. It instantly makes any framework extremely approachable. &lt;/p&gt;  &lt;p&gt;The tutorial has you making a manual configuration. I tried to find an auto configuration just using some intellisense with no luck. I will investigate this further. If I was going to use OpenRasta I would definitely want a convention based solution. Even with a nice fluent interface, I really don\xE2\x80\x99t want to manually create all my mappings by hand. &lt;/p&gt;  &lt;p&gt;But there is something to be said for simply creating a mapping like :&lt;/p&gt;  &lt;div&gt;   &lt;div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;     &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;ResourceSpace.Has&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;    .ResourcesOfType&amp;lt;Home&amp;gt;()&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;    .AtUri(&lt;span style=\"color: #006080\"&gt;&amp;quot;/home&amp;quot;&lt;/span&gt;)&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;    .HandledBy&amp;lt;HomeHandler&amp;gt;();&lt;/pre&gt;\n  &lt;/div&gt;\n\
      &lt;/div&gt;\n\n\
      &lt;p&gt;\n  &lt;br /&gt;I ran the app expecting the 405 method error as the tutorial predicts.. and got an empty page. I was using FireFox, so I jumped over to IE and was then greeted by the 405 error. I assume FireFox is either handling the problem gracefully or I don\xE2\x80\x99t have some settings setup to display these errors. /shrug&lt;/p&gt;\n\n\
      &lt;p&gt;So then I created my \xE2\x80\x98Get\xE2\x80\x99 method on my HomeHandler. One of the things that did attract me to OpenRasta was the POCO handlers. I\xE2\x80\x99ve grown to appreciate very clean code with some acceptable conventions. Just makes life easier. I can focus on the domain problem and not the intricacies of any given framework.&lt;/p&gt;\n\n\
      &lt;p&gt;Most of this seemingly new re-invention of HTTP as ESB, REST, Atom.. etc is interesting in that its a reexamining of a technology we use all the time. I haven\xE2\x80\x99t done web development in roughly 3 years. The majority of my experience is in smart client apps. That is just the way my career and projects played out for me. The websites I created were always very basic and probably crap if judged by web developer gurus.&lt;/p&gt;\n\n\
      &lt;p&gt;Anyway.&lt;/p&gt;\n\n\
      &lt;p&gt;We click links and magically we get a web page. We don\xE2\x80\x99t really think much about it. Sort of like turning on a light switch or starting your car. We just expect things to work and don\xE2\x80\x99t really worry about it. How many drivers can actually explain a combustion engine? &lt;/p&gt;\n\n\
      &lt;p&gt;There is a lot going on in the background to make the web work. This new (new to me at least) area of development is leveraging the tech the way it was supposed to be used (if I am to believe the pioneers in this arena). A lot of this is a change of perspective. And with any change of perspective it can take awhile to make the transition.&lt;/p&gt;\n\n\
      &lt;p&gt;After that side trip down my ramblings, we come back to me having a handler with a Get method. Now I have graduated to a 406 error (as expected by the tutorial).&lt;/p&gt;\n\n\
      &lt;p&gt;I then created my view as the tutorial suggested. Now upon trying to fluently configure.. I ran into a snag. Again the tutorial is out dated (which is fine for an open source and still growing framework).&lt;/p&gt;\n\n\
      &lt;p&gt;I had to add the \xE2\x80\x9COpenRasta.Codecs.WebForms.dll\xE2\x80\x9D to the solution. &lt;/p&gt;\n\n\
      &lt;p&gt;Also the fluent configuration suggested is\xE2\x80\xA6&lt;/p&gt;\n\n\
      &lt;div&gt;\n  &lt;div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;ResourceSpace.Has.ResourcesOfType&amp;lt;Home&amp;gt;()&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;        .AtUri(&lt;span style=\"color: #006080\"&gt;&amp;quot;/home&amp;quot;&lt;/span&gt;)&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;        .HandledBy&amp;lt;HomeHandler&amp;gt;()&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;        .AndRendededByAspx(&lt;span style=\"color: #006080\"&gt;&amp;quot;~/Views/HomeView.aspx&amp;quot;&lt;/span&gt;);&lt;/pre&gt;\n  &lt;/div&gt;\n\
      &lt;/div&gt;\n\n\
      &lt;p&gt;But since the AndRendededByAspx is obselete, the code should now be:&lt;/p&gt;\n\n\
      &lt;div&gt;\n  &lt;div style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;ResourceSpace.Has.ResourcesOfType&amp;lt;Home&amp;gt;()&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;                    .AtUri(&lt;span style=\"color: #006080\"&gt;&amp;quot;/home&amp;quot;&lt;/span&gt;)&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: white; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;                    .HandledBy&amp;lt;HomeHandler&amp;gt;()&lt;/pre&gt;\n\n    &lt;pre style=\"border-bottom-style: none; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: consolas, &amp;#39;Courier New&amp;#39;, courier, monospace; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\"&gt;                    .RenderedByAspx(&lt;span style=\"color: #006080\"&gt;&amp;quot;~/Views/HomeView.aspx&amp;quot;&lt;/span&gt;);&lt;/pre&gt;\n  &lt;/div&gt;\n\
      &lt;/div&gt;\n\n\
      &lt;p&gt;I then continued the tutorial until I had my Home View that displayed my lovely welcome message.&lt;/p&gt;\n\n\
      &lt;p&gt;Yay! I got my first Open Rasta page to work. :)&lt;/p&gt;\n\n\
      &lt;p&gt;Feel free to investigate my project at my Git Hub repository:&lt;/p&gt;\n\n\
      &lt;p&gt;&lt;a title=\"http://github.com/RookieOne/OpenRastaExperiment/tree/TutorialCompletion\" href=\"http://github.com/RookieOne/OpenRastaExperiment/tree/TutorialCompletion\"&gt;http://github.com/RookieOne/OpenRastaExperiment/tree/TutorialCompletion&lt;/a&gt;&lt;/p&gt;\n\n\
      &lt;p&gt;I\xE2\x80\x99m going to be continuing to change the master branch but the TutorialCompletion branch should remain unchanged.&lt;/p&gt;\n\n\
      &lt;p&gt;SO check out OpenRasta and their (and my) tutorial. Its short and is a great window into viewing the web in a slightly different manner.&lt;/p&gt;\n\n\
      &lt;p&gt;Thanks for your time!&lt;/p&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-1357736149422268270?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2009/08/hello-open-rasta.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-7273112391674117527</guid><pubDate>Tue, 04 Aug 2009 01:09:00 +0000</pubDate><atom:updated>2009-08-03T22:14:50.005-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>WPF</category><title>Toggling Read Only with WPF</title><description>&lt;p&gt;Ayende tweeted a brief code snippet of some WPF he threw together (well I assume he threw it together).&lt;/p&gt;  &lt;p&gt;You can see the code snippet here : &lt;a title=\"http://pastie.org/568259\" href=\"http://pastie.org/568259\"&gt;http://pastie.org/568259&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;He asked : Someone \x7FPLEASE tell me there is a better way than this (WPF)&lt;/p&gt;  &lt;p&gt;I tweeted a brief snippet response to improve that tiny bit. The snippet can be found here : &lt;a title=\"http://codesnippets.joyent.com/posts/show/2221\" href=\"http://codesnippets.joyent.com/posts/show/2221\"&gt;http://codesnippets.joyent.com/posts/show/2221&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;But I couldn\xE2\x80\x99t just leave it at that. I wanted to show a different approach to solving the same problem.&amp;#160; * A later tweet explained his problem was more a datacontext issue, which the snippet I provided should fix. This post does take a different look at how to approach handling read only controls.&lt;/p&gt;  &lt;p&gt;How can we make a control \xE2\x80\x98read only\xE2\x80\x99 through binding?&lt;/p&gt;  &lt;p&gt;The solution can be found here on my Git Hub Repository : &lt;a title=\"http://github.com/RookieOne/WpfTogglingReadOnly/tree/master\" href=\"http://github.com/RookieOne/WpfTogglingReadOnly/tree/master\"&gt;http://github.com/RookieOne/WpfTogglingReadOnly/tree/master&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Ignoring all the other machinations, the money xaml is in the TextBoxStyle found in the Styles\\TextBoxStyles.xaml resource dictionary.&lt;/p&gt;  &lt;div id=\"codeSnippetWrapper\"&gt;   &lt;pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\" id=\"codeSnippet\"&gt;&lt;span style=\"color: #0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color: #800000\"&gt;Style&lt;/span&gt; &lt;span style=\"color: #ff0000\"&gt;x:Key&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;=&amp;quot;TextBoxStyle&amp;quot;&lt;/span&gt; &lt;span style=\"color: #ff0000\"&gt;TargetType&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;=&amp;quot;TextBox&amp;quot;&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;&amp;gt;&lt;/span&gt;        &lt;br /&gt;    &lt;br /&gt;    &lt;span style=\"color: #0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color: #800000\"&gt;Style.Triggers&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;        &lt;br /&gt;        &lt;span style=\"color: #0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color: #800000\"&gt;Trigger&lt;/span&gt; &lt;span style=\"color: #ff0000\"&gt;Property&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;=&amp;quot;AttachedBehaviors:ReadOnlyBehavior.IsReadOnly&amp;quot;&lt;/span&gt; &lt;span style=\"color: #ff0000\"&gt;Value&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;=&amp;quot;True&amp;quot;&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;br /&gt;            &lt;span style=\"color: #008000\"&gt;&amp;lt;!-- Readonly Template --&amp;gt;&lt;/span&gt;&lt;br /&gt;            &lt;span style=\"color: #0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color: #800000\"&gt;Setter&lt;/span&gt; &lt;span style=\"color: #ff0000\"&gt;Property&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;=&amp;quot;Template&amp;quot;&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;                &lt;span style=\"color: #0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color: #800000\"&gt;Setter.Value&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;                    &lt;span style=\"color: #0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color: #800000\"&gt;ControlTemplate&lt;/span&gt; &lt;span style=\"color: #ff0000\"&gt;TargetType&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;=&amp;quot;TextBox&amp;quot;&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;                        &lt;span style=\"color: #0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color: #800000\"&gt;TextBlock&lt;/span&gt; &lt;span style=\"color: #ff0000\"&gt;Text&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;=&amp;quot;{TemplateBinding Text}&amp;quot;&lt;/span&gt; &lt;span style=\"color: #0000ff\"&gt;/&amp;gt;&lt;/span&gt;&lt;br /&gt;                    &lt;span style=\"color: #0000ff\"&gt;&amp;lt;/&lt;/span&gt;&lt;span style=\"color: #800000\"&gt;ControlTemplate&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;                &lt;span style=\"color: #0000ff\"&gt;&amp;lt;/&lt;/span&gt;&lt;span style=\"color: #800000\"&gt;Setter.Value&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;            &lt;span style=\"color: #0000ff\"&gt;&amp;lt;/&lt;/span&gt;&lt;span style=\"color: #800000\"&gt;Setter&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;            &lt;br /&gt;        &lt;span style=\"color: #0000ff\"&gt;&amp;lt;/&lt;/span&gt;&lt;span style=\"color: #800000\"&gt;Trigger&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;        &lt;br /&gt;    &lt;span style=\"color: #0000ff\"&gt;&amp;lt;/&lt;/span&gt;&lt;span style=\"color: #800000\"&gt;Style.Triggers&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;    &lt;br /&gt;&lt;span style=\"color: #0000ff\"&gt;&amp;lt;/&lt;/span&gt;&lt;span style=\"color: #800000\"&gt;Style&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;\n\n  &lt;br /&gt;&lt;/div&gt;\n\n\
      &lt;p&gt;As you can see I use the IsReadOnly property on the base view model as a data trigger and then completely swap out the control template for the text box. This allows for complete customization of the read only look. It also pushes this functionality out into a style to be reused through the entire application.&lt;/p&gt;\n\n\
      &lt;p&gt;Other things to note with the project (for those unfamiliar with the following practices):&lt;/p&gt;\n\n\
      &lt;h5&gt;1. Data Templates as Views&lt;/h5&gt;\n\n\
      &lt;div id=\"codeSnippetWrapper\"&gt;\n  &lt;pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\" id=\"codeSnippet\"&gt;&lt;span style=\"color: #0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color: #800000\"&gt;DataTemplate&lt;/span&gt; &lt;span style=\"color: #ff0000\"&gt;DataType&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;=&amp;quot;{x:Type PersonView:PersonViewModel}&amp;quot;&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;\n\n  &lt;br /&gt;&lt;/div&gt;\n\n\
      &lt;p&gt;So whenever WPF tries to resolve the PersonViewModel in a container, it will use this DataTemplate since I did not provide a key but only a DataType.&lt;/p&gt;\n\n\
      &lt;p&gt;So in Window1 I can do\xE2\x80\xA6&lt;/p&gt;\n\n\
      &lt;div id=\"codeSnippetWrapper\"&gt;\n  &lt;pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\" id=\"codeSnippet\"&gt;&lt;span style=\"color: #0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color: #800000\"&gt;ContentControl&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;&amp;gt;&lt;/span&gt;&lt;br /&gt;    &lt;span style=\"color: #0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color: #800000\"&gt;PersonView:PersonViewModel&lt;/span&gt; &lt;span style=\"color: #0000ff\"&gt;/&amp;gt;&lt;/span&gt;&lt;br /&gt;&lt;span style=\"color: #0000ff\"&gt;&amp;lt;/&lt;/span&gt;&lt;span style=\"color: #800000\"&gt;ContentControl&lt;/span&gt;&lt;span style=\"color: #0000ff\"&gt;&amp;gt;&lt;/span&gt;&lt;/pre&gt;\n\n  &lt;br /&gt;&lt;/div&gt;\n\n\
      &lt;p&gt;Again this is a very simple scenario so I am ignoring any presentation patterns on how the ViewModel is placed or \xE2\x80\x98shown\xE2\x80\x99. Also ignoring how dependencies can be resolved, etc.&lt;/p&gt;\n\n\
      &lt;p&gt;And even though this is a content control, this works for items controls as well. So consider a stack of \xE2\x80\x98views\xE2\x80\x99. You could be accomplish this simply by placing a collection of ViewModels in an ItemsControl.&lt;/p&gt;\n\n\
      &lt;p&gt;But really\xE2\x80\xA6 that\xE2\x80\x99s for another post.&lt;/p&gt;\n\n\
      &lt;h4&gt;2. Expression for INotifyPropertyChanged&lt;/h4&gt;\n\n\
      &lt;p&gt;I am also using a LambdaExpression to implement INotifyPropertyChanged. Essentially achieving safe notification and eliminating those nasty magic strings.&lt;/p&gt;\n\n\
      &lt;pre style=\"border-bottom-style: none; text-align: left; padding-bottom: 0px; line-height: 12pt; border-right-style: none; background-color: #f4f4f4; margin: 0em; padding-left: 0px; width: 100%; padding-right: 0px; font-family: &amp;#39;Courier New&amp;#39;, courier, monospace; direction: ltr; border-top-style: none; color: black; font-size: 8pt; border-left-style: none; overflow: visible; padding-top: 0px\" id=\"codeSnippet\"&gt;&lt;span style=\"color: #0000ff\"&gt;public&lt;/span&gt; &lt;span style=\"color: #0000ff\"&gt;string&lt;/span&gt; FirstName&lt;br /&gt;{&lt;br /&gt;    get { &lt;span style=\"color: #0000ff\"&gt;return&lt;/span&gt; _firstName; }&lt;br /&gt;    set&lt;br /&gt;    {&lt;br /&gt;        _firstName = &lt;span style=\"color: #0000ff\"&gt;value&lt;/span&gt;;&lt;br /&gt;        OnPropertyChanged(&lt;span style=\"color: #0000ff\"&gt;this&lt;/span&gt;, m =&amp;gt; m.FirstName);&lt;br /&gt;    }&lt;br /&gt;}&lt;/pre&gt;\n\n\
      &lt;p&gt;Anyway.. that was a quick project I threw together. I hope it was helpful.&lt;/p&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-7273112391674117527?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2009/08/toggling-read-only-with-wpf.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-605247935246156096</guid><pubDate>Mon, 03 Aug 2009 05:33:00 +0000</pubDate><atom:updated>2009-08-02T22:35:35.833-07:00</atom:updated><title>Welcome to The Absent Minded Coder</title><description>&lt;p&gt;I have been posting (off and on) at &lt;a href=\"http://www.wizardsofsmart.net\"&gt;wizardsofsmart&lt;/a&gt; and will continue to do so (hell the domain name was my idea).&lt;/p&gt;  &lt;p&gt;I just wanted a place I could also \xE2\x80\x98house\xE2\x80\x99 all my posts. It can get complicated when trying to figure out whether I wrote a post or Ryan did. &lt;/p&gt;  &lt;p&gt;Why the absent minded coder? Long ago (in the before time) a teacher called me an absent minded professor\xE2\x80\xA6 what was weird is that I hated that teacher but she accurately captured my persona. &lt;/p&gt;  &lt;p&gt;According to numerous Myers Briggs tests I am an INTP whose N can cross over to S. The ITP though\xE2\x80\xA6 I am well into those categories.&lt;/p&gt;  &lt;p&gt;This all means that I can spend hours upons hours on theories and coding\xE2\x80\xA6 yet never find the time to fill out an expense report. :D&lt;/p&gt;  &lt;p&gt;Anyway, I will play with themes as I search for something that strikes my fancy. But until then I can at least make posts.&lt;/p&gt;  &lt;p&gt;For those that don\xE2\x80\x99t know where else to find me online:&lt;/p&gt;  &lt;p&gt;Twitter : @RookieOne : &lt;a title=\"http://twitter.com/RookieOne\" href=\"http://twitter.com/RookieOne\"&gt;http://twitter.com/RookieOne&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Blog shared with friend Ryan Riley : &lt;a title=\"http://www.wizardsofsmart.net/\" href=\"http://www.wizardsofsmart.net/\"&gt;http://www.wizardsofsmart.net/&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Git Hub Repositories : &lt;a title=\"http://github.com/RookieOne\" href=\"http://github.com/RookieOne\"&gt;http://github.com/RookieOne&lt;/a&gt;&lt;/p&gt;  &lt;p&gt;Code Snippets : &lt;a title=\"http://codesnippets.joyent.com/user/RookieOne\" href=\"http://codesnippets.joyent.com/user/RookieOne\"&gt;http://codesnippets.joyent.com/user/RookieOne&lt;/a&gt;&lt;/p&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-605247935246156096?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2009/08/welcome-to-absent-minded-coder.html</link><author>noreply@blogger.com (JB)</author><thr:total>2</thr:total></item></channel></rss>"
    http_version: "1.1"
- !ruby/struct:VCR::HTTPInteraction 
  request: !ruby/struct:VCR::Request 
    method: :get
    uri: http://www.theabsentmindedcoder.com:80/feeds/posts/default?alt=rss&max-results=1
    body: 
    headers: 
  response: !ruby/struct:VCR::Response 
    status: !ruby/struct:VCR::ResponseStatus 
      code: 200
      message: OK
    headers: 
      content-type: 
      - application/rss+xml; charset=UTF-8
      expires: 
      - Wed, 06 Apr 2011 18:21:16 GMT
      date: 
      - Wed, 06 Apr 2011 18:21:16 GMT
      last-modified: 
      - Mon, 21 Mar 2011 00:40:33 GMT
      etag: 
      - W/"AkcHQnc9eSl7ImA9WhZTFks."
      x-content-type-options: 
      - nosniff
      x-xss-protection: 
      - 1; mode=block
      server: 
      - GSE
      cache-control: 
      - public, max-age=0, proxy-revalidate, must-revalidate
      age: 
      - "0"
      transfer-encoding: 
      - chunked
    body: "<?xml version='1.0' encoding='UTF-8'?><rss xmlns:atom='http://www.w3.org/2005/Atom' xmlns:openSearch='http://a9.com/-/spec/opensearchrss/1.0/' xmlns:georss='http://www.georss.org/georss' xmlns:thr='http://purl.org/syndication/thread/1.0' version='2.0'><channel><atom:id>tag:blogger.com,1999:blog-2815645646073366093</atom:id><lastBuildDate>Mon, 21 Mar 2011 00:40:33 +0000</lastBuildDate><title>The Absent Minded Coder</title><description>Repository&amp;lt;Idea&amp;gt;().Where(i =&amp;gt; i.Author == &amp;quot;JB&amp;quot;)</description><link>http://www.theabsentmindedcoder.com/</link><managingEditor>noreply@blogger.com (JB)</managingEditor><generator>Blogger</generator><openSearch:totalResults>67</openSearch:totalResults><openSearch:startIndex>1</openSearch:startIndex><openSearch:itemsPerPage>1</openSearch:itemsPerPage><item><guid isPermaLink='false'>tag:blogger.com,1999:blog-2815645646073366093.post-6567329549691676757</guid><pubDate>Mon, 01 Nov 2010 07:30:00 +0000</pubDate><atom:updated>2010-11-01T00:30:00.306-07:00</atom:updated><category domain='http://www.blogger.com/atom/ns#'>Refactor</category><category domain='http://www.blogger.com/atom/ns#'>C#</category><title>OMG Dependencies\xE2\x80\x93new direction time</title><description>&lt;p&gt;After looking at the BaseDALObject and tracing its usage, I\xE2\x80\x99ve come to the conclusion that at the moment, it is too intertwined to refactor. I will leave it as is with its simple code cleanup and try a different angle.&lt;/p&gt; &lt;p&gt;So I decided to run the application. And kaboom! No go. So I think I will just start from the top down. &lt;/p&gt; &lt;p&gt;Wow, I completely forgot that back in the day we didn\xE2\x80\x99t have the awesomeness of partial classes. So my main form has a bunch of generated controls etc from the designer. So I am going to create a new MainForm and let VS do its magic joo joo. And actually since I have to create a new form anyway, I am going to create a WPF application. &lt;/p&gt; &lt;p&gt;Step 1 \xE2\x80\x93 Create a new WPF project called RMS&lt;/p&gt; &lt;p&gt;Step 2 \xE2\x80\x93 Move all the WinForm controls over&lt;/p&gt; &lt;p&gt;When I tried to compile after fixing some minor issues. I got this error message&lt;/p&gt; &lt;p&gt;&lt;a href=\"http://lh3.ggpht.com/_jZ1HIkVkz48/TM0bEe5ozAI/AAAAAAAAAJ8/_pc9VSU6o3A/s1600-h/image%5B4%5D.png\"&gt;&lt;img style=\"background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px\" title=\"image\" border=\"0\" alt=\"image\" src=\"http://lh4.ggpht.com/_jZ1HIkVkz48/TM0bF9RfC-I/AAAAAAAAAKA/XCuYjI6u61c/image_thumb%5B2%5D.png?imgmax=800\" width=\"968\" height=\"135\"&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;The issue is my MainForm still has a \xE2\x80\x98main\xE2\x80\x99 method. The new WPF application project has the main method in the App.xaml.cs&lt;/p&gt; &lt;p&gt;Remove this and we should be good to go. &lt;/p&gt; &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:dd493b12-52da-4f1c-9ba4-273f9c76f9eb\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background: #ddd; overflow: auto\"&gt; &lt;ol style=\"background: #000000; margin: 0 0 0 2em; padding: 0 0 0 5px;\"&gt; &lt;li&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;span style=\"color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"color:#808080\"&gt;&amp;lt;summary&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"color:#008000\"&gt; The main entry point for the application.&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#808080\"&gt;///&lt;/span&gt;&lt;span style=\"color:#008000\"&gt; &lt;/span&gt;&lt;span style=\"color:#808080\"&gt;&amp;lt;/summary&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;[&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;STAThread&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;]&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;static&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;void&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; Main() &lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0{&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;Application&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;.Run(&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;MainForm&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;());&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0}&lt;/span&gt;&lt;/li&gt; &lt;/ol&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;p&gt;The project already has a MainWindow and it is opened up by the application on startup. How do I know? I can just look at the App.xaml and the StartupUri.&lt;/p&gt; &lt;p&gt;&lt;a href=\"http://lh6.ggpht.com/_jZ1HIkVkz48/TM0bGUXb8YI/AAAAAAAAAKE/R0r3x5v-wIo/s1600-h/image%5B9%5D.png\"&gt;&lt;img style=\"background-image: none; border-bottom: 0px; border-left: 0px; padding-left: 0px; padding-right: 0px; display: inline; border-top: 0px; border-right: 0px; padding-top: 0px\" title=\"image\" border=\"0\" alt=\"image\" src=\"http://lh3.ggpht.com/_jZ1HIkVkz48/TM0bHN-9VeI/AAAAAAAAAKI/4FNp_qWNuYs/image_thumb%5B5%5D.png?imgmax=800\" width=\"798\" height=\"216\"&gt;&lt;/a&gt;&lt;/p&gt; &lt;p&gt;So now time to start moving over the actual code and controls for the MainForm. &lt;/p&gt; &lt;p&gt;&lt;font size=\"5\"&gt;&lt;strong&gt;Menu&lt;/strong&gt;&lt;/font&gt;&lt;/p&gt; &lt;p&gt;File &amp;gt; Quit&lt;/p&gt; &lt;p&gt;Manage Data &amp;gt; Manage Datasets, Manage Other Data&lt;/p&gt; &lt;p&gt;Analysis &amp;gt; Analyze Rate Schedules&lt;/p&gt; &lt;p&gt;To recreate this in WPF we simply do:&lt;/p&gt; &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:65ef2b39-f63b-4898-91d4-671ef04a1753\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background: #ddd; overflow: auto\"&gt; &lt;ol style=\"background: #000000; margin: 0 0 0 2.5em; padding: 0 0 0 5px;\"&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;Menu&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;MenuItem&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt; Header&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;=&lt;/span&gt;&lt;span style=\"color:#668f5f\"&gt;&amp;quot;File&amp;quot;&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;MenuItem&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt; Header&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;=&lt;/span&gt;&lt;span style=\"color:#668f5f\"&gt;&amp;quot;Quit&amp;quot;&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt; /&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;/&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;MenuItem&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;MenuItem&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt; Header&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;=&lt;/span&gt;&lt;span style=\"color:#668f5f\"&gt;&amp;quot;Manage Data&amp;quot;&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;MenuItem&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt; Header&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;=&lt;/span&gt;&lt;span style=\"color:#668f5f\"&gt;&amp;quot;Manage Datasets&amp;quot;&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt; /&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;MenuItem&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt; Header&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;=&lt;/span&gt;&lt;span style=\"color:#668f5f\"&gt;&amp;quot;Manage Other Data&amp;quot;&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt; /&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;/&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;MenuItem&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;MenuItem&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt; Header&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;=&lt;/span&gt;&lt;span style=\"color:#668f5f\"&gt;&amp;quot;Analysis&amp;quot;&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;MenuItem&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt; Header&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;=&lt;/span&gt;&lt;span style=\"color:#668f5f\"&gt;&amp;quot;Analyze Rate Schedules&amp;quot;&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt; /&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;/&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;MenuItem&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;/&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;Menu&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;/ol&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;p&gt;&lt;strong&gt;&lt;font size=\"5\"&gt;Change layout controls&lt;/font&gt;&lt;/strong&gt;&lt;/p&gt; &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:41a93cf7-91de-4505-aa5d-3bf5e9d2df02\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background: #ddd; overflow: auto\"&gt; &lt;ol style=\"background: #000000; margin: 0 0 0 2.5em; padding: 0 0 0 5px;\"&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;Panel&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; leftPanel = &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;Panel&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;();&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0leftPanel.AutoScroll = &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;true&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0leftPanel.Width = &lt;/span&gt;&lt;span style=\"color:#bda265\"&gt;350&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0leftPanel.Dock = &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;DockStyle&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;.Left;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&amp;nbsp;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;Splitter&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; splitterCtrl = &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;Splitter&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;();&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0splitterCtrl.Dock = &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;DockStyle&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;.Left;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0splitterCtrl.MinExtra = &lt;/span&gt;&lt;span style=\"color:#bda265\"&gt;200&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0splitterCtrl.MinSize = &lt;/span&gt;&lt;span style=\"color:#bda265\"&gt;200&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&amp;nbsp;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;Panel&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; mainPanel = &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;Panel&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;();&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0mainPanel.AutoScroll = &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;true&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0mainPanel.Dock = &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;DockStyle&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;.Fill;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&amp;nbsp;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#ff0000\"&gt;Controls&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;.AddRange(&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;Control&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;[] {mainPanel, splitterCtrl, leftPanel});&lt;/span&gt;&lt;/li&gt; &lt;/ol&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;p&gt;Based on the naming of the controls and my recollection. I had a left side and a main panel. And looks like a splitter between the two panels. In WPF we can do this all within a grid control.&lt;/p&gt; &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:d8737ede-fb7f-4185-a122-cde3ba0a3a08\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background: #ddd; overflow: auto\"&gt; &lt;ol style=\"background: #000000; margin: 0 0 0 2.5em; padding: 0 0 0 5px;\"&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;Grid&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;Grid.RowDefinitions&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;RowDefinition&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt; Height&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;=&lt;/span&gt;&lt;span style=\"color:#668f5f\"&gt;&amp;quot;Auto&amp;quot;&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt; /&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;RowDefinition&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt; /&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;/&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;Grid.RowDefinitions&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;Grid.ColumnDefinitions&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;ColumnDefinition&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt; /&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;ColumnDefinition&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt; /&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;ColumnDefinition&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt; /&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;/&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;Grid.ColumnDefinitions&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;/ol&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:93c26bb4-73a4-4519-ab86-f1d4c6da1efa\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background: #ddd; overflow: auto\"&gt; &lt;ol style=\"background: #000000; margin: 0 0 0 2.5em; padding: 0 0 0 5px;\"&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;StackPanel&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt; x&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;:&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;Name&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;=&lt;/span&gt;&lt;span style=\"color:#668f5f\"&gt;&amp;quot;leftPanel&amp;quot;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt; Grid.Row&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;=&lt;/span&gt;&lt;span style=\"color:#668f5f\"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt; Grid.Column&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;=&lt;/span&gt;&lt;span style=\"color:#668f5f\"&gt;&amp;quot;0&amp;quot;&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt; Width&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;=&lt;/span&gt;&lt;span style=\"color:#668f5f\"&gt;&amp;quot;350&amp;quot;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt; MinWidth&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;=&lt;/span&gt;&lt;span style=\"color:#668f5f\"&gt;&amp;quot;200&amp;quot;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt; /&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;GridSplitter&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt; Grid.Row&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;=&lt;/span&gt;&lt;span style=\"color:#668f5f\"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt; Grid.Column&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;=&lt;/span&gt;&lt;span style=\"color:#668f5f\"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt; /&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#668f5f\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;&amp;lt;&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;StackPanel&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt; x&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;:&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;Name&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;=&lt;/span&gt;&lt;span style=\"color:#668f5f\"&gt;&amp;quot;mainPanel&amp;quot;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt; Grid.Row&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;=&lt;/span&gt;&lt;span style=\"color:#668f5f\"&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt; Grid.Column&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt;=&lt;/span&gt;&lt;span style=\"color:#668f5f\"&gt;&amp;quot;2&amp;quot;&lt;/span&gt;&lt;span style=\"color:#0000ff\"&gt; /&amp;gt;&lt;/span&gt;&lt;/li&gt; &lt;/ol&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt;  &lt;p&gt;Now time to swap out change the code where some other controls are added to the panels.&lt;/p&gt; &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:452f3ce3-94a1-4be0-9dc7-09ab1305afb0\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background: #ddd; overflow: auto\"&gt; &lt;ol style=\"background: #000000; margin: 0 0 0 2em; padding: 0 0 0 5px;\"&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;Contract_Control&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; contractsCtrl = &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;Contract_Control&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;(rmsController);&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0contractsCtrl.Dock = &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;DockStyle&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;.Fill;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0leftPanel.&lt;/span&gt;&lt;span style=\"color:#ff0000\"&gt;Controls&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;.Add(contractsCtrl);&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&amp;nbsp;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;RateSchedule_Control&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; rateScheduleCtrl = &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;RateSchedule_Control&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;(rmsController);&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0rateScheduleCtrl.Dock = &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;DockStyle&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;.Fill;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0mainPanel.&lt;/span&gt;&lt;span style=\"color:#ff0000\"&gt;Controls&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;.Add(rateScheduleCtrl);&lt;/span&gt;&lt;/li&gt; &lt;/ol&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;p&gt;We just need to wrap up the form controls in WindowsFormsHost controls and add them to the stackpanels.&lt;/p&gt; &lt;div style=\"padding-bottom: 0px; margin: 0px; padding-left: 0px; padding-right: 0px; display: inline; float: none; padding-top: 0px\" id=\"scid:9ce6104f-a9aa-4a17-a79f-3a39532ebf7c:d009c703-796d-427d-ab54-28221dafb6ca\" class=\"wlWriterEditableSmartContent\"&gt; &lt;div style=\"border: #000080 1px solid; color: #000; font-family: 'Courier New', Courier, Monospace; font-size: 10pt\"&gt; &lt;div style=\"background: #ddd; overflow: auto\"&gt; &lt;ol style=\"background: #000000; margin: 0 0 0 2.5em; padding: 0 0 0 5px;\"&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; contractsCtrl = &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;Contract_Control&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;(rmsController);&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0contractsCtrl.Dock = &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;DockStyle&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;.Fill;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; host = &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;WindowsFormsHost&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;();&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0host.Child = contractsCtrl;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0leftPanel.Children.Add(host);&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&amp;nbsp;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; rateScheduleCtrl = &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;RateSchedule_Control&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;(rmsController);&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0rateScheduleCtrl.Dock = &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;DockStyle&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;.Fill;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0&lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;var&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; host2 = &lt;/span&gt;&lt;span style=\"color:#2b91af\"&gt;new&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt; &lt;/span&gt;&lt;span style=\"color:#ff7400\"&gt;WindowsFormsHost&lt;/span&gt;&lt;span style=\"color:#ffffff\"&gt;();&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0host2.Child = rateScheduleCtrl;&lt;/span&gt;&lt;/li&gt; &lt;li&gt;&lt;span style=\"color:#ffffff\"&gt;\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0\xC2\xA0leftPanel.Children.Add(host2);&lt;/span&gt;&lt;/li&gt; &lt;/ol&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;p&gt;Now I can compile. But when I run, I blow up. Looks like I need to take a look at the RMS Controller. But that can wait for another day.&lt;/p&gt;  &lt;div class=\"blogger-post-footer\"&gt;&lt;img width='1' height='1' src='https://blogger.googleusercontent.com/tracker/2815645646073366093-6567329549691676757?l=www.theabsentmindedcoder.com' alt='' /&gt;&lt;/div&gt;</description><link>http://www.theabsentmindedcoder.com/2010/11/omg-dependenciesnew-direction-time.html</link><author>noreply@blogger.com (JB)</author><thr:total>0</thr:total></item></channel></rss>"
    http_version: "1.1"
